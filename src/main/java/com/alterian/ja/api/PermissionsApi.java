/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.ClearPermissionsRequest;
import com.alterian.ja.model.GetAvailablePermissionsDefaultResponse;
import com.alterian.ja.model.GetGroupsWithPermissionDefaultResponse;
import com.alterian.ja.model.GetGroupsWithPermissionRequest;
import com.alterian.ja.model.GetPermissionsDefaultResponse;
import com.alterian.ja.model.GetPermissionsRequest;
import com.alterian.ja.model.GetPermittedUsersAndGroupsRequest;
import com.alterian.ja.model.GetResourcesDefaultResponse;
import com.alterian.ja.model.GetUsersWithPermissionRequest;
import com.alterian.ja.model.SetPermissionsRequest;
import com.alterian.ja.model.TakeOwnershipPermissionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PermissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clearPermissions
     * @param clearPermissionsRequest Clear the permissions for the specific security ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearPermissionsCall(ClearPermissionsRequest clearPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clearPermissionsRequest;

        // create path and map variables
        String localVarPath = "/ClearPermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearPermissionsValidateBeforeCall(ClearPermissionsRequest clearPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clearPermissionsRequest' is set
        if (clearPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'clearPermissionsRequest' when calling clearPermissions(Async)");
        }

        return clearPermissionsCall(clearPermissionsRequest, _callback);

    }

    /**
     * Clear the permissions for the specific security ID
     * Clear the permissions for the specific security ID
     * @param clearPermissionsRequest Clear the permissions for the specific security ID (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse clearPermissions(ClearPermissionsRequest clearPermissionsRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = clearPermissionsWithHttpInfo(clearPermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Clear the permissions for the specific security ID
     * Clear the permissions for the specific security ID
     * @param clearPermissionsRequest Clear the permissions for the specific security ID (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> clearPermissionsWithHttpInfo(ClearPermissionsRequest clearPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = clearPermissionsValidateBeforeCall(clearPermissionsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear the permissions for the specific security ID (asynchronously)
     * Clear the permissions for the specific security ID
     * @param clearPermissionsRequest Clear the permissions for the specific security ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearPermissionsAsync(ClearPermissionsRequest clearPermissionsRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearPermissionsValidateBeforeCall(clearPermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailablePermissions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetAvailablePermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailablePermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAvailablePermissionsCall(_callback);

    }

    /**
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * @return GetAvailablePermissionsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailablePermissionsDefaultResponse getAvailablePermissions() throws ApiException {
        ApiResponse<GetAvailablePermissionsDefaultResponse> localVarResp = getAvailablePermissionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * @return ApiResponse&lt;GetAvailablePermissionsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailablePermissionsDefaultResponse> getAvailablePermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAvailablePermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAvailablePermissionsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc. (asynchronously)
     * Gets a list of the permissions; this is a simple list and does not include permission values, etc.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePermissionsAsync(final ApiCallback<GetAvailablePermissionsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailablePermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAvailablePermissionsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupsWithPermission
     * @param getGroupsWithPermissionRequest List the groups which have been granted the specified permission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsWithPermissionCall(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGroupsWithPermissionRequest;

        // create path and map variables
        String localVarPath = "/GetGroupsWithPermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsWithPermissionValidateBeforeCall(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getGroupsWithPermissionRequest' is set
        if (getGroupsWithPermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'getGroupsWithPermissionRequest' when calling getGroupsWithPermission(Async)");
        }

        return getGroupsWithPermissionCall(getGroupsWithPermissionRequest, _callback);

    }

    /**
     * List the groups which have been granted the specified permission
     * List the groups which have been granted the specified permission
     * @param getGroupsWithPermissionRequest List the groups which have been granted the specified permission (required)
     * @return GetGroupsWithPermissionDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupsWithPermissionDefaultResponse getGroupsWithPermission(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest) throws ApiException {
        ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResp = getGroupsWithPermissionWithHttpInfo(getGroupsWithPermissionRequest);
        return localVarResp.getData();
    }

    /**
     * List the groups which have been granted the specified permission
     * List the groups which have been granted the specified permission
     * @param getGroupsWithPermissionRequest List the groups which have been granted the specified permission (required)
     * @return ApiResponse&lt;GetGroupsWithPermissionDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupsWithPermissionDefaultResponse> getGroupsWithPermissionWithHttpInfo(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = getGroupsWithPermissionValidateBeforeCall(getGroupsWithPermissionRequest, null);
        Type localVarReturnType = new TypeToken<GetGroupsWithPermissionDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the groups which have been granted the specified permission (asynchronously)
     * List the groups which have been granted the specified permission
     * @param getGroupsWithPermissionRequest List the groups which have been granted the specified permission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsWithPermissionAsync(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, final ApiCallback<GetGroupsWithPermissionDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsWithPermissionValidateBeforeCall(getGroupsWithPermissionRequest, _callback);
        Type localVarReturnType = new TypeToken<GetGroupsWithPermissionDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPermissions
     * @param getPermissionsRequest Given a particular item, fetch a list of permissions on that item for a given user or group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsCall(GetPermissionsRequest getPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPermissionsRequest;

        // create path and map variables
        String localVarPath = "/GetPermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionsValidateBeforeCall(GetPermissionsRequest getPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getPermissionsRequest' is set
        if (getPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'getPermissionsRequest' when calling getPermissions(Async)");
        }

        return getPermissionsCall(getPermissionsRequest, _callback);

    }

    /**
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @param getPermissionsRequest Given a particular item, fetch a list of permissions on that item for a given user or group. (required)
     * @return GetPermissionsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPermissionsDefaultResponse getPermissions(GetPermissionsRequest getPermissionsRequest) throws ApiException {
        ApiResponse<GetPermissionsDefaultResponse> localVarResp = getPermissionsWithHttpInfo(getPermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @param getPermissionsRequest Given a particular item, fetch a list of permissions on that item for a given user or group. (required)
     * @return ApiResponse&lt;GetPermissionsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPermissionsDefaultResponse> getPermissionsWithHttpInfo(GetPermissionsRequest getPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(getPermissionsRequest, null);
        Type localVarReturnType = new TypeToken<GetPermissionsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a particular item, fetch a list of permissions on that item for a given user or group. (asynchronously)
     * Given a particular item, fetch a list of permissions on that item for a given user or group.
     * @param getPermissionsRequest Given a particular item, fetch a list of permissions on that item for a given user or group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsAsync(GetPermissionsRequest getPermissionsRequest, final ApiCallback<GetPermissionsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(getPermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetPermissionsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPermittedUsersAndGroups
     * @param getPermittedUsersAndGroupsRequest List the users and groups which have direct or indirect access to the specified item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermittedUsersAndGroupsCall(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPermittedUsersAndGroupsRequest;

        // create path and map variables
        String localVarPath = "/GetPermittedUsersAndGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermittedUsersAndGroupsValidateBeforeCall(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getPermittedUsersAndGroupsRequest' is set
        if (getPermittedUsersAndGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'getPermittedUsersAndGroupsRequest' when calling getPermittedUsersAndGroups(Async)");
        }

        return getPermittedUsersAndGroupsCall(getPermittedUsersAndGroupsRequest, _callback);

    }

    /**
     * List the users and groups which have direct or indirect access to the specified item
     * List the users and groups which have direct or indirect access to the specified item
     * @param getPermittedUsersAndGroupsRequest List the users and groups which have direct or indirect access to the specified item (required)
     * @return GetGroupsWithPermissionDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupsWithPermissionDefaultResponse getPermittedUsersAndGroups(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest) throws ApiException {
        ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResp = getPermittedUsersAndGroupsWithHttpInfo(getPermittedUsersAndGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * List the users and groups which have direct or indirect access to the specified item
     * List the users and groups which have direct or indirect access to the specified item
     * @param getPermittedUsersAndGroupsRequest List the users and groups which have direct or indirect access to the specified item (required)
     * @return ApiResponse&lt;GetGroupsWithPermissionDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupsWithPermissionDefaultResponse> getPermittedUsersAndGroupsWithHttpInfo(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = getPermittedUsersAndGroupsValidateBeforeCall(getPermittedUsersAndGroupsRequest, null);
        Type localVarReturnType = new TypeToken<GetGroupsWithPermissionDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users and groups which have direct or indirect access to the specified item (asynchronously)
     * List the users and groups which have direct or indirect access to the specified item
     * @param getPermittedUsersAndGroupsRequest List the users and groups which have direct or indirect access to the specified item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermittedUsersAndGroupsAsync(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, final ApiCallback<GetGroupsWithPermissionDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermittedUsersAndGroupsValidateBeforeCall(getPermittedUsersAndGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetGroupsWithPermissionDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResources
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getResourcesCall(_callback);

    }

    /**
     * Gets a list of the resource types for permissions
     * Gets a list of the resource types for permissions
     * @return GetResourcesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetResourcesDefaultResponse getResources() throws ApiException {
        ApiResponse<GetResourcesDefaultResponse> localVarResp = getResourcesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of the resource types for permissions
     * Gets a list of the resource types for permissions
     * @return ApiResponse&lt;GetResourcesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetResourcesDefaultResponse> getResourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetResourcesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of the resource types for permissions (asynchronously)
     * Gets a list of the resource types for permissions
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesAsync(final ApiCallback<GetResourcesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetResourcesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersWithPermission
     * @param getUsersWithPermissionRequest List the users which have been granted the specified permission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersWithPermissionCall(GetUsersWithPermissionRequest getUsersWithPermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUsersWithPermissionRequest;

        // create path and map variables
        String localVarPath = "/GetUsersWithPermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersWithPermissionValidateBeforeCall(GetUsersWithPermissionRequest getUsersWithPermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getUsersWithPermissionRequest' is set
        if (getUsersWithPermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'getUsersWithPermissionRequest' when calling getUsersWithPermission(Async)");
        }

        return getUsersWithPermissionCall(getUsersWithPermissionRequest, _callback);

    }

    /**
     * List the users which have been granted the specified permission
     * List the users which have been granted the specified permission
     * @param getUsersWithPermissionRequest List the users which have been granted the specified permission (required)
     * @return GetGroupsWithPermissionDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupsWithPermissionDefaultResponse getUsersWithPermission(GetUsersWithPermissionRequest getUsersWithPermissionRequest) throws ApiException {
        ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResp = getUsersWithPermissionWithHttpInfo(getUsersWithPermissionRequest);
        return localVarResp.getData();
    }

    /**
     * List the users which have been granted the specified permission
     * List the users which have been granted the specified permission
     * @param getUsersWithPermissionRequest List the users which have been granted the specified permission (required)
     * @return ApiResponse&lt;GetGroupsWithPermissionDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupsWithPermissionDefaultResponse> getUsersWithPermissionWithHttpInfo(GetUsersWithPermissionRequest getUsersWithPermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = getUsersWithPermissionValidateBeforeCall(getUsersWithPermissionRequest, null);
        Type localVarReturnType = new TypeToken<GetGroupsWithPermissionDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users which have been granted the specified permission (asynchronously)
     * List the users which have been granted the specified permission
     * @param getUsersWithPermissionRequest List the users which have been granted the specified permission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersWithPermissionAsync(GetUsersWithPermissionRequest getUsersWithPermissionRequest, final ApiCallback<GetGroupsWithPermissionDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersWithPermissionValidateBeforeCall(getUsersWithPermissionRequest, _callback);
        Type localVarReturnType = new TypeToken<GetGroupsWithPermissionDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPermissions
     * @param setPermissionsRequest Set permissions for a particular item and securityID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPermissionsCall(SetPermissionsRequest setPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPermissionsRequest;

        // create path and map variables
        String localVarPath = "/SetPermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPermissionsValidateBeforeCall(SetPermissionsRequest setPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setPermissionsRequest' is set
        if (setPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'setPermissionsRequest' when calling setPermissions(Async)");
        }

        return setPermissionsCall(setPermissionsRequest, _callback);

    }

    /**
     * Set permissions for a particular item and securityID
     * Set permissions for a particular item and securityID
     * @param setPermissionsRequest Set permissions for a particular item and securityID (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse setPermissions(SetPermissionsRequest setPermissionsRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = setPermissionsWithHttpInfo(setPermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Set permissions for a particular item and securityID
     * Set permissions for a particular item and securityID
     * @param setPermissionsRequest Set permissions for a particular item and securityID (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> setPermissionsWithHttpInfo(SetPermissionsRequest setPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = setPermissionsValidateBeforeCall(setPermissionsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set permissions for a particular item and securityID (asynchronously)
     * Set permissions for a particular item and securityID
     * @param setPermissionsRequest Set permissions for a particular item and securityID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPermissionsAsync(SetPermissionsRequest setPermissionsRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPermissionsValidateBeforeCall(setPermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for takeOwnershipPermission
     * @param takeOwnershipPermissionRequest Change the owner of a particular item from the current owner to somebody else (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call takeOwnershipPermissionCall(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = takeOwnershipPermissionRequest;

        // create path and map variables
        String localVarPath = "/TakeOwnershipPermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call takeOwnershipPermissionValidateBeforeCall(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'takeOwnershipPermissionRequest' is set
        if (takeOwnershipPermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'takeOwnershipPermissionRequest' when calling takeOwnershipPermission(Async)");
        }

        return takeOwnershipPermissionCall(takeOwnershipPermissionRequest, _callback);

    }

    /**
     * Change the owner of a particular item from the current owner to somebody else
     * Change the owner of a particular item from the current owner to somebody else
     * @param takeOwnershipPermissionRequest Change the owner of a particular item from the current owner to somebody else (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse takeOwnershipPermission(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = takeOwnershipPermissionWithHttpInfo(takeOwnershipPermissionRequest);
        return localVarResp.getData();
    }

    /**
     * Change the owner of a particular item from the current owner to somebody else
     * Change the owner of a particular item from the current owner to somebody else
     * @param takeOwnershipPermissionRequest Change the owner of a particular item from the current owner to somebody else (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> takeOwnershipPermissionWithHttpInfo(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = takeOwnershipPermissionValidateBeforeCall(takeOwnershipPermissionRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the owner of a particular item from the current owner to somebody else (asynchronously)
     * Change the owner of a particular item from the current owner to somebody else
     * @param takeOwnershipPermissionRequest Change the owner of a particular item from the current owner to somebody else (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call takeOwnershipPermissionAsync(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = takeOwnershipPermissionValidateBeforeCall(takeOwnershipPermissionRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
