/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AreDatasourceCampaignsPausedDefaultResponse;
import com.alterian.ja.model.AreDatasourceCampaignsPausedRequest;
import com.alterian.ja.model.AreDatasourceJobsCompleteRequest;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateDataSourceMappingRequest;
import com.alterian.ja.model.CreateDatasourceRequest;
import com.alterian.ja.model.DeleteDatasourceRequest;
import com.alterian.ja.model.DeleteFieldTransformListRequest;
import com.alterian.ja.model.DeleteTransformRequest;
import com.alterian.ja.model.DisableDatasourceRequest;
import com.alterian.ja.model.EnableDatasourceRequest;
import java.io.File;
import com.alterian.ja.model.GetClientSetsRequest;
import com.alterian.ja.model.GetDataSourceAttributesDefaultResponse;
import com.alterian.ja.model.GetDataSourceAttributesRequest;
import com.alterian.ja.model.GetDataSourceEngineUserNameDefaultResponse;
import com.alterian.ja.model.GetDataSourceEngineUserNameRequest;
import com.alterian.ja.model.GetDataSourceItemsDefaultResponse;
import com.alterian.ja.model.GetDataSourceItemsRequest;
import com.alterian.ja.model.GetDataSourceMappingsDefaultResponse;
import com.alterian.ja.model.GetDataSourceMappingsRequest;
import com.alterian.ja.model.GetDataSourceTypesDefaultResponse;
import com.alterian.ja.model.GetDataSourceUsersDefaultResponse;
import com.alterian.ja.model.GetDataSourceUsersRequest;
import com.alterian.ja.model.GetDataSourcesDefaultResponse;
import com.alterian.ja.model.GetDataSourcesRequest;
import com.alterian.ja.model.GetDatasourceColumnDefaultResponse;
import com.alterian.ja.model.GetDatasourceColumnRequest;
import com.alterian.ja.model.GetDatasourceColumnsDefaultResponse;
import com.alterian.ja.model.GetDatasourceColumnsRequest;
import com.alterian.ja.model.GetDatasourceDatabasesDefaultResponse;
import com.alterian.ja.model.GetDatasourceDatabasesRequest;
import com.alterian.ja.model.GetDatasourceDefaultResponse;
import com.alterian.ja.model.GetDatasourceFieldTypesDefaultResponse;
import com.alterian.ja.model.GetDatasourceRequest;
import com.alterian.ja.model.GetDatasourceTablesDefaultResponse;
import com.alterian.ja.model.GetDatasourceTablesRequest;
import com.alterian.ja.model.GetDecodeListDefaultResponse;
import com.alterian.ja.model.GetDecodeListRequest;
import com.alterian.ja.model.GetFieldTransformListDefaultResponse;
import com.alterian.ja.model.GetFieldTransformListRequest;
import com.alterian.ja.model.GetFieldTransformListsDefaultResponse;
import com.alterian.ja.model.GetProcessStatusDefaultResponse;
import com.alterian.ja.model.GetProcessStatusRequest;
import com.alterian.ja.model.GetTransformsRequest;
import com.alterian.ja.model.MarkDatasourceAsPendingDisableRequest;
import com.alterian.ja.model.PauseDatasourceCampaignsRequest;
import com.alterian.ja.model.RefreshDatasourceRequest;
import com.alterian.ja.model.ResumeDatasourceCampaignsRequest;
import com.alterian.ja.model.SaveDecodeListRequest;
import com.alterian.ja.model.SaveFieldTransformListRequest;
import com.alterian.ja.model.UpdateDatasourceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for areDatasourceCampaignsPaused
     * @param areDatasourceCampaignsPausedRequest Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areDatasourceCampaignsPausedCall(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = areDatasourceCampaignsPausedRequest;

        // create path and map variables
        String localVarPath = "/AreDatasourceCampaignsPaused";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call areDatasourceCampaignsPausedValidateBeforeCall(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'areDatasourceCampaignsPausedRequest' is set
        if (areDatasourceCampaignsPausedRequest == null) {
            throw new ApiException("Missing the required parameter 'areDatasourceCampaignsPausedRequest' when calling areDatasourceCampaignsPaused(Async)");
        }

        return areDatasourceCampaignsPausedCall(areDatasourceCampaignsPausedRequest, _callback);

    }

    /**
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @param areDatasourceCampaignsPausedRequest Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. (required)
     * @return AreDatasourceCampaignsPausedDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AreDatasourceCampaignsPausedDefaultResponse areDatasourceCampaignsPaused(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest) throws ApiException {
        ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> localVarResp = areDatasourceCampaignsPausedWithHttpInfo(areDatasourceCampaignsPausedRequest);
        return localVarResp.getData();
    }

    /**
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @param areDatasourceCampaignsPausedRequest Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. (required)
     * @return ApiResponse&lt;AreDatasourceCampaignsPausedDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> areDatasourceCampaignsPausedWithHttpInfo(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest) throws ApiException {
        okhttp3.Call localVarCall = areDatasourceCampaignsPausedValidateBeforeCall(areDatasourceCampaignsPausedRequest, null);
        Type localVarReturnType = new TypeToken<AreDatasourceCampaignsPausedDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. (asynchronously)
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     * @param areDatasourceCampaignsPausedRequest Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areDatasourceCampaignsPausedAsync(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, final ApiCallback<AreDatasourceCampaignsPausedDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = areDatasourceCampaignsPausedValidateBeforeCall(areDatasourceCampaignsPausedRequest, _callback);
        Type localVarReturnType = new TypeToken<AreDatasourceCampaignsPausedDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for areDatasourceJobsComplete
     * @param areDatasourceJobsCompleteRequest Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areDatasourceJobsCompleteCall(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = areDatasourceJobsCompleteRequest;

        // create path and map variables
        String localVarPath = "/AreDatasourceJobsComplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call areDatasourceJobsCompleteValidateBeforeCall(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'areDatasourceJobsCompleteRequest' is set
        if (areDatasourceJobsCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'areDatasourceJobsCompleteRequest' when calling areDatasourceJobsComplete(Async)");
        }

        return areDatasourceJobsCompleteCall(areDatasourceJobsCompleteRequest, _callback);

    }

    /**
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     * @param areDatasourceJobsCompleteRequest Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running (required)
     * @return AreDatasourceCampaignsPausedDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AreDatasourceCampaignsPausedDefaultResponse areDatasourceJobsComplete(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest) throws ApiException {
        ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> localVarResp = areDatasourceJobsCompleteWithHttpInfo(areDatasourceJobsCompleteRequest);
        return localVarResp.getData();
    }

    /**
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     * @param areDatasourceJobsCompleteRequest Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running (required)
     * @return ApiResponse&lt;AreDatasourceCampaignsPausedDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> areDatasourceJobsCompleteWithHttpInfo(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest) throws ApiException {
        okhttp3.Call localVarCall = areDatasourceJobsCompleteValidateBeforeCall(areDatasourceJobsCompleteRequest, null);
        Type localVarReturnType = new TypeToken<AreDatasourceCampaignsPausedDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running (asynchronously)
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     * @param areDatasourceJobsCompleteRequest Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areDatasourceJobsCompleteAsync(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, final ApiCallback<AreDatasourceCampaignsPausedDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = areDatasourceJobsCompleteValidateBeforeCall(areDatasourceJobsCompleteRequest, _callback);
        Type localVarReturnType = new TypeToken<AreDatasourceCampaignsPausedDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDataSourceMapping
     * @param createDataSourceMappingRequest Add in a @see(DatasourceUserMapping). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataSourceMappingCall(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataSourceMappingRequest;

        // create path and map variables
        String localVarPath = "/CreateDataSourceMapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDataSourceMappingValidateBeforeCall(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDataSourceMappingRequest' is set
        if (createDataSourceMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'createDataSourceMappingRequest' when calling createDataSourceMapping(Async)");
        }

        return createDataSourceMappingCall(createDataSourceMappingRequest, _callback);

    }

    /**
     * Add in a @see(DatasourceUserMapping).
     * Add in a @see(DatasourceUserMapping).
     * @param createDataSourceMappingRequest Add in a @see(DatasourceUserMapping). (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse createDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = createDataSourceMappingWithHttpInfo(createDataSourceMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Add in a @see(DatasourceUserMapping).
     * Add in a @see(DatasourceUserMapping).
     * @param createDataSourceMappingRequest Add in a @see(DatasourceUserMapping). (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> createDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = createDataSourceMappingValidateBeforeCall(createDataSourceMappingRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add in a @see(DatasourceUserMapping). (asynchronously)
     * Add in a @see(DatasourceUserMapping).
     * @param createDataSourceMappingRequest Add in a @see(DatasourceUserMapping). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDataSourceMappingValidateBeforeCall(createDataSourceMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDatasource
     * @param createDatasourceRequest Creates an engine datasource configured to point at the specified server and project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasourceCall(CreateDatasourceRequest createDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDatasourceRequest;

        // create path and map variables
        String localVarPath = "/CreateDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasourceValidateBeforeCall(CreateDatasourceRequest createDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDatasourceRequest' is set
        if (createDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'createDatasourceRequest' when calling createDatasource(Async)");
        }

        return createDatasourceCall(createDatasourceRequest, _callback);

    }

    /**
     * Creates an engine datasource configured to point at the specified server and project.
     * Creates an engine datasource configured to point at the specified server and project.
     * @param createDatasourceRequest Creates an engine datasource configured to point at the specified server and project. (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse createDatasource(CreateDatasourceRequest createDatasourceRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = createDatasourceWithHttpInfo(createDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Creates an engine datasource configured to point at the specified server and project.
     * Creates an engine datasource configured to point at the specified server and project.
     * @param createDatasourceRequest Creates an engine datasource configured to point at the specified server and project. (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> createDatasourceWithHttpInfo(CreateDatasourceRequest createDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = createDatasourceValidateBeforeCall(createDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an engine datasource configured to point at the specified server and project. (asynchronously)
     * Creates an engine datasource configured to point at the specified server and project.
     * @param createDatasourceRequest Creates an engine datasource configured to point at the specified server and project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasourceAsync(CreateDatasourceRequest createDatasourceRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasourceValidateBeforeCall(createDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataSourceMapping
     * @param createDataSourceMappingRequest Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDataSourceMappingCall(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataSourceMappingRequest;

        // create path and map variables
        String localVarPath = "/DeleteDataSourceMapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataSourceMappingValidateBeforeCall(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDataSourceMappingRequest' is set
        if (createDataSourceMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'createDataSourceMappingRequest' when calling deleteDataSourceMapping(Async)");
        }

        return deleteDataSourceMappingCall(createDataSourceMappingRequest, _callback);

    }

    /**
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @param createDataSourceMappingRequest Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteDataSourceMappingWithHttpInfo(createDataSourceMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @param createDataSourceMappingRequest Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDataSourceMappingValidateBeforeCall(createDataSourceMappingRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User (asynchronously)
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     * @param createDataSourceMappingRequest Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataSourceMappingValidateBeforeCall(createDataSourceMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDatasource
     * @param deleteDatasourceRequest Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasourceCall(DeleteDatasourceRequest deleteDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDatasourceRequest;

        // create path and map variables
        String localVarPath = "/DeleteDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasourceValidateBeforeCall(DeleteDatasourceRequest deleteDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteDatasourceRequest' is set
        if (deleteDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteDatasourceRequest' when calling deleteDatasource(Async)");
        }

        return deleteDatasourceCall(deleteDatasourceRequest, _callback);

    }

    /**
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @param deleteDatasourceRequest Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteDatasource(DeleteDatasourceRequest deleteDatasourceRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteDatasourceWithHttpInfo(deleteDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @param deleteDatasourceRequest Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteDatasourceWithHttpInfo(DeleteDatasourceRequest deleteDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasourceValidateBeforeCall(deleteDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. (asynchronously)
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     * @param deleteDatasourceRequest Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasourceAsync(DeleteDatasourceRequest deleteDatasourceRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasourceValidateBeforeCall(deleteDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFieldTransformList
     * @param deleteFieldTransformListRequest Delete all versions of the specified transformation list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldTransformListCall(DeleteFieldTransformListRequest deleteFieldTransformListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFieldTransformListRequest;

        // create path and map variables
        String localVarPath = "/DeleteFieldTransformList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldTransformListValidateBeforeCall(DeleteFieldTransformListRequest deleteFieldTransformListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteFieldTransformListRequest' is set
        if (deleteFieldTransformListRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFieldTransformListRequest' when calling deleteFieldTransformList(Async)");
        }

        return deleteFieldTransformListCall(deleteFieldTransformListRequest, _callback);

    }

    /**
     * Delete all versions of the specified transformation list
     * Delete all versions of the specified transformation list
     * @param deleteFieldTransformListRequest Delete all versions of the specified transformation list (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteFieldTransformList(DeleteFieldTransformListRequest deleteFieldTransformListRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteFieldTransformListWithHttpInfo(deleteFieldTransformListRequest);
        return localVarResp.getData();
    }

    /**
     * Delete all versions of the specified transformation list
     * Delete all versions of the specified transformation list
     * @param deleteFieldTransformListRequest Delete all versions of the specified transformation list (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteFieldTransformListWithHttpInfo(DeleteFieldTransformListRequest deleteFieldTransformListRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldTransformListValidateBeforeCall(deleteFieldTransformListRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all versions of the specified transformation list (asynchronously)
     * Delete all versions of the specified transformation list
     * @param deleteFieldTransformListRequest Delete all versions of the specified transformation list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldTransformListAsync(DeleteFieldTransformListRequest deleteFieldTransformListRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldTransformListValidateBeforeCall(deleteFieldTransformListRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTransform
     * @param deleteTransformRequest Delete all versions of the specified transform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransformCall(DeleteTransformRequest deleteTransformRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTransformRequest;

        // create path and map variables
        String localVarPath = "/DeleteTransform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransformValidateBeforeCall(DeleteTransformRequest deleteTransformRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteTransformRequest' is set
        if (deleteTransformRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTransformRequest' when calling deleteTransform(Async)");
        }

        return deleteTransformCall(deleteTransformRequest, _callback);

    }

    /**
     * Delete all versions of the specified transform
     * Delete all versions of the specified transform
     * @param deleteTransformRequest Delete all versions of the specified transform (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteTransform(DeleteTransformRequest deleteTransformRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteTransformWithHttpInfo(deleteTransformRequest);
        return localVarResp.getData();
    }

    /**
     * Delete all versions of the specified transform
     * Delete all versions of the specified transform
     * @param deleteTransformRequest Delete all versions of the specified transform (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteTransformWithHttpInfo(DeleteTransformRequest deleteTransformRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteTransformValidateBeforeCall(deleteTransformRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all versions of the specified transform (asynchronously)
     * Delete all versions of the specified transform
     * @param deleteTransformRequest Delete all versions of the specified transform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransformAsync(DeleteTransformRequest deleteTransformRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransformValidateBeforeCall(deleteTransformRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableDatasource
     * @param disableDatasourceRequest Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDatasourceCall(DisableDatasourceRequest disableDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableDatasourceRequest;

        // create path and map variables
        String localVarPath = "/DisableDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableDatasourceValidateBeforeCall(DisableDatasourceRequest disableDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disableDatasourceRequest' is set
        if (disableDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'disableDatasourceRequest' when calling disableDatasource(Async)");
        }

        return disableDatasourceCall(disableDatasourceRequest, _callback);

    }

    /**
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @param disableDatasourceRequest Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse disableDatasource(DisableDatasourceRequest disableDatasourceRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = disableDatasourceWithHttpInfo(disableDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @param disableDatasourceRequest Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> disableDatasourceWithHttpInfo(DisableDatasourceRequest disableDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = disableDatasourceValidateBeforeCall(disableDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) (asynchronously)
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     * @param disableDatasourceRequest Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDatasourceAsync(DisableDatasourceRequest disableDatasourceRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableDatasourceValidateBeforeCall(disableDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableDatasource
     * @param enableDatasourceRequest Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDatasourceCall(EnableDatasourceRequest enableDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableDatasourceRequest;

        // create path and map variables
        String localVarPath = "/EnableDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableDatasourceValidateBeforeCall(EnableDatasourceRequest enableDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enableDatasourceRequest' is set
        if (enableDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'enableDatasourceRequest' when calling enableDatasource(Async)");
        }

        return enableDatasourceCall(enableDatasourceRequest, _callback);

    }

    /**
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @param enableDatasourceRequest Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse enableDatasource(EnableDatasourceRequest enableDatasourceRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = enableDatasourceWithHttpInfo(enableDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @param enableDatasourceRequest Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> enableDatasourceWithHttpInfo(EnableDatasourceRequest enableDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = enableDatasourceValidateBeforeCall(enableDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. (asynchronously)
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     * @param enableDatasourceRequest Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDatasourceAsync(EnableDatasourceRequest enableDatasourceRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableDatasourceValidateBeforeCall(enableDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportFieldTransformList
     * @param id  (optional)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportFieldTransformListCall(Integer id, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ExportFieldTransformList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Id", id));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportFieldTransformListValidateBeforeCall(Integer id, Integer version, final ApiCallback _callback) throws ApiException {
        return exportFieldTransformListCall(id, version, _callback);

    }

    /**
     * Export a list of field transforms for use in transforming discrete values
     * Export a list of field transforms for use in transforming discrete values
     * @param id  (optional)
     * @param version  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File exportFieldTransformList(Integer id, Integer version) throws ApiException {
        ApiResponse<File> localVarResp = exportFieldTransformListWithHttpInfo(id, version);
        return localVarResp.getData();
    }

    /**
     * Export a list of field transforms for use in transforming discrete values
     * Export a list of field transforms for use in transforming discrete values
     * @param id  (optional)
     * @param version  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportFieldTransformListWithHttpInfo(Integer id, Integer version) throws ApiException {
        okhttp3.Call localVarCall = exportFieldTransformListValidateBeforeCall(id, version, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export a list of field transforms for use in transforming discrete values (asynchronously)
     * Export a list of field transforms for use in transforming discrete values
     * @param id  (optional)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportFieldTransformListAsync(Integer id, Integer version, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportFieldTransformListValidateBeforeCall(id, version, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSourceAttributes
     * @param getDataSourceAttributesRequest Get a list of the attributes which can be applied to the given type of datasource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceAttributesCall(GetDataSourceAttributesRequest getDataSourceAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataSourceAttributesRequest;

        // create path and map variables
        String localVarPath = "/GetDataSourceAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceAttributesValidateBeforeCall(GetDataSourceAttributesRequest getDataSourceAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDataSourceAttributesRequest' is set
        if (getDataSourceAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'getDataSourceAttributesRequest' when calling getDataSourceAttributes(Async)");
        }

        return getDataSourceAttributesCall(getDataSourceAttributesRequest, _callback);

    }

    /**
     * Get a list of the attributes which can be applied to the given type of datasource.
     * Get a list of the attributes which can be applied to the given type of datasource.
     * @param getDataSourceAttributesRequest Get a list of the attributes which can be applied to the given type of datasource. (required)
     * @return GetDataSourceAttributesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceAttributesDefaultResponse getDataSourceAttributes(GetDataSourceAttributesRequest getDataSourceAttributesRequest) throws ApiException {
        ApiResponse<GetDataSourceAttributesDefaultResponse> localVarResp = getDataSourceAttributesWithHttpInfo(getDataSourceAttributesRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of the attributes which can be applied to the given type of datasource.
     * Get a list of the attributes which can be applied to the given type of datasource.
     * @param getDataSourceAttributesRequest Get a list of the attributes which can be applied to the given type of datasource. (required)
     * @return ApiResponse&lt;GetDataSourceAttributesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceAttributesDefaultResponse> getDataSourceAttributesWithHttpInfo(GetDataSourceAttributesRequest getDataSourceAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceAttributesValidateBeforeCall(getDataSourceAttributesRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceAttributesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the attributes which can be applied to the given type of datasource. (asynchronously)
     * Get a list of the attributes which can be applied to the given type of datasource.
     * @param getDataSourceAttributesRequest Get a list of the attributes which can be applied to the given type of datasource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceAttributesAsync(GetDataSourceAttributesRequest getDataSourceAttributesRequest, final ApiCallback<GetDataSourceAttributesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceAttributesValidateBeforeCall(getDataSourceAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceAttributesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSourceEngineUserName
     * @param getDataSourceEngineUserNameRequest Given a userID and datasourceID, return back the engine user name which should be used whilst connecting (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceEngineUserNameCall(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataSourceEngineUserNameRequest;

        // create path and map variables
        String localVarPath = "/GetDataSourceEngineUserName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceEngineUserNameValidateBeforeCall(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDataSourceEngineUserNameRequest' is set
        if (getDataSourceEngineUserNameRequest == null) {
            throw new ApiException("Missing the required parameter 'getDataSourceEngineUserNameRequest' when calling getDataSourceEngineUserName(Async)");
        }

        return getDataSourceEngineUserNameCall(getDataSourceEngineUserNameRequest, _callback);

    }

    /**
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @param getDataSourceEngineUserNameRequest Given a userID and datasourceID, return back the engine user name which should be used whilst connecting (required)
     * @return GetDataSourceEngineUserNameDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceEngineUserNameDefaultResponse getDataSourceEngineUserName(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest) throws ApiException {
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResp = getDataSourceEngineUserNameWithHttpInfo(getDataSourceEngineUserNameRequest);
        return localVarResp.getData();
    }

    /**
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @param getDataSourceEngineUserNameRequest Given a userID and datasourceID, return back the engine user name which should be used whilst connecting (required)
     * @return ApiResponse&lt;GetDataSourceEngineUserNameDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceEngineUserNameDefaultResponse> getDataSourceEngineUserNameWithHttpInfo(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceEngineUserNameValidateBeforeCall(getDataSourceEngineUserNameRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting (asynchronously)
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     * @param getDataSourceEngineUserNameRequest Given a userID and datasourceID, return back the engine user name which should be used whilst connecting (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceEngineUserNameAsync(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, final ApiCallback<GetDataSourceEngineUserNameDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceEngineUserNameValidateBeforeCall(getDataSourceEngineUserNameRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSourceItems
     * @param getDataSourceItemsRequest Allows you to search for data source objects, inclusing datasource, database, table and columns. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceItemsCall(GetDataSourceItemsRequest getDataSourceItemsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataSourceItemsRequest;

        // create path and map variables
        String localVarPath = "/GetDataSourceItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceItemsValidateBeforeCall(GetDataSourceItemsRequest getDataSourceItemsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDataSourceItemsRequest' is set
        if (getDataSourceItemsRequest == null) {
            throw new ApiException("Missing the required parameter 'getDataSourceItemsRequest' when calling getDataSourceItems(Async)");
        }

        return getDataSourceItemsCall(getDataSourceItemsRequest, _callback);

    }

    /**
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @param getDataSourceItemsRequest Allows you to search for data source objects, inclusing datasource, database, table and columns. (required)
     * @return GetDataSourceItemsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceItemsDefaultResponse getDataSourceItems(GetDataSourceItemsRequest getDataSourceItemsRequest) throws ApiException {
        ApiResponse<GetDataSourceItemsDefaultResponse> localVarResp = getDataSourceItemsWithHttpInfo(getDataSourceItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @param getDataSourceItemsRequest Allows you to search for data source objects, inclusing datasource, database, table and columns. (required)
     * @return ApiResponse&lt;GetDataSourceItemsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceItemsDefaultResponse> getDataSourceItemsWithHttpInfo(GetDataSourceItemsRequest getDataSourceItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceItemsValidateBeforeCall(getDataSourceItemsRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceItemsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows you to search for data source objects, inclusing datasource, database, table and columns. (asynchronously)
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     * @param getDataSourceItemsRequest Allows you to search for data source objects, inclusing datasource, database, table and columns. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceItemsAsync(GetDataSourceItemsRequest getDataSourceItemsRequest, final ApiCallback<GetDataSourceItemsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceItemsValidateBeforeCall(getDataSourceItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceItemsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSourceMappings
     * @param getDataSourceMappingsRequest Return back the @see(DatasourceUserMapping)s in the system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceMappingsCall(GetDataSourceMappingsRequest getDataSourceMappingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataSourceMappingsRequest;

        // create path and map variables
        String localVarPath = "/GetDataSourceMappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceMappingsValidateBeforeCall(GetDataSourceMappingsRequest getDataSourceMappingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDataSourceMappingsRequest' is set
        if (getDataSourceMappingsRequest == null) {
            throw new ApiException("Missing the required parameter 'getDataSourceMappingsRequest' when calling getDataSourceMappings(Async)");
        }

        return getDataSourceMappingsCall(getDataSourceMappingsRequest, _callback);

    }

    /**
     * Return back the @see(DatasourceUserMapping)s in the system
     * Return back the @see(DatasourceUserMapping)s in the system
     * @param getDataSourceMappingsRequest Return back the @see(DatasourceUserMapping)s in the system (required)
     * @return GetDataSourceMappingsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceMappingsDefaultResponse getDataSourceMappings(GetDataSourceMappingsRequest getDataSourceMappingsRequest) throws ApiException {
        ApiResponse<GetDataSourceMappingsDefaultResponse> localVarResp = getDataSourceMappingsWithHttpInfo(getDataSourceMappingsRequest);
        return localVarResp.getData();
    }

    /**
     * Return back the @see(DatasourceUserMapping)s in the system
     * Return back the @see(DatasourceUserMapping)s in the system
     * @param getDataSourceMappingsRequest Return back the @see(DatasourceUserMapping)s in the system (required)
     * @return ApiResponse&lt;GetDataSourceMappingsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceMappingsDefaultResponse> getDataSourceMappingsWithHttpInfo(GetDataSourceMappingsRequest getDataSourceMappingsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceMappingsValidateBeforeCall(getDataSourceMappingsRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceMappingsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return back the @see(DatasourceUserMapping)s in the system (asynchronously)
     * Return back the @see(DatasourceUserMapping)s in the system
     * @param getDataSourceMappingsRequest Return back the @see(DatasourceUserMapping)s in the system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceMappingsAsync(GetDataSourceMappingsRequest getDataSourceMappingsRequest, final ApiCallback<GetDataSourceMappingsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceMappingsValidateBeforeCall(getDataSourceMappingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceMappingsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSourceTypes
     * @param getClientSetsRequest Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceTypesCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSetsRequest;

        // create path and map variables
        String localVarPath = "/GetDataSourceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceTypesValidateBeforeCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSetsRequest' is set
        if (getClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSetsRequest' when calling getDataSourceTypes(Async)");
        }

        return getDataSourceTypesCall(getClientSetsRequest, _callback);

    }

    /**
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @param getClientSetsRequest Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. (required)
     * @return GetDataSourceTypesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceTypesDefaultResponse getDataSourceTypes(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        ApiResponse<GetDataSourceTypesDefaultResponse> localVarResp = getDataSourceTypesWithHttpInfo(getClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @param getClientSetsRequest Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. (required)
     * @return ApiResponse&lt;GetDataSourceTypesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceTypesDefaultResponse> getDataSourceTypesWithHttpInfo(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceTypesValidateBeforeCall(getClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceTypesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. (asynchronously)
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     * @param getClientSetsRequest Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceTypesAsync(GetClientSetsRequest getClientSetsRequest, final ApiCallback<GetDataSourceTypesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceTypesValidateBeforeCall(getClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceTypesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSourceUsers
     * @param getDataSourceUsersRequest Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceUsersCall(GetDataSourceUsersRequest getDataSourceUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataSourceUsersRequest;

        // create path and map variables
        String localVarPath = "/GetDataSourceUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceUsersValidateBeforeCall(GetDataSourceUsersRequest getDataSourceUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDataSourceUsersRequest' is set
        if (getDataSourceUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'getDataSourceUsersRequest' when calling getDataSourceUsers(Async)");
        }

        return getDataSourceUsersCall(getDataSourceUsersRequest, _callback);

    }

    /**
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @param getDataSourceUsersRequest Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). (required)
     * @return GetDataSourceUsersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceUsersDefaultResponse getDataSourceUsers(GetDataSourceUsersRequest getDataSourceUsersRequest) throws ApiException {
        ApiResponse<GetDataSourceUsersDefaultResponse> localVarResp = getDataSourceUsersWithHttpInfo(getDataSourceUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @param getDataSourceUsersRequest Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). (required)
     * @return ApiResponse&lt;GetDataSourceUsersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceUsersDefaultResponse> getDataSourceUsersWithHttpInfo(GetDataSourceUsersRequest getDataSourceUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceUsersValidateBeforeCall(getDataSourceUsersRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceUsersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). (asynchronously)
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     * @param getDataSourceUsersRequest Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourceUsersAsync(GetDataSourceUsersRequest getDataSourceUsersRequest, final ApiCallback<GetDataSourceUsersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceUsersValidateBeforeCall(getDataSourceUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceUsersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSources
     * @param getDataSourcesRequest Returns back a list of @see(ALDataSource)s from the system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourcesCall(GetDataSourcesRequest getDataSourcesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDataSourcesRequest;

        // create path and map variables
        String localVarPath = "/GetDataSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourcesValidateBeforeCall(GetDataSourcesRequest getDataSourcesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDataSourcesRequest' is set
        if (getDataSourcesRequest == null) {
            throw new ApiException("Missing the required parameter 'getDataSourcesRequest' when calling getDataSources(Async)");
        }

        return getDataSourcesCall(getDataSourcesRequest, _callback);

    }

    /**
     * Returns back a list of @see(ALDataSource)s from the system
     * Returns back a list of @see(ALDataSource)s from the system
     * @param getDataSourcesRequest Returns back a list of @see(ALDataSource)s from the system (required)
     * @return GetDataSourcesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourcesDefaultResponse getDataSources(GetDataSourcesRequest getDataSourcesRequest) throws ApiException {
        ApiResponse<GetDataSourcesDefaultResponse> localVarResp = getDataSourcesWithHttpInfo(getDataSourcesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back a list of @see(ALDataSource)s from the system
     * Returns back a list of @see(ALDataSource)s from the system
     * @param getDataSourcesRequest Returns back a list of @see(ALDataSource)s from the system (required)
     * @return ApiResponse&lt;GetDataSourcesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourcesDefaultResponse> getDataSourcesWithHttpInfo(GetDataSourcesRequest getDataSourcesRequest) throws ApiException {
        okhttp3.Call localVarCall = getDataSourcesValidateBeforeCall(getDataSourcesRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourcesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back a list of @see(ALDataSource)s from the system (asynchronously)
     * Returns back a list of @see(ALDataSource)s from the system
     * @param getDataSourcesRequest Returns back a list of @see(ALDataSource)s from the system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSourcesAsync(GetDataSourcesRequest getDataSourcesRequest, final ApiCallback<GetDataSourcesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourcesValidateBeforeCall(getDataSourcesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourcesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasource
     * @param getDatasourceRequest Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceCall(GetDatasourceRequest getDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDatasourceRequest;

        // create path and map variables
        String localVarPath = "/GetDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasourceValidateBeforeCall(GetDatasourceRequest getDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDatasourceRequest' is set
        if (getDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'getDatasourceRequest' when calling getDatasource(Async)");
        }

        return getDatasourceCall(getDatasourceRequest, _callback);

    }

    /**
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @param getDatasourceRequest Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. (required)
     * @return GetDatasourceDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDatasourceDefaultResponse getDatasource(GetDatasourceRequest getDatasourceRequest) throws ApiException {
        ApiResponse<GetDatasourceDefaultResponse> localVarResp = getDatasourceWithHttpInfo(getDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @param getDatasourceRequest Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. (required)
     * @return ApiResponse&lt;GetDatasourceDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDatasourceDefaultResponse> getDatasourceWithHttpInfo(GetDatasourceRequest getDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = getDatasourceValidateBeforeCall(getDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<GetDatasourceDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. (asynchronously)
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     * @param getDatasourceRequest Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceAsync(GetDatasourceRequest getDatasourceRequest, final ApiCallback<GetDatasourceDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasourceValidateBeforeCall(getDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDatasourceDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasourceColumn
     * @param getDatasourceColumnRequest Fetch the details of one column from the system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceColumnCall(GetDatasourceColumnRequest getDatasourceColumnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDatasourceColumnRequest;

        // create path and map variables
        String localVarPath = "/GetDatasourceColumn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasourceColumnValidateBeforeCall(GetDatasourceColumnRequest getDatasourceColumnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDatasourceColumnRequest' is set
        if (getDatasourceColumnRequest == null) {
            throw new ApiException("Missing the required parameter 'getDatasourceColumnRequest' when calling getDatasourceColumn(Async)");
        }

        return getDatasourceColumnCall(getDatasourceColumnRequest, _callback);

    }

    /**
     * Fetch the details of one column from the system.
     * Fetch the details of one column from the system.
     * @param getDatasourceColumnRequest Fetch the details of one column from the system. (required)
     * @return GetDatasourceColumnDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDatasourceColumnDefaultResponse getDatasourceColumn(GetDatasourceColumnRequest getDatasourceColumnRequest) throws ApiException {
        ApiResponse<GetDatasourceColumnDefaultResponse> localVarResp = getDatasourceColumnWithHttpInfo(getDatasourceColumnRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the details of one column from the system.
     * Fetch the details of one column from the system.
     * @param getDatasourceColumnRequest Fetch the details of one column from the system. (required)
     * @return ApiResponse&lt;GetDatasourceColumnDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDatasourceColumnDefaultResponse> getDatasourceColumnWithHttpInfo(GetDatasourceColumnRequest getDatasourceColumnRequest) throws ApiException {
        okhttp3.Call localVarCall = getDatasourceColumnValidateBeforeCall(getDatasourceColumnRequest, null);
        Type localVarReturnType = new TypeToken<GetDatasourceColumnDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the details of one column from the system. (asynchronously)
     * Fetch the details of one column from the system.
     * @param getDatasourceColumnRequest Fetch the details of one column from the system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceColumnAsync(GetDatasourceColumnRequest getDatasourceColumnRequest, final ApiCallback<GetDatasourceColumnDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasourceColumnValidateBeforeCall(getDatasourceColumnRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDatasourceColumnDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasourceColumns
     * @param getDatasourceColumnsRequest Fetch a list of columns from the system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceColumnsCall(GetDatasourceColumnsRequest getDatasourceColumnsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDatasourceColumnsRequest;

        // create path and map variables
        String localVarPath = "/GetDatasourceColumns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasourceColumnsValidateBeforeCall(GetDatasourceColumnsRequest getDatasourceColumnsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDatasourceColumnsRequest' is set
        if (getDatasourceColumnsRequest == null) {
            throw new ApiException("Missing the required parameter 'getDatasourceColumnsRequest' when calling getDatasourceColumns(Async)");
        }

        return getDatasourceColumnsCall(getDatasourceColumnsRequest, _callback);

    }

    /**
     * Fetch a list of columns from the system.
     * Fetch a list of columns from the system.
     * @param getDatasourceColumnsRequest Fetch a list of columns from the system. (required)
     * @return GetDatasourceColumnsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDatasourceColumnsDefaultResponse getDatasourceColumns(GetDatasourceColumnsRequest getDatasourceColumnsRequest) throws ApiException {
        ApiResponse<GetDatasourceColumnsDefaultResponse> localVarResp = getDatasourceColumnsWithHttpInfo(getDatasourceColumnsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of columns from the system.
     * Fetch a list of columns from the system.
     * @param getDatasourceColumnsRequest Fetch a list of columns from the system. (required)
     * @return ApiResponse&lt;GetDatasourceColumnsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDatasourceColumnsDefaultResponse> getDatasourceColumnsWithHttpInfo(GetDatasourceColumnsRequest getDatasourceColumnsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDatasourceColumnsValidateBeforeCall(getDatasourceColumnsRequest, null);
        Type localVarReturnType = new TypeToken<GetDatasourceColumnsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of columns from the system. (asynchronously)
     * Fetch a list of columns from the system.
     * @param getDatasourceColumnsRequest Fetch a list of columns from the system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceColumnsAsync(GetDatasourceColumnsRequest getDatasourceColumnsRequest, final ApiCallback<GetDatasourceColumnsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasourceColumnsValidateBeforeCall(getDatasourceColumnsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDatasourceColumnsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasourceDatabases
     * @param getDatasourceDatabasesRequest Fetch a list of databases from the system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceDatabasesCall(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDatasourceDatabasesRequest;

        // create path and map variables
        String localVarPath = "/GetDatasourceDatabases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasourceDatabasesValidateBeforeCall(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDatasourceDatabasesRequest' is set
        if (getDatasourceDatabasesRequest == null) {
            throw new ApiException("Missing the required parameter 'getDatasourceDatabasesRequest' when calling getDatasourceDatabases(Async)");
        }

        return getDatasourceDatabasesCall(getDatasourceDatabasesRequest, _callback);

    }

    /**
     * Fetch a list of databases from the system.
     * Fetch a list of databases from the system.
     * @param getDatasourceDatabasesRequest Fetch a list of databases from the system. (required)
     * @return GetDatasourceDatabasesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDatasourceDatabasesDefaultResponse getDatasourceDatabases(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest) throws ApiException {
        ApiResponse<GetDatasourceDatabasesDefaultResponse> localVarResp = getDatasourceDatabasesWithHttpInfo(getDatasourceDatabasesRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of databases from the system.
     * Fetch a list of databases from the system.
     * @param getDatasourceDatabasesRequest Fetch a list of databases from the system. (required)
     * @return ApiResponse&lt;GetDatasourceDatabasesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDatasourceDatabasesDefaultResponse> getDatasourceDatabasesWithHttpInfo(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest) throws ApiException {
        okhttp3.Call localVarCall = getDatasourceDatabasesValidateBeforeCall(getDatasourceDatabasesRequest, null);
        Type localVarReturnType = new TypeToken<GetDatasourceDatabasesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of databases from the system. (asynchronously)
     * Fetch a list of databases from the system.
     * @param getDatasourceDatabasesRequest Fetch a list of databases from the system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceDatabasesAsync(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, final ApiCallback<GetDatasourceDatabasesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasourceDatabasesValidateBeforeCall(getDatasourceDatabasesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDatasourceDatabasesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasourceFieldTypes
     * @param getClientSetsRequest Fetch a list of the available types of field that are supported (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceFieldTypesCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSetsRequest;

        // create path and map variables
        String localVarPath = "/GetDatasourceFieldTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasourceFieldTypesValidateBeforeCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSetsRequest' is set
        if (getClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSetsRequest' when calling getDatasourceFieldTypes(Async)");
        }

        return getDatasourceFieldTypesCall(getClientSetsRequest, _callback);

    }

    /**
     * Fetch a list of the available types of field that are supported
     * Fetch a list of the available types of field that are supported
     * @param getClientSetsRequest Fetch a list of the available types of field that are supported (required)
     * @return GetDatasourceFieldTypesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDatasourceFieldTypesDefaultResponse getDatasourceFieldTypes(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        ApiResponse<GetDatasourceFieldTypesDefaultResponse> localVarResp = getDatasourceFieldTypesWithHttpInfo(getClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of the available types of field that are supported
     * Fetch a list of the available types of field that are supported
     * @param getClientSetsRequest Fetch a list of the available types of field that are supported (required)
     * @return ApiResponse&lt;GetDatasourceFieldTypesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDatasourceFieldTypesDefaultResponse> getDatasourceFieldTypesWithHttpInfo(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = getDatasourceFieldTypesValidateBeforeCall(getClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<GetDatasourceFieldTypesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of the available types of field that are supported (asynchronously)
     * Fetch a list of the available types of field that are supported
     * @param getClientSetsRequest Fetch a list of the available types of field that are supported (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceFieldTypesAsync(GetClientSetsRequest getClientSetsRequest, final ApiCallback<GetDatasourceFieldTypesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasourceFieldTypesValidateBeforeCall(getClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDatasourceFieldTypesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasourceTables
     * @param getDatasourceTablesRequest Fetch a list of tables from the system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceTablesCall(GetDatasourceTablesRequest getDatasourceTablesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDatasourceTablesRequest;

        // create path and map variables
        String localVarPath = "/GetDatasourceTables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasourceTablesValidateBeforeCall(GetDatasourceTablesRequest getDatasourceTablesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDatasourceTablesRequest' is set
        if (getDatasourceTablesRequest == null) {
            throw new ApiException("Missing the required parameter 'getDatasourceTablesRequest' when calling getDatasourceTables(Async)");
        }

        return getDatasourceTablesCall(getDatasourceTablesRequest, _callback);

    }

    /**
     * Fetch a list of tables from the system.
     * Fetch a list of tables from the system.
     * @param getDatasourceTablesRequest Fetch a list of tables from the system. (required)
     * @return GetDatasourceTablesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDatasourceTablesDefaultResponse getDatasourceTables(GetDatasourceTablesRequest getDatasourceTablesRequest) throws ApiException {
        ApiResponse<GetDatasourceTablesDefaultResponse> localVarResp = getDatasourceTablesWithHttpInfo(getDatasourceTablesRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of tables from the system.
     * Fetch a list of tables from the system.
     * @param getDatasourceTablesRequest Fetch a list of tables from the system. (required)
     * @return ApiResponse&lt;GetDatasourceTablesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDatasourceTablesDefaultResponse> getDatasourceTablesWithHttpInfo(GetDatasourceTablesRequest getDatasourceTablesRequest) throws ApiException {
        okhttp3.Call localVarCall = getDatasourceTablesValidateBeforeCall(getDatasourceTablesRequest, null);
        Type localVarReturnType = new TypeToken<GetDatasourceTablesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of tables from the system. (asynchronously)
     * Fetch a list of tables from the system.
     * @param getDatasourceTablesRequest Fetch a list of tables from the system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasourceTablesAsync(GetDatasourceTablesRequest getDatasourceTablesRequest, final ApiCallback<GetDatasourceTablesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasourceTablesValidateBeforeCall(getDatasourceTablesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDatasourceTablesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDecodeList
     * @param getDecodeListRequest Get a specified decode list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDecodeListCall(GetDecodeListRequest getDecodeListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDecodeListRequest;

        // create path and map variables
        String localVarPath = "/GetDecodeList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecodeListValidateBeforeCall(GetDecodeListRequest getDecodeListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDecodeListRequest' is set
        if (getDecodeListRequest == null) {
            throw new ApiException("Missing the required parameter 'getDecodeListRequest' when calling getDecodeList(Async)");
        }

        return getDecodeListCall(getDecodeListRequest, _callback);

    }

    /**
     * Get a specified decode list
     * Get a specified decode list
     * @param getDecodeListRequest Get a specified decode list (required)
     * @return GetDecodeListDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDecodeListDefaultResponse getDecodeList(GetDecodeListRequest getDecodeListRequest) throws ApiException {
        ApiResponse<GetDecodeListDefaultResponse> localVarResp = getDecodeListWithHttpInfo(getDecodeListRequest);
        return localVarResp.getData();
    }

    /**
     * Get a specified decode list
     * Get a specified decode list
     * @param getDecodeListRequest Get a specified decode list (required)
     * @return ApiResponse&lt;GetDecodeListDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDecodeListDefaultResponse> getDecodeListWithHttpInfo(GetDecodeListRequest getDecodeListRequest) throws ApiException {
        okhttp3.Call localVarCall = getDecodeListValidateBeforeCall(getDecodeListRequest, null);
        Type localVarReturnType = new TypeToken<GetDecodeListDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specified decode list (asynchronously)
     * Get a specified decode list
     * @param getDecodeListRequest Get a specified decode list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDecodeListAsync(GetDecodeListRequest getDecodeListRequest, final ApiCallback<GetDecodeListDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecodeListValidateBeforeCall(getDecodeListRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDecodeListDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldTransformList
     * @param getFieldTransformListRequest Get a list of field transforms for use in transforming discrete values (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldTransformListCall(GetFieldTransformListRequest getFieldTransformListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFieldTransformListRequest;

        // create path and map variables
        String localVarPath = "/GetFieldTransformList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldTransformListValidateBeforeCall(GetFieldTransformListRequest getFieldTransformListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFieldTransformListRequest' is set
        if (getFieldTransformListRequest == null) {
            throw new ApiException("Missing the required parameter 'getFieldTransformListRequest' when calling getFieldTransformList(Async)");
        }

        return getFieldTransformListCall(getFieldTransformListRequest, _callback);

    }

    /**
     * Get a list of field transforms for use in transforming discrete values
     * Get a list of field transforms for use in transforming discrete values
     * @param getFieldTransformListRequest Get a list of field transforms for use in transforming discrete values (required)
     * @return GetFieldTransformListDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldTransformListDefaultResponse getFieldTransformList(GetFieldTransformListRequest getFieldTransformListRequest) throws ApiException {
        ApiResponse<GetFieldTransformListDefaultResponse> localVarResp = getFieldTransformListWithHttpInfo(getFieldTransformListRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of field transforms for use in transforming discrete values
     * Get a list of field transforms for use in transforming discrete values
     * @param getFieldTransformListRequest Get a list of field transforms for use in transforming discrete values (required)
     * @return ApiResponse&lt;GetFieldTransformListDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldTransformListDefaultResponse> getFieldTransformListWithHttpInfo(GetFieldTransformListRequest getFieldTransformListRequest) throws ApiException {
        okhttp3.Call localVarCall = getFieldTransformListValidateBeforeCall(getFieldTransformListRequest, null);
        Type localVarReturnType = new TypeToken<GetFieldTransformListDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of field transforms for use in transforming discrete values (asynchronously)
     * Get a list of field transforms for use in transforming discrete values
     * @param getFieldTransformListRequest Get a list of field transforms for use in transforming discrete values (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldTransformListAsync(GetFieldTransformListRequest getFieldTransformListRequest, final ApiCallback<GetFieldTransformListDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldTransformListValidateBeforeCall(getFieldTransformListRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFieldTransformListDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldTransformLists
     * @param getClientSetsRequest Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldTransformListsCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSetsRequest;

        // create path and map variables
        String localVarPath = "/GetFieldTransformLists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldTransformListsValidateBeforeCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSetsRequest' is set
        if (getClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSetsRequest' when calling getFieldTransformLists(Async)");
        }

        return getFieldTransformListsCall(getClientSetsRequest, _callback);

    }

    /**
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @param getClientSetsRequest Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) (required)
     * @return GetFieldTransformListsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldTransformListsDefaultResponse getFieldTransformLists(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        ApiResponse<GetFieldTransformListsDefaultResponse> localVarResp = getFieldTransformListsWithHttpInfo(getClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @param getClientSetsRequest Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) (required)
     * @return ApiResponse&lt;GetFieldTransformListsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldTransformListsDefaultResponse> getFieldTransformListsWithHttpInfo(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = getFieldTransformListsValidateBeforeCall(getClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<GetFieldTransformListsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) (asynchronously)
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     * @param getClientSetsRequest Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldTransformListsAsync(GetClientSetsRequest getClientSetsRequest, final ApiCallback<GetFieldTransformListsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldTransformListsValidateBeforeCall(getClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFieldTransformListsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcessStatus
     * @param getProcessStatusRequest Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessStatusCall(GetProcessStatusRequest getProcessStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getProcessStatusRequest;

        // create path and map variables
        String localVarPath = "/GetProcessStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessStatusValidateBeforeCall(GetProcessStatusRequest getProcessStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getProcessStatusRequest' is set
        if (getProcessStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'getProcessStatusRequest' when calling getProcessStatus(Async)");
        }

        return getProcessStatusCall(getProcessStatusRequest, _callback);

    }

    /**
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @param getProcessStatusRequest Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. (required)
     * @return GetProcessStatusDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetProcessStatusDefaultResponse getProcessStatus(GetProcessStatusRequest getProcessStatusRequest) throws ApiException {
        ApiResponse<GetProcessStatusDefaultResponse> localVarResp = getProcessStatusWithHttpInfo(getProcessStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @param getProcessStatusRequest Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. (required)
     * @return ApiResponse&lt;GetProcessStatusDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProcessStatusDefaultResponse> getProcessStatusWithHttpInfo(GetProcessStatusRequest getProcessStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = getProcessStatusValidateBeforeCall(getProcessStatusRequest, null);
        Type localVarReturnType = new TypeToken<GetProcessStatusDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. (asynchronously)
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     * @param getProcessStatusRequest Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessStatusAsync(GetProcessStatusRequest getProcessStatusRequest, final ApiCallback<GetProcessStatusDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessStatusValidateBeforeCall(getProcessStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<GetProcessStatusDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransforms
     * @param getTransformsRequest Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransformsCall(GetTransformsRequest getTransformsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTransformsRequest;

        // create path and map variables
        String localVarPath = "/GetTransforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformsValidateBeforeCall(GetTransformsRequest getTransformsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getTransformsRequest' is set
        if (getTransformsRequest == null) {
            throw new ApiException("Missing the required parameter 'getTransformsRequest' when calling getTransforms(Async)");
        }

        return getTransformsCall(getTransformsRequest, _callback);

    }

    /**
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @param getTransformsRequest Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published (required)
     * @return GetFieldTransformListsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldTransformListsDefaultResponse getTransforms(GetTransformsRequest getTransformsRequest) throws ApiException {
        ApiResponse<GetFieldTransformListsDefaultResponse> localVarResp = getTransformsWithHttpInfo(getTransformsRequest);
        return localVarResp.getData();
    }

    /**
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @param getTransformsRequest Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published (required)
     * @return ApiResponse&lt;GetFieldTransformListsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldTransformListsDefaultResponse> getTransformsWithHttpInfo(GetTransformsRequest getTransformsRequest) throws ApiException {
        okhttp3.Call localVarCall = getTransformsValidateBeforeCall(getTransformsRequest, null);
        Type localVarReturnType = new TypeToken<GetFieldTransformListsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published (asynchronously)
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     * @param getTransformsRequest Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransformsAsync(GetTransformsRequest getTransformsRequest, final ApiCallback<GetFieldTransformListsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformsValidateBeforeCall(getTransformsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFieldTransformListsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markDatasourceAsPendingDisable
     * @param markDatasourceAsPendingDisableRequest Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markDatasourceAsPendingDisableCall(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = markDatasourceAsPendingDisableRequest;

        // create path and map variables
        String localVarPath = "/MarkDatasourceAsPendingDisable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markDatasourceAsPendingDisableValidateBeforeCall(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'markDatasourceAsPendingDisableRequest' is set
        if (markDatasourceAsPendingDisableRequest == null) {
            throw new ApiException("Missing the required parameter 'markDatasourceAsPendingDisableRequest' when calling markDatasourceAsPendingDisable(Async)");
        }

        return markDatasourceAsPendingDisableCall(markDatasourceAsPendingDisableRequest, _callback);

    }

    /**
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @param markDatasourceAsPendingDisableRequest Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse markDatasourceAsPendingDisable(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = markDatasourceAsPendingDisableWithHttpInfo(markDatasourceAsPendingDisableRequest);
        return localVarResp.getData();
    }

    /**
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @param markDatasourceAsPendingDisableRequest Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> markDatasourceAsPendingDisableWithHttpInfo(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest) throws ApiException {
        okhttp3.Call localVarCall = markDatasourceAsPendingDisableValidateBeforeCall(markDatasourceAsPendingDisableRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) (asynchronously)
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     * @param markDatasourceAsPendingDisableRequest Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markDatasourceAsPendingDisableAsync(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markDatasourceAsPendingDisableValidateBeforeCall(markDatasourceAsPendingDisableRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pauseDatasourceCampaigns
     * @param pauseDatasourceCampaignsRequest Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pauseDatasourceCampaignsCall(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pauseDatasourceCampaignsRequest;

        // create path and map variables
        String localVarPath = "/PauseDatasourceCampaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseDatasourceCampaignsValidateBeforeCall(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pauseDatasourceCampaignsRequest' is set
        if (pauseDatasourceCampaignsRequest == null) {
            throw new ApiException("Missing the required parameter 'pauseDatasourceCampaignsRequest' when calling pauseDatasourceCampaigns(Async)");
        }

        return pauseDatasourceCampaignsCall(pauseDatasourceCampaignsRequest, _callback);

    }

    /**
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @param pauseDatasourceCampaignsRequest Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse pauseDatasourceCampaigns(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = pauseDatasourceCampaignsWithHttpInfo(pauseDatasourceCampaignsRequest);
        return localVarResp.getData();
    }

    /**
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @param pauseDatasourceCampaignsRequest Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> pauseDatasourceCampaignsWithHttpInfo(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest) throws ApiException {
        okhttp3.Call localVarCall = pauseDatasourceCampaignsValidateBeforeCall(pauseDatasourceCampaignsRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) (asynchronously)
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     * @param pauseDatasourceCampaignsRequest Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pauseDatasourceCampaignsAsync(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseDatasourceCampaignsValidateBeforeCall(pauseDatasourceCampaignsRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshDatasource
     * @param refreshDatasourceRequest Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshDatasourceCall(RefreshDatasourceRequest refreshDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshDatasourceRequest;

        // create path and map variables
        String localVarPath = "/RefreshDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshDatasourceValidateBeforeCall(RefreshDatasourceRequest refreshDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'refreshDatasourceRequest' is set
        if (refreshDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'refreshDatasourceRequest' when calling refreshDatasource(Async)");
        }

        return refreshDatasourceCall(refreshDatasourceRequest, _callback);

    }

    /**
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @param refreshDatasourceRequest Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse refreshDatasource(RefreshDatasourceRequest refreshDatasourceRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = refreshDatasourceWithHttpInfo(refreshDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @param refreshDatasourceRequest Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> refreshDatasourceWithHttpInfo(RefreshDatasourceRequest refreshDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = refreshDatasourceValidateBeforeCall(refreshDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. (asynchronously)
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     * @param refreshDatasourceRequest Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshDatasourceAsync(RefreshDatasourceRequest refreshDatasourceRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshDatasourceValidateBeforeCall(refreshDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeDatasourceCampaigns
     * @param resumeDatasourceCampaignsRequest Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeDatasourceCampaignsCall(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resumeDatasourceCampaignsRequest;

        // create path and map variables
        String localVarPath = "/ResumeDatasourceCampaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeDatasourceCampaignsValidateBeforeCall(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resumeDatasourceCampaignsRequest' is set
        if (resumeDatasourceCampaignsRequest == null) {
            throw new ApiException("Missing the required parameter 'resumeDatasourceCampaignsRequest' when calling resumeDatasourceCampaigns(Async)");
        }

        return resumeDatasourceCampaignsCall(resumeDatasourceCampaignsRequest, _callback);

    }

    /**
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @param resumeDatasourceCampaignsRequest Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse resumeDatasourceCampaigns(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = resumeDatasourceCampaignsWithHttpInfo(resumeDatasourceCampaignsRequest);
        return localVarResp.getData();
    }

    /**
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @param resumeDatasourceCampaignsRequest Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> resumeDatasourceCampaignsWithHttpInfo(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest) throws ApiException {
        okhttp3.Call localVarCall = resumeDatasourceCampaignsValidateBeforeCall(resumeDatasourceCampaignsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. (asynchronously)
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     * @param resumeDatasourceCampaignsRequest Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeDatasourceCampaignsAsync(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeDatasourceCampaignsValidateBeforeCall(resumeDatasourceCampaignsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveDecodeList
     * @param saveDecodeListRequest Save a list of decodes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDecodeListCall(SaveDecodeListRequest saveDecodeListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveDecodeListRequest;

        // create path and map variables
        String localVarPath = "/SaveDecodeList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveDecodeListValidateBeforeCall(SaveDecodeListRequest saveDecodeListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'saveDecodeListRequest' is set
        if (saveDecodeListRequest == null) {
            throw new ApiException("Missing the required parameter 'saveDecodeListRequest' when calling saveDecodeList(Async)");
        }

        return saveDecodeListCall(saveDecodeListRequest, _callback);

    }

    /**
     * Save a list of decodes
     * Save a list of decodes
     * @param saveDecodeListRequest Save a list of decodes (required)
     * @return GetDecodeListDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDecodeListDefaultResponse saveDecodeList(SaveDecodeListRequest saveDecodeListRequest) throws ApiException {
        ApiResponse<GetDecodeListDefaultResponse> localVarResp = saveDecodeListWithHttpInfo(saveDecodeListRequest);
        return localVarResp.getData();
    }

    /**
     * Save a list of decodes
     * Save a list of decodes
     * @param saveDecodeListRequest Save a list of decodes (required)
     * @return ApiResponse&lt;GetDecodeListDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDecodeListDefaultResponse> saveDecodeListWithHttpInfo(SaveDecodeListRequest saveDecodeListRequest) throws ApiException {
        okhttp3.Call localVarCall = saveDecodeListValidateBeforeCall(saveDecodeListRequest, null);
        Type localVarReturnType = new TypeToken<GetDecodeListDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a list of decodes (asynchronously)
     * Save a list of decodes
     * @param saveDecodeListRequest Save a list of decodes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDecodeListAsync(SaveDecodeListRequest saveDecodeListRequest, final ApiCallback<GetDecodeListDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveDecodeListValidateBeforeCall(saveDecodeListRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDecodeListDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveFieldTransformList
     * @param saveFieldTransformListRequest Save a list of field transforms for use in transforming discrete values (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveFieldTransformListCall(SaveFieldTransformListRequest saveFieldTransformListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveFieldTransformListRequest;

        // create path and map variables
        String localVarPath = "/SaveFieldTransformList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveFieldTransformListValidateBeforeCall(SaveFieldTransformListRequest saveFieldTransformListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'saveFieldTransformListRequest' is set
        if (saveFieldTransformListRequest == null) {
            throw new ApiException("Missing the required parameter 'saveFieldTransformListRequest' when calling saveFieldTransformList(Async)");
        }

        return saveFieldTransformListCall(saveFieldTransformListRequest, _callback);

    }

    /**
     * Save a list of field transforms for use in transforming discrete values
     * Save a list of field transforms for use in transforming discrete values
     * @param saveFieldTransformListRequest Save a list of field transforms for use in transforming discrete values (required)
     * @return GetFieldTransformListDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldTransformListDefaultResponse saveFieldTransformList(SaveFieldTransformListRequest saveFieldTransformListRequest) throws ApiException {
        ApiResponse<GetFieldTransformListDefaultResponse> localVarResp = saveFieldTransformListWithHttpInfo(saveFieldTransformListRequest);
        return localVarResp.getData();
    }

    /**
     * Save a list of field transforms for use in transforming discrete values
     * Save a list of field transforms for use in transforming discrete values
     * @param saveFieldTransformListRequest Save a list of field transforms for use in transforming discrete values (required)
     * @return ApiResponse&lt;GetFieldTransformListDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldTransformListDefaultResponse> saveFieldTransformListWithHttpInfo(SaveFieldTransformListRequest saveFieldTransformListRequest) throws ApiException {
        okhttp3.Call localVarCall = saveFieldTransformListValidateBeforeCall(saveFieldTransformListRequest, null);
        Type localVarReturnType = new TypeToken<GetFieldTransformListDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a list of field transforms for use in transforming discrete values (asynchronously)
     * Save a list of field transforms for use in transforming discrete values
     * @param saveFieldTransformListRequest Save a list of field transforms for use in transforming discrete values (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveFieldTransformListAsync(SaveFieldTransformListRequest saveFieldTransformListRequest, final ApiCallback<GetFieldTransformListDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveFieldTransformListValidateBeforeCall(saveFieldTransformListRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFieldTransformListDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDataSourceMapping
     * @param createDataSourceMappingRequest Updates a @see(DatasourceUserMapping) to map it to another engine user name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDataSourceMappingCall(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataSourceMappingRequest;

        // create path and map variables
        String localVarPath = "/UpdateDataSourceMapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDataSourceMappingValidateBeforeCall(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDataSourceMappingRequest' is set
        if (createDataSourceMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'createDataSourceMappingRequest' when calling updateDataSourceMapping(Async)");
        }

        return updateDataSourceMappingCall(createDataSourceMappingRequest, _callback);

    }

    /**
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @param createDataSourceMappingRequest Updates a @see(DatasourceUserMapping) to map it to another engine user name. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse updateDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = updateDataSourceMappingWithHttpInfo(createDataSourceMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @param createDataSourceMappingRequest Updates a @see(DatasourceUserMapping) to map it to another engine user name. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> updateDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDataSourceMappingValidateBeforeCall(createDataSourceMappingRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name. (asynchronously)
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     * @param createDataSourceMappingRequest Updates a @see(DatasourceUserMapping) to map it to another engine user name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDataSourceMappingValidateBeforeCall(createDataSourceMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDatasource
     * @param updateDatasourceRequest Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasourceCall(UpdateDatasourceRequest updateDatasourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDatasourceRequest;

        // create path and map variables
        String localVarPath = "/UpdateDatasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasourceValidateBeforeCall(UpdateDatasourceRequest updateDatasourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateDatasourceRequest' is set
        if (updateDatasourceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDatasourceRequest' when calling updateDatasource(Async)");
        }

        return updateDatasourceCall(updateDatasourceRequest, _callback);

    }

    /**
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @param updateDatasourceRequest Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse updateDatasource(UpdateDatasourceRequest updateDatasourceRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = updateDatasourceWithHttpInfo(updateDatasourceRequest);
        return localVarResp.getData();
    }

    /**
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @param updateDatasourceRequest Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> updateDatasourceWithHttpInfo(UpdateDatasourceRequest updateDatasourceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDatasourceValidateBeforeCall(updateDatasourceRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. (asynchronously)
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     * @param updateDatasourceRequest Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasourceAsync(UpdateDatasourceRequest updateDatasourceRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasourceValidateBeforeCall(updateDatasourceRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
