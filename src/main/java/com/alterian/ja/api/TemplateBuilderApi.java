/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.CreateWebSpoonDefaultResponse;
import com.alterian.ja.model.CreateWebSpoonRequest;
import com.alterian.ja.model.DeleteWebSpoonRequest;
import com.alterian.ja.model.GetDataSourceEngineUserNameDefaultResponse;
import com.alterian.ja.model.GetWebSpoonLoginUrlRequest;
import com.alterian.ja.model.ListWebSpoonDefaultResponse;
import com.alterian.ja.model.ListWebSpoonRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateBuilderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateBuilderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateBuilderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWebSpoon
     * @param createWebSpoonRequest Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebSpoonCall(CreateWebSpoonRequest createWebSpoonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebSpoonRequest;

        // create path and map variables
        String localVarPath = "/CreateWebSpoon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebSpoonValidateBeforeCall(CreateWebSpoonRequest createWebSpoonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWebSpoonRequest' is set
        if (createWebSpoonRequest == null) {
            throw new ApiException("Missing the required parameter 'createWebSpoonRequest' when calling createWebSpoon(Async)");
        }

        return createWebSpoonCall(createWebSpoonRequest, _callback);

    }

    /**
     * Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
     * Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
     * @param createWebSpoonRequest Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. (required)
     * @return CreateWebSpoonDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebSpoonDefaultResponse createWebSpoon(CreateWebSpoonRequest createWebSpoonRequest) throws ApiException {
        ApiResponse<CreateWebSpoonDefaultResponse> localVarResp = createWebSpoonWithHttpInfo(createWebSpoonRequest);
        return localVarResp.getData();
    }

    /**
     * Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
     * Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
     * @param createWebSpoonRequest Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. (required)
     * @return ApiResponse&lt;CreateWebSpoonDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateWebSpoonDefaultResponse> createWebSpoonWithHttpInfo(CreateWebSpoonRequest createWebSpoonRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebSpoonValidateBeforeCall(createWebSpoonRequest, null);
        Type localVarReturnType = new TypeToken<CreateWebSpoonDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. (asynchronously)
     * Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
     * @param createWebSpoonRequest Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebSpoonAsync(CreateWebSpoonRequest createWebSpoonRequest, final ApiCallback<CreateWebSpoonDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebSpoonValidateBeforeCall(createWebSpoonRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateWebSpoonDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebSpoon
     * @param deleteWebSpoonRequest Removes a Template Builder instance (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebSpoonCall(DeleteWebSpoonRequest deleteWebSpoonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteWebSpoonRequest;

        // create path and map variables
        String localVarPath = "/DeleteWebSpoon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebSpoonValidateBeforeCall(DeleteWebSpoonRequest deleteWebSpoonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteWebSpoonRequest' is set
        if (deleteWebSpoonRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteWebSpoonRequest' when calling deleteWebSpoon(Async)");
        }

        return deleteWebSpoonCall(deleteWebSpoonRequest, _callback);

    }

    /**
     * Removes a Template Builder instance
     * Removes a Template Builder instance
     * @param deleteWebSpoonRequest Removes a Template Builder instance (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteWebSpoon(DeleteWebSpoonRequest deleteWebSpoonRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteWebSpoonWithHttpInfo(deleteWebSpoonRequest);
        return localVarResp.getData();
    }

    /**
     * Removes a Template Builder instance
     * Removes a Template Builder instance
     * @param deleteWebSpoonRequest Removes a Template Builder instance (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteWebSpoonWithHttpInfo(DeleteWebSpoonRequest deleteWebSpoonRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteWebSpoonValidateBeforeCall(deleteWebSpoonRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a Template Builder instance (asynchronously)
     * Removes a Template Builder instance
     * @param deleteWebSpoonRequest Removes a Template Builder instance (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebSpoonAsync(DeleteWebSpoonRequest deleteWebSpoonRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebSpoonValidateBeforeCall(deleteWebSpoonRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebSpoonAvailable
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebSpoonAvailableCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetWebSpoonAvailable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebSpoonAvailableValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWebSpoonAvailableCall(_callback);

    }

    /**
     * Check to make sure Template Builder is available
     * Check to make sure Template Builder is available
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse getWebSpoonAvailable() throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = getWebSpoonAvailableWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Check to make sure Template Builder is available
     * Check to make sure Template Builder is available
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> getWebSpoonAvailableWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebSpoonAvailableValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check to make sure Template Builder is available (asynchronously)
     * Check to make sure Template Builder is available
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebSpoonAvailableAsync(final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebSpoonAvailableValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebSpoonLoginUrl
     * @param getWebSpoonLoginUrlRequest Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebSpoonLoginUrlCall(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getWebSpoonLoginUrlRequest;

        // create path and map variables
        String localVarPath = "/GetWebSpoonLoginUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebSpoonLoginUrlValidateBeforeCall(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getWebSpoonLoginUrlRequest' is set
        if (getWebSpoonLoginUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'getWebSpoonLoginUrlRequest' when calling getWebSpoonLoginUrl(Async)");
        }

        return getWebSpoonLoginUrlCall(getWebSpoonLoginUrlRequest, _callback);

    }

    /**
     * Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
     * Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
     * @param getWebSpoonLoginUrlRequest Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; (required)
     * @return GetDataSourceEngineUserNameDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceEngineUserNameDefaultResponse getWebSpoonLoginUrl(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest) throws ApiException {
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResp = getWebSpoonLoginUrlWithHttpInfo(getWebSpoonLoginUrlRequest);
        return localVarResp.getData();
    }

    /**
     * Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
     * Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
     * @param getWebSpoonLoginUrlRequest Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; (required)
     * @return ApiResponse&lt;GetDataSourceEngineUserNameDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceEngineUserNameDefaultResponse> getWebSpoonLoginUrlWithHttpInfo(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = getWebSpoonLoginUrlValidateBeforeCall(getWebSpoonLoginUrlRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; (asynchronously)
     * Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
     * @param getWebSpoonLoginUrlRequest Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebSpoonLoginUrlAsync(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, final ApiCallback<GetDataSourceEngineUserNameDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebSpoonLoginUrlValidateBeforeCall(getWebSpoonLoginUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebSpoon
     * @param listWebSpoonRequest Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebSpoonCall(ListWebSpoonRequest listWebSpoonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listWebSpoonRequest;

        // create path and map variables
        String localVarPath = "/ListWebSpoon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebSpoonValidateBeforeCall(ListWebSpoonRequest listWebSpoonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listWebSpoonRequest' is set
        if (listWebSpoonRequest == null) {
            throw new ApiException("Missing the required parameter 'listWebSpoonRequest' when calling listWebSpoon(Async)");
        }

        return listWebSpoonCall(listWebSpoonRequest, _callback);

    }

    /**
     * Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
     * Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
     * @param listWebSpoonRequest Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) (required)
     * @return ListWebSpoonDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListWebSpoonDefaultResponse listWebSpoon(ListWebSpoonRequest listWebSpoonRequest) throws ApiException {
        ApiResponse<ListWebSpoonDefaultResponse> localVarResp = listWebSpoonWithHttpInfo(listWebSpoonRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
     * Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
     * @param listWebSpoonRequest Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) (required)
     * @return ApiResponse&lt;ListWebSpoonDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWebSpoonDefaultResponse> listWebSpoonWithHttpInfo(ListWebSpoonRequest listWebSpoonRequest) throws ApiException {
        okhttp3.Call localVarCall = listWebSpoonValidateBeforeCall(listWebSpoonRequest, null);
        Type localVarReturnType = new TypeToken<ListWebSpoonDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) (asynchronously)
     * Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
     * @param listWebSpoonRequest Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebSpoonAsync(ListWebSpoonRequest listWebSpoonRequest, final ApiCallback<ListWebSpoonDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebSpoonValidateBeforeCall(listWebSpoonRequest, _callback);
        Type localVarReturnType = new TypeToken<ListWebSpoonDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
