/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AUTHCreateLoginDefaultResponse;
import com.alterian.ja.model.AddLoginImpersonationRequest;
import com.alterian.ja.model.AddUserToBrandsRequest;
import com.alterian.ja.model.GetBrandTokenRequest;
import com.alterian.ja.model.GetBrandsDefaultResponse;
import com.alterian.ja.model.GetBrandsRequest;
import com.alterian.ja.model.GetLoginBrandDefaultDefaultResponse;
import com.alterian.ja.model.GetLoginBrandDefaultRequest;
import com.alterian.ja.model.GetLoginUserMappingDefaultResponse;
import com.alterian.ja.model.GetLoginUserMappingRequest;
import com.alterian.ja.model.GetTokenDetailsDefaultResponse;
import com.alterian.ja.model.RemoveLoginBrandDefaultRequest;
import com.alterian.ja.model.RemoveLoginImpersonationRequest;
import com.alterian.ja.model.RemoveLoginUserMappingRequest;
import com.alterian.ja.model.SetLoginBrandDefaultRequest;
import com.alterian.ja.model.SetLoginUserMappingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addLoginImpersonation
     * @param addLoginImpersonationRequest Allow a login to use the impersonation feature of GetBrandToken (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLoginImpersonationCall(AddLoginImpersonationRequest addLoginImpersonationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLoginImpersonationRequest;

        // create path and map variables
        String localVarPath = "/AddLoginImpersonation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLoginImpersonationValidateBeforeCall(AddLoginImpersonationRequest addLoginImpersonationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addLoginImpersonationRequest' is set
        if (addLoginImpersonationRequest == null) {
            throw new ApiException("Missing the required parameter 'addLoginImpersonationRequest' when calling addLoginImpersonation(Async)");
        }

        return addLoginImpersonationCall(addLoginImpersonationRequest, _callback);

    }

    /**
     * Allow a login to use the impersonation feature of GetBrandToken
     * Allow a login to use the impersonation feature of GetBrandToken
     * @param addLoginImpersonationRequest Allow a login to use the impersonation feature of GetBrandToken (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse addLoginImpersonation(AddLoginImpersonationRequest addLoginImpersonationRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = addLoginImpersonationWithHttpInfo(addLoginImpersonationRequest);
        return localVarResp.getData();
    }

    /**
     * Allow a login to use the impersonation feature of GetBrandToken
     * Allow a login to use the impersonation feature of GetBrandToken
     * @param addLoginImpersonationRequest Allow a login to use the impersonation feature of GetBrandToken (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> addLoginImpersonationWithHttpInfo(AddLoginImpersonationRequest addLoginImpersonationRequest) throws ApiException {
        okhttp3.Call localVarCall = addLoginImpersonationValidateBeforeCall(addLoginImpersonationRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allow a login to use the impersonation feature of GetBrandToken (asynchronously)
     * Allow a login to use the impersonation feature of GetBrandToken
     * @param addLoginImpersonationRequest Allow a login to use the impersonation feature of GetBrandToken (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLoginImpersonationAsync(AddLoginImpersonationRequest addLoginImpersonationRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLoginImpersonationValidateBeforeCall(addLoginImpersonationRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUserToBrands
     * @param addUserToBrandsRequest Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToBrandsCall(AddUserToBrandsRequest addUserToBrandsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addUserToBrandsRequest;

        // create path and map variables
        String localVarPath = "/AddUserToBrands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToBrandsValidateBeforeCall(AddUserToBrandsRequest addUserToBrandsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addUserToBrandsRequest' is set
        if (addUserToBrandsRequest == null) {
            throw new ApiException("Missing the required parameter 'addUserToBrandsRequest' when calling addUserToBrands(Async)");
        }

        return addUserToBrandsCall(addUserToBrandsRequest, _callback);

    }

    /**
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @param addUserToBrandsRequest Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse addUserToBrands(AddUserToBrandsRequest addUserToBrandsRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = addUserToBrandsWithHttpInfo(addUserToBrandsRequest);
        return localVarResp.getData();
    }

    /**
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @param addUserToBrandsRequest Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> addUserToBrandsWithHttpInfo(AddUserToBrandsRequest addUserToBrandsRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserToBrandsValidateBeforeCall(addUserToBrandsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access (asynchronously)
     * Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
     * @param addUserToBrandsRequest Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addUserToBrandsAsync(AddUserToBrandsRequest addUserToBrandsRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToBrandsValidateBeforeCall(addUserToBrandsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrandToken
     * @param getBrandTokenRequest Returns back a token used to access the brand provided. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandTokenCall(GetBrandTokenRequest getBrandTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBrandTokenRequest;

        // create path and map variables
        String localVarPath = "/GetBrandToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandTokenValidateBeforeCall(GetBrandTokenRequest getBrandTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getBrandTokenRequest' is set
        if (getBrandTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'getBrandTokenRequest' when calling getBrandToken(Async)");
        }

        return getBrandTokenCall(getBrandTokenRequest, _callback);

    }

    /**
     * Returns back a token used to access the brand provided.
     * Returns back a token used to access the brand provided.
     * @param getBrandTokenRequest Returns back a token used to access the brand provided. (required)
     * @return AUTHCreateLoginDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHCreateLoginDefaultResponse getBrandToken(GetBrandTokenRequest getBrandTokenRequest) throws ApiException {
        ApiResponse<AUTHCreateLoginDefaultResponse> localVarResp = getBrandTokenWithHttpInfo(getBrandTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back a token used to access the brand provided.
     * Returns back a token used to access the brand provided.
     * @param getBrandTokenRequest Returns back a token used to access the brand provided. (required)
     * @return ApiResponse&lt;AUTHCreateLoginDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHCreateLoginDefaultResponse> getBrandTokenWithHttpInfo(GetBrandTokenRequest getBrandTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = getBrandTokenValidateBeforeCall(getBrandTokenRequest, null);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back a token used to access the brand provided. (asynchronously)
     * Returns back a token used to access the brand provided.
     * @param getBrandTokenRequest Returns back a token used to access the brand provided. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandTokenAsync(GetBrandTokenRequest getBrandTokenRequest, final ApiCallback<AUTHCreateLoginDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandTokenValidateBeforeCall(getBrandTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrands
     * @param getBrandsRequest Returns back a list of brands which this login can access (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandsCall(GetBrandsRequest getBrandsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBrandsRequest;

        // create path and map variables
        String localVarPath = "/GetBrands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandsValidateBeforeCall(GetBrandsRequest getBrandsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getBrandsRequest' is set
        if (getBrandsRequest == null) {
            throw new ApiException("Missing the required parameter 'getBrandsRequest' when calling getBrands(Async)");
        }

        return getBrandsCall(getBrandsRequest, _callback);

    }

    /**
     * Returns back a list of brands which this login can access
     * Returns back a list of brands which this login can access
     * @param getBrandsRequest Returns back a list of brands which this login can access (required)
     * @return GetBrandsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetBrandsDefaultResponse getBrands(GetBrandsRequest getBrandsRequest) throws ApiException {
        ApiResponse<GetBrandsDefaultResponse> localVarResp = getBrandsWithHttpInfo(getBrandsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back a list of brands which this login can access
     * Returns back a list of brands which this login can access
     * @param getBrandsRequest Returns back a list of brands which this login can access (required)
     * @return ApiResponse&lt;GetBrandsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBrandsDefaultResponse> getBrandsWithHttpInfo(GetBrandsRequest getBrandsRequest) throws ApiException {
        okhttp3.Call localVarCall = getBrandsValidateBeforeCall(getBrandsRequest, null);
        Type localVarReturnType = new TypeToken<GetBrandsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back a list of brands which this login can access (asynchronously)
     * Returns back a list of brands which this login can access
     * @param getBrandsRequest Returns back a list of brands which this login can access (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandsAsync(GetBrandsRequest getBrandsRequest, final ApiCallback<GetBrandsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandsValidateBeforeCall(getBrandsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetBrandsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoginBrandDefault
     * @param getLoginBrandDefaultRequest Returns back the brand default for the specified login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginBrandDefaultCall(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLoginBrandDefaultRequest;

        // create path and map variables
        String localVarPath = "/GetLoginBrandDefault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginBrandDefaultValidateBeforeCall(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getLoginBrandDefaultRequest' is set
        if (getLoginBrandDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'getLoginBrandDefaultRequest' when calling getLoginBrandDefault(Async)");
        }

        return getLoginBrandDefaultCall(getLoginBrandDefaultRequest, _callback);

    }

    /**
     * Returns back the brand default for the specified login
     * Returns back the brand default for the specified login
     * @param getLoginBrandDefaultRequest Returns back the brand default for the specified login (required)
     * @return GetLoginBrandDefaultDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLoginBrandDefaultDefaultResponse getLoginBrandDefault(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest) throws ApiException {
        ApiResponse<GetLoginBrandDefaultDefaultResponse> localVarResp = getLoginBrandDefaultWithHttpInfo(getLoginBrandDefaultRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back the brand default for the specified login
     * Returns back the brand default for the specified login
     * @param getLoginBrandDefaultRequest Returns back the brand default for the specified login (required)
     * @return ApiResponse&lt;GetLoginBrandDefaultDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLoginBrandDefaultDefaultResponse> getLoginBrandDefaultWithHttpInfo(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest) throws ApiException {
        okhttp3.Call localVarCall = getLoginBrandDefaultValidateBeforeCall(getLoginBrandDefaultRequest, null);
        Type localVarReturnType = new TypeToken<GetLoginBrandDefaultDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the brand default for the specified login (asynchronously)
     * Returns back the brand default for the specified login
     * @param getLoginBrandDefaultRequest Returns back the brand default for the specified login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginBrandDefaultAsync(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, final ApiCallback<GetLoginBrandDefaultDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoginBrandDefaultValidateBeforeCall(getLoginBrandDefaultRequest, _callback);
        Type localVarReturnType = new TypeToken<GetLoginBrandDefaultDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoginUserMapping
     * @param getLoginUserMappingRequest Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginUserMappingCall(GetLoginUserMappingRequest getLoginUserMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLoginUserMappingRequest;

        // create path and map variables
        String localVarPath = "/GetLoginUserMapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginUserMappingValidateBeforeCall(GetLoginUserMappingRequest getLoginUserMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getLoginUserMappingRequest' is set
        if (getLoginUserMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'getLoginUserMappingRequest' when calling getLoginUserMapping(Async)");
        }

        return getLoginUserMappingCall(getLoginUserMappingRequest, _callback);

    }

    /**
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
     * @param getLoginUserMappingRequest Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login (required)
     * @return GetLoginUserMappingDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLoginUserMappingDefaultResponse getLoginUserMapping(GetLoginUserMappingRequest getLoginUserMappingRequest) throws ApiException {
        ApiResponse<GetLoginUserMappingDefaultResponse> localVarResp = getLoginUserMappingWithHttpInfo(getLoginUserMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
     * @param getLoginUserMappingRequest Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login (required)
     * @return ApiResponse&lt;GetLoginUserMappingDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLoginUserMappingDefaultResponse> getLoginUserMappingWithHttpInfo(GetLoginUserMappingRequest getLoginUserMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = getLoginUserMappingValidateBeforeCall(getLoginUserMappingRequest, null);
        Type localVarReturnType = new TypeToken<GetLoginUserMappingDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login (asynchronously)
     * Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
     * @param getLoginUserMappingRequest Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginUserMappingAsync(GetLoginUserMappingRequest getLoginUserMappingRequest, final ApiCallback<GetLoginUserMappingDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoginUserMappingValidateBeforeCall(getLoginUserMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<GetLoginUserMappingDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenDetails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetTokenDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTokenDetailsCall(_callback);

    }

    /**
     * Request details about a token.
     * Request details about a token.
     * @return GetTokenDetailsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenDetailsDefaultResponse getTokenDetails() throws ApiException {
        ApiResponse<GetTokenDetailsDefaultResponse> localVarResp = getTokenDetailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Request details about a token.
     * Request details about a token.
     * @return ApiResponse&lt;GetTokenDetailsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenDetailsDefaultResponse> getTokenDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTokenDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetTokenDetailsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request details about a token. (asynchronously)
     * Request details about a token.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenDetailsAsync(final ApiCallback<GetTokenDetailsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetTokenDetailsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLoginBrandDefault
     * @param removeLoginBrandDefaultRequest Removes a login brand default (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLoginBrandDefaultCall(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeLoginBrandDefaultRequest;

        // create path and map variables
        String localVarPath = "/RemoveLoginBrandDefault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLoginBrandDefaultValidateBeforeCall(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'removeLoginBrandDefaultRequest' is set
        if (removeLoginBrandDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'removeLoginBrandDefaultRequest' when calling removeLoginBrandDefault(Async)");
        }

        return removeLoginBrandDefaultCall(removeLoginBrandDefaultRequest, _callback);

    }

    /**
     * Removes a login brand default
     * Removes a login brand default
     * @param removeLoginBrandDefaultRequest Removes a login brand default (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse removeLoginBrandDefault(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = removeLoginBrandDefaultWithHttpInfo(removeLoginBrandDefaultRequest);
        return localVarResp.getData();
    }

    /**
     * Removes a login brand default
     * Removes a login brand default
     * @param removeLoginBrandDefaultRequest Removes a login brand default (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> removeLoginBrandDefaultWithHttpInfo(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest) throws ApiException {
        okhttp3.Call localVarCall = removeLoginBrandDefaultValidateBeforeCall(removeLoginBrandDefaultRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a login brand default (asynchronously)
     * Removes a login brand default
     * @param removeLoginBrandDefaultRequest Removes a login brand default (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLoginBrandDefaultAsync(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLoginBrandDefaultValidateBeforeCall(removeLoginBrandDefaultRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLoginImpersonation
     * @param removeLoginImpersonationRequest Stop allowing a login from using the impersonation feature of GetBrandToken (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLoginImpersonationCall(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeLoginImpersonationRequest;

        // create path and map variables
        String localVarPath = "/RemoveLoginImpersonation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLoginImpersonationValidateBeforeCall(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'removeLoginImpersonationRequest' is set
        if (removeLoginImpersonationRequest == null) {
            throw new ApiException("Missing the required parameter 'removeLoginImpersonationRequest' when calling removeLoginImpersonation(Async)");
        }

        return removeLoginImpersonationCall(removeLoginImpersonationRequest, _callback);

    }

    /**
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * @param removeLoginImpersonationRequest Stop allowing a login from using the impersonation feature of GetBrandToken (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse removeLoginImpersonation(RemoveLoginImpersonationRequest removeLoginImpersonationRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = removeLoginImpersonationWithHttpInfo(removeLoginImpersonationRequest);
        return localVarResp.getData();
    }

    /**
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * @param removeLoginImpersonationRequest Stop allowing a login from using the impersonation feature of GetBrandToken (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> removeLoginImpersonationWithHttpInfo(RemoveLoginImpersonationRequest removeLoginImpersonationRequest) throws ApiException {
        okhttp3.Call localVarCall = removeLoginImpersonationValidateBeforeCall(removeLoginImpersonationRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop allowing a login from using the impersonation feature of GetBrandToken (asynchronously)
     * Stop allowing a login from using the impersonation feature of GetBrandToken
     * @param removeLoginImpersonationRequest Stop allowing a login from using the impersonation feature of GetBrandToken (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLoginImpersonationAsync(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLoginImpersonationValidateBeforeCall(removeLoginImpersonationRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLoginUserMapping
     * @param removeLoginUserMappingRequest Remove a login\\user mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLoginUserMappingCall(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeLoginUserMappingRequest;

        // create path and map variables
        String localVarPath = "/RemoveLoginUserMapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLoginUserMappingValidateBeforeCall(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'removeLoginUserMappingRequest' is set
        if (removeLoginUserMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'removeLoginUserMappingRequest' when calling removeLoginUserMapping(Async)");
        }

        return removeLoginUserMappingCall(removeLoginUserMappingRequest, _callback);

    }

    /**
     * Remove a login\\user mapping
     * Remove a login\\user mapping
     * @param removeLoginUserMappingRequest Remove a login\\user mapping (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse removeLoginUserMapping(RemoveLoginUserMappingRequest removeLoginUserMappingRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = removeLoginUserMappingWithHttpInfo(removeLoginUserMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a login\\user mapping
     * Remove a login\\user mapping
     * @param removeLoginUserMappingRequest Remove a login\\user mapping (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> removeLoginUserMappingWithHttpInfo(RemoveLoginUserMappingRequest removeLoginUserMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = removeLoginUserMappingValidateBeforeCall(removeLoginUserMappingRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a login\\user mapping (asynchronously)
     * Remove a login\\user mapping
     * @param removeLoginUserMappingRequest Remove a login\\user mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLoginUserMappingAsync(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLoginUserMappingValidateBeforeCall(removeLoginUserMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLoginBrandDefault
     * @param setLoginBrandDefaultRequest Sets a login&#39;s brand to the default brand specified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLoginBrandDefaultCall(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLoginBrandDefaultRequest;

        // create path and map variables
        String localVarPath = "/SetLoginBrandDefault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLoginBrandDefaultValidateBeforeCall(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setLoginBrandDefaultRequest' is set
        if (setLoginBrandDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'setLoginBrandDefaultRequest' when calling setLoginBrandDefault(Async)");
        }

        return setLoginBrandDefaultCall(setLoginBrandDefaultRequest, _callback);

    }

    /**
     * Sets a login&#39;s brand to the default brand specified
     * Sets a login&#39;s brand to the default brand specified
     * @param setLoginBrandDefaultRequest Sets a login&#39;s brand to the default brand specified (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse setLoginBrandDefault(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = setLoginBrandDefaultWithHttpInfo(setLoginBrandDefaultRequest);
        return localVarResp.getData();
    }

    /**
     * Sets a login&#39;s brand to the default brand specified
     * Sets a login&#39;s brand to the default brand specified
     * @param setLoginBrandDefaultRequest Sets a login&#39;s brand to the default brand specified (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> setLoginBrandDefaultWithHttpInfo(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest) throws ApiException {
        okhttp3.Call localVarCall = setLoginBrandDefaultValidateBeforeCall(setLoginBrandDefaultRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets a login&#39;s brand to the default brand specified (asynchronously)
     * Sets a login&#39;s brand to the default brand specified
     * @param setLoginBrandDefaultRequest Sets a login&#39;s brand to the default brand specified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLoginBrandDefaultAsync(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLoginBrandDefaultValidateBeforeCall(setLoginBrandDefaultRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLoginUserMapping
     * @param setLoginUserMappingRequest Sets the login\\user mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLoginUserMappingCall(SetLoginUserMappingRequest setLoginUserMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLoginUserMappingRequest;

        // create path and map variables
        String localVarPath = "/SetLoginUserMapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLoginUserMappingValidateBeforeCall(SetLoginUserMappingRequest setLoginUserMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setLoginUserMappingRequest' is set
        if (setLoginUserMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'setLoginUserMappingRequest' when calling setLoginUserMapping(Async)");
        }

        return setLoginUserMappingCall(setLoginUserMappingRequest, _callback);

    }

    /**
     * Sets the login\\user mapping
     * Sets the login\\user mapping
     * @param setLoginUserMappingRequest Sets the login\\user mapping (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse setLoginUserMapping(SetLoginUserMappingRequest setLoginUserMappingRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = setLoginUserMappingWithHttpInfo(setLoginUserMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Sets the login\\user mapping
     * Sets the login\\user mapping
     * @param setLoginUserMappingRequest Sets the login\\user mapping (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> setLoginUserMappingWithHttpInfo(SetLoginUserMappingRequest setLoginUserMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = setLoginUserMappingValidateBeforeCall(setLoginUserMappingRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the login\\user mapping (asynchronously)
     * Sets the login\\user mapping
     * @param setLoginUserMappingRequest Sets the login\\user mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLoginUserMappingAsync(SetLoginUserMappingRequest setLoginUserMappingRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLoginUserMappingValidateBeforeCall(setLoginUserMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
