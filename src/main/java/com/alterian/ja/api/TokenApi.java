/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AUTHCreateLoginDefaultResponse;
import com.alterian.ja.model.CreateImpersonationTokenRequest;
import com.alterian.ja.model.CreateStaticTokenRequest;
import com.alterian.ja.model.DeleteStaticTokenRequest;
import com.alterian.ja.model.GetTokensDefaultResponse;
import com.alterian.ja.model.GetTokensRequest;
import com.alterian.ja.model.UpdateStaticTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createImpersonationToken
     * @param createImpersonationTokenRequest Using an SA token, create an impersonation token for the specific client and, optionally, user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImpersonationTokenCall(CreateImpersonationTokenRequest createImpersonationTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createImpersonationTokenRequest;

        // create path and map variables
        String localVarPath = "/CreateImpersonationToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImpersonationTokenValidateBeforeCall(CreateImpersonationTokenRequest createImpersonationTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createImpersonationTokenRequest' is set
        if (createImpersonationTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'createImpersonationTokenRequest' when calling createImpersonationToken(Async)");
        }

        return createImpersonationTokenCall(createImpersonationTokenRequest, _callback);

    }

    /**
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @param createImpersonationTokenRequest Using an SA token, create an impersonation token for the specific client and, optionally, user (required)
     * @return AUTHCreateLoginDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHCreateLoginDefaultResponse createImpersonationToken(CreateImpersonationTokenRequest createImpersonationTokenRequest) throws ApiException {
        ApiResponse<AUTHCreateLoginDefaultResponse> localVarResp = createImpersonationTokenWithHttpInfo(createImpersonationTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @param createImpersonationTokenRequest Using an SA token, create an impersonation token for the specific client and, optionally, user (required)
     * @return ApiResponse&lt;AUTHCreateLoginDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHCreateLoginDefaultResponse> createImpersonationTokenWithHttpInfo(CreateImpersonationTokenRequest createImpersonationTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createImpersonationTokenValidateBeforeCall(createImpersonationTokenRequest, null);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Using an SA token, create an impersonation token for the specific client and, optionally, user (asynchronously)
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     * @param createImpersonationTokenRequest Using an SA token, create an impersonation token for the specific client and, optionally, user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImpersonationTokenAsync(CreateImpersonationTokenRequest createImpersonationTokenRequest, final ApiCallback<AUTHCreateLoginDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImpersonationTokenValidateBeforeCall(createImpersonationTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStaticToken
     * @param createStaticTokenRequest Create a static token for API usage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStaticTokenCall(CreateStaticTokenRequest createStaticTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStaticTokenRequest;

        // create path and map variables
        String localVarPath = "/CreateStaticToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStaticTokenValidateBeforeCall(CreateStaticTokenRequest createStaticTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createStaticTokenRequest' is set
        if (createStaticTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'createStaticTokenRequest' when calling createStaticToken(Async)");
        }

        return createStaticTokenCall(createStaticTokenRequest, _callback);

    }

    /**
     * Create a static token for API usage
     * Create a static token for API usage
     * @param createStaticTokenRequest Create a static token for API usage (required)
     * @return AUTHCreateLoginDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHCreateLoginDefaultResponse createStaticToken(CreateStaticTokenRequest createStaticTokenRequest) throws ApiException {
        ApiResponse<AUTHCreateLoginDefaultResponse> localVarResp = createStaticTokenWithHttpInfo(createStaticTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Create a static token for API usage
     * Create a static token for API usage
     * @param createStaticTokenRequest Create a static token for API usage (required)
     * @return ApiResponse&lt;AUTHCreateLoginDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHCreateLoginDefaultResponse> createStaticTokenWithHttpInfo(CreateStaticTokenRequest createStaticTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createStaticTokenValidateBeforeCall(createStaticTokenRequest, null);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a static token for API usage (asynchronously)
     * Create a static token for API usage
     * @param createStaticTokenRequest Create a static token for API usage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStaticTokenAsync(CreateStaticTokenRequest createStaticTokenRequest, final ApiCallback<AUTHCreateLoginDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStaticTokenValidateBeforeCall(createStaticTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStaticToken
     * @param deleteStaticTokenRequest Remove a static token.  Any automation or other application which is using this token will cease to function. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStaticTokenCall(DeleteStaticTokenRequest deleteStaticTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStaticTokenRequest;

        // create path and map variables
        String localVarPath = "/DeleteStaticToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStaticTokenValidateBeforeCall(DeleteStaticTokenRequest deleteStaticTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteStaticTokenRequest' is set
        if (deleteStaticTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteStaticTokenRequest' when calling deleteStaticToken(Async)");
        }

        return deleteStaticTokenCall(deleteStaticTokenRequest, _callback);

    }

    /**
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @param deleteStaticTokenRequest Remove a static token.  Any automation or other application which is using this token will cease to function. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteStaticToken(DeleteStaticTokenRequest deleteStaticTokenRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteStaticTokenWithHttpInfo(deleteStaticTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @param deleteStaticTokenRequest Remove a static token.  Any automation or other application which is using this token will cease to function. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteStaticTokenWithHttpInfo(DeleteStaticTokenRequest deleteStaticTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteStaticTokenValidateBeforeCall(deleteStaticTokenRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a static token.  Any automation or other application which is using this token will cease to function. (asynchronously)
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     * @param deleteStaticTokenRequest Remove a static token.  Any automation or other application which is using this token will cease to function. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStaticTokenAsync(DeleteStaticTokenRequest deleteStaticTokenRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStaticTokenValidateBeforeCall(deleteStaticTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokens
     * @param getTokensRequest Request a list of tokens. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokensCall(GetTokensRequest getTokensRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTokensRequest;

        // create path and map variables
        String localVarPath = "/GetTokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokensValidateBeforeCall(GetTokensRequest getTokensRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getTokensRequest' is set
        if (getTokensRequest == null) {
            throw new ApiException("Missing the required parameter 'getTokensRequest' when calling getTokens(Async)");
        }

        return getTokensCall(getTokensRequest, _callback);

    }

    /**
     * Request a list of tokens.
     * Request a list of tokens.
     * @param getTokensRequest Request a list of tokens. (required)
     * @return GetTokensDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTokensDefaultResponse getTokens(GetTokensRequest getTokensRequest) throws ApiException {
        ApiResponse<GetTokensDefaultResponse> localVarResp = getTokensWithHttpInfo(getTokensRequest);
        return localVarResp.getData();
    }

    /**
     * Request a list of tokens.
     * Request a list of tokens.
     * @param getTokensRequest Request a list of tokens. (required)
     * @return ApiResponse&lt;GetTokensDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokensDefaultResponse> getTokensWithHttpInfo(GetTokensRequest getTokensRequest) throws ApiException {
        okhttp3.Call localVarCall = getTokensValidateBeforeCall(getTokensRequest, null);
        Type localVarReturnType = new TypeToken<GetTokensDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a list of tokens. (asynchronously)
     * Request a list of tokens.
     * @param getTokensRequest Request a list of tokens. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokensAsync(GetTokensRequest getTokensRequest, final ApiCallback<GetTokensDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokensValidateBeforeCall(getTokensRequest, _callback);
        Type localVarReturnType = new TypeToken<GetTokensDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStaticToken
     * @param updateStaticTokenRequest Change the UserID mapping for a static token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStaticTokenCall(UpdateStaticTokenRequest updateStaticTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStaticTokenRequest;

        // create path and map variables
        String localVarPath = "/UpdateStaticToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStaticTokenValidateBeforeCall(UpdateStaticTokenRequest updateStaticTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateStaticTokenRequest' is set
        if (updateStaticTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'updateStaticTokenRequest' when calling updateStaticToken(Async)");
        }

        return updateStaticTokenCall(updateStaticTokenRequest, _callback);

    }

    /**
     * Change the UserID mapping for a static token
     * Change the UserID mapping for a static token
     * @param updateStaticTokenRequest Change the UserID mapping for a static token (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse updateStaticToken(UpdateStaticTokenRequest updateStaticTokenRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = updateStaticTokenWithHttpInfo(updateStaticTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Change the UserID mapping for a static token
     * Change the UserID mapping for a static token
     * @param updateStaticTokenRequest Change the UserID mapping for a static token (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> updateStaticTokenWithHttpInfo(UpdateStaticTokenRequest updateStaticTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStaticTokenValidateBeforeCall(updateStaticTokenRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the UserID mapping for a static token (asynchronously)
     * Change the UserID mapping for a static token
     * @param updateStaticTokenRequest Change the UserID mapping for a static token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStaticTokenAsync(UpdateStaticTokenRequest updateStaticTokenRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStaticTokenValidateBeforeCall(updateStaticTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
