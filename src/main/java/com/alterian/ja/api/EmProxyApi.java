/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.EMAbortDeploymentRequest;
import com.alterian.ja.model.EMAuthenticateRequest;
import com.alterian.ja.model.EMDeleteListRequest;
import com.alterian.ja.model.EMGetClientGroupUsersDefaultResponse;
import com.alterian.ja.model.EMGetClientGroupUsersRequest;
import com.alterian.ja.model.EMGetClientGroupsDefaultResponse;
import com.alterian.ja.model.EMGetClientGroupsRequest;
import com.alterian.ja.model.EMGetClientInfoDefaultResponse;
import com.alterian.ja.model.EMGetClientInfoRequest;
import com.alterian.ja.model.EMGetClientSetsDefaultResponse;
import com.alterian.ja.model.EMGetClientSetsRequest;
import com.alterian.ja.model.EMGetCreativeDefaultResponse;
import com.alterian.ja.model.EMGetCreativeFieldsDefaultResponse;
import com.alterian.ja.model.EMGetCreativeRequest;
import com.alterian.ja.model.EMGetCreativesDefaultResponse;
import com.alterian.ja.model.EMGetCreativesRequest;
import com.alterian.ja.model.EMGetEMServiceURLRequest;
import com.alterian.ja.model.EMGetFoldersLazyDefaultResponse;
import com.alterian.ja.model.EMGetFoldersLazyRequest;
import com.alterian.ja.model.EMGetInboundAddressesDefaultResponse;
import com.alterian.ja.model.EMGetInboundAddressesRequest;
import com.alterian.ja.model.EMGetTemplateContentRequest;
import com.alterian.ja.model.EMGetUsersRequest;
import com.alterian.ja.model.EMLogOffRequest;
import com.alterian.ja.model.EMPauseDeploymentRequest;
import com.alterian.ja.model.EMPrimaryKeysDefaultResponse;
import com.alterian.ja.model.EMPrimaryKeysRequest;
import com.alterian.ja.model.EMSetEMServiceURLRequest;
import com.alterian.ja.model.EMTestEMServiceURLRequest;
import com.alterian.ja.model.GetDataSourceEngineUserNameDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmProxyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmProxyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmProxyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eMAbortDeployment
     * @param emAbortDeploymentRequest Proxy call to EM UserManager.asmx to abort a deployment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMAbortDeploymentCall(EMAbortDeploymentRequest emAbortDeploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emAbortDeploymentRequest;

        // create path and map variables
        String localVarPath = "/EM_AbortDeployment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMAbortDeploymentValidateBeforeCall(EMAbortDeploymentRequest emAbortDeploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emAbortDeploymentRequest' is set
        if (emAbortDeploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'emAbortDeploymentRequest' when calling eMAbortDeployment(Async)");
        }

        return eMAbortDeploymentCall(emAbortDeploymentRequest, _callback);

    }

    /**
     * Proxy call to EM UserManager.asmx to abort a deployment
     * Proxy call to EM UserManager.asmx to abort a deployment
     * @param emAbortDeploymentRequest Proxy call to EM UserManager.asmx to abort a deployment (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMAbortDeployment(EMAbortDeploymentRequest emAbortDeploymentRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMAbortDeploymentWithHttpInfo(emAbortDeploymentRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM UserManager.asmx to abort a deployment
     * Proxy call to EM UserManager.asmx to abort a deployment
     * @param emAbortDeploymentRequest Proxy call to EM UserManager.asmx to abort a deployment (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMAbortDeploymentWithHttpInfo(EMAbortDeploymentRequest emAbortDeploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = eMAbortDeploymentValidateBeforeCall(emAbortDeploymentRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM UserManager.asmx to abort a deployment (asynchronously)
     * Proxy call to EM UserManager.asmx to abort a deployment
     * @param emAbortDeploymentRequest Proxy call to EM UserManager.asmx to abort a deployment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMAbortDeploymentAsync(EMAbortDeploymentRequest emAbortDeploymentRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMAbortDeploymentValidateBeforeCall(emAbortDeploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMAuthenticate
     * @param emAuthenticateRequest Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMAuthenticateCall(EMAuthenticateRequest emAuthenticateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emAuthenticateRequest;

        // create path and map variables
        String localVarPath = "/EM_Authenticate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMAuthenticateValidateBeforeCall(EMAuthenticateRequest emAuthenticateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emAuthenticateRequest' is set
        if (emAuthenticateRequest == null) {
            throw new ApiException("Missing the required parameter 'emAuthenticateRequest' when calling eMAuthenticate(Async)");
        }

        return eMAuthenticateCall(emAuthenticateRequest, _callback);

    }

    /**
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @param emAuthenticateRequest Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) (required)
     * @return GetDataSourceEngineUserNameDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceEngineUserNameDefaultResponse eMAuthenticate(EMAuthenticateRequest emAuthenticateRequest) throws ApiException {
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResp = eMAuthenticateWithHttpInfo(emAuthenticateRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @param emAuthenticateRequest Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) (required)
     * @return ApiResponse&lt;GetDataSourceEngineUserNameDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceEngineUserNameDefaultResponse> eMAuthenticateWithHttpInfo(EMAuthenticateRequest emAuthenticateRequest) throws ApiException {
        okhttp3.Call localVarCall = eMAuthenticateValidateBeforeCall(emAuthenticateRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) (asynchronously)
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     * @param emAuthenticateRequest Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMAuthenticateAsync(EMAuthenticateRequest emAuthenticateRequest, final ApiCallback<GetDataSourceEngineUserNameDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMAuthenticateValidateBeforeCall(emAuthenticateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMDeleteList
     * @param emDeleteListRequest Deletes a list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMDeleteListCall(EMDeleteListRequest emDeleteListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emDeleteListRequest;

        // create path and map variables
        String localVarPath = "/EM_DeleteList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMDeleteListValidateBeforeCall(EMDeleteListRequest emDeleteListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emDeleteListRequest' is set
        if (emDeleteListRequest == null) {
            throw new ApiException("Missing the required parameter 'emDeleteListRequest' when calling eMDeleteList(Async)");
        }

        return eMDeleteListCall(emDeleteListRequest, _callback);

    }

    /**
     * Deletes a list
     * Deletes a list
     * @param emDeleteListRequest Deletes a list (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMDeleteList(EMDeleteListRequest emDeleteListRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMDeleteListWithHttpInfo(emDeleteListRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a list
     * Deletes a list
     * @param emDeleteListRequest Deletes a list (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMDeleteListWithHttpInfo(EMDeleteListRequest emDeleteListRequest) throws ApiException {
        okhttp3.Call localVarCall = eMDeleteListValidateBeforeCall(emDeleteListRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a list (asynchronously)
     * Deletes a list
     * @param emDeleteListRequest Deletes a list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMDeleteListAsync(EMDeleteListRequest emDeleteListRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMDeleteListValidateBeforeCall(emDeleteListRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetClientGroupUsers
     * @param emGetClientGroupUsersRequest Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientGroupUsersCall(EMGetClientGroupUsersRequest emGetClientGroupUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetClientGroupUsersRequest;

        // create path and map variables
        String localVarPath = "/EM_GetClientGroupUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetClientGroupUsersValidateBeforeCall(EMGetClientGroupUsersRequest emGetClientGroupUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetClientGroupUsersRequest' is set
        if (emGetClientGroupUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetClientGroupUsersRequest' when calling eMGetClientGroupUsers(Async)");
        }

        return eMGetClientGroupUsersCall(emGetClientGroupUsersRequest, _callback);

    }

    /**
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @param emGetClientGroupUsersRequest Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) (required)
     * @return EMGetClientGroupUsersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetClientGroupUsersDefaultResponse eMGetClientGroupUsers(EMGetClientGroupUsersRequest emGetClientGroupUsersRequest) throws ApiException {
        ApiResponse<EMGetClientGroupUsersDefaultResponse> localVarResp = eMGetClientGroupUsersWithHttpInfo(emGetClientGroupUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @param emGetClientGroupUsersRequest Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) (required)
     * @return ApiResponse&lt;EMGetClientGroupUsersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetClientGroupUsersDefaultResponse> eMGetClientGroupUsersWithHttpInfo(EMGetClientGroupUsersRequest emGetClientGroupUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetClientGroupUsersValidateBeforeCall(emGetClientGroupUsersRequest, null);
        Type localVarReturnType = new TypeToken<EMGetClientGroupUsersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) (asynchronously)
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     * @param emGetClientGroupUsersRequest Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientGroupUsersAsync(EMGetClientGroupUsersRequest emGetClientGroupUsersRequest, final ApiCallback<EMGetClientGroupUsersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetClientGroupUsersValidateBeforeCall(emGetClientGroupUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetClientGroupUsersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetClientGroups
     * @param emGetClientGroupsRequest Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientGroupsCall(EMGetClientGroupsRequest emGetClientGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetClientGroupsRequest;

        // create path and map variables
        String localVarPath = "/EM_GetClientGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetClientGroupsValidateBeforeCall(EMGetClientGroupsRequest emGetClientGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetClientGroupsRequest' is set
        if (emGetClientGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetClientGroupsRequest' when calling eMGetClientGroups(Async)");
        }

        return eMGetClientGroupsCall(emGetClientGroupsRequest, _callback);

    }

    /**
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @param emGetClientGroupsRequest Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) (required)
     * @return EMGetClientGroupsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetClientGroupsDefaultResponse eMGetClientGroups(EMGetClientGroupsRequest emGetClientGroupsRequest) throws ApiException {
        ApiResponse<EMGetClientGroupsDefaultResponse> localVarResp = eMGetClientGroupsWithHttpInfo(emGetClientGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @param emGetClientGroupsRequest Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) (required)
     * @return ApiResponse&lt;EMGetClientGroupsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetClientGroupsDefaultResponse> eMGetClientGroupsWithHttpInfo(EMGetClientGroupsRequest emGetClientGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetClientGroupsValidateBeforeCall(emGetClientGroupsRequest, null);
        Type localVarReturnType = new TypeToken<EMGetClientGroupsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) (asynchronously)
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     * @param emGetClientGroupsRequest Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientGroupsAsync(EMGetClientGroupsRequest emGetClientGroupsRequest, final ApiCallback<EMGetClientGroupsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetClientGroupsValidateBeforeCall(emGetClientGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetClientGroupsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetClientInfo
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientInfoCall(EMGetClientInfoRequest emGetClientInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetClientInfoRequest;

        // create path and map variables
        String localVarPath = "/EM_GetClientInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetClientInfoValidateBeforeCall(EMGetClientInfoRequest emGetClientInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetClientInfoRequest' is set
        if (emGetClientInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetClientInfoRequest' when calling eMGetClientInfo(Async)");
        }

        return eMGetClientInfoCall(emGetClientInfoRequest, _callback);

    }

    /**
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) (required)
     * @return EMGetClientInfoDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetClientInfoDefaultResponse eMGetClientInfo(EMGetClientInfoRequest emGetClientInfoRequest) throws ApiException {
        ApiResponse<EMGetClientInfoDefaultResponse> localVarResp = eMGetClientInfoWithHttpInfo(emGetClientInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) (required)
     * @return ApiResponse&lt;EMGetClientInfoDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetClientInfoDefaultResponse> eMGetClientInfoWithHttpInfo(EMGetClientInfoRequest emGetClientInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetClientInfoValidateBeforeCall(emGetClientInfoRequest, null);
        Type localVarReturnType = new TypeToken<EMGetClientInfoDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) (asynchronously)
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientInfoAsync(EMGetClientInfoRequest emGetClientInfoRequest, final ApiCallback<EMGetClientInfoDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetClientInfoValidateBeforeCall(emGetClientInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetClientInfoDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetClientSets
     * @param emGetClientSetsRequest Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientSetsCall(EMGetClientSetsRequest emGetClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetClientSetsRequest;

        // create path and map variables
        String localVarPath = "/EM_GetClientSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetClientSetsValidateBeforeCall(EMGetClientSetsRequest emGetClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetClientSetsRequest' is set
        if (emGetClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetClientSetsRequest' when calling eMGetClientSets(Async)");
        }

        return eMGetClientSetsCall(emGetClientSetsRequest, _callback);

    }

    /**
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @param emGetClientSetsRequest Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) (required)
     * @return EMGetClientSetsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetClientSetsDefaultResponse eMGetClientSets(EMGetClientSetsRequest emGetClientSetsRequest) throws ApiException {
        ApiResponse<EMGetClientSetsDefaultResponse> localVarResp = eMGetClientSetsWithHttpInfo(emGetClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @param emGetClientSetsRequest Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) (required)
     * @return ApiResponse&lt;EMGetClientSetsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetClientSetsDefaultResponse> eMGetClientSetsWithHttpInfo(EMGetClientSetsRequest emGetClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetClientSetsValidateBeforeCall(emGetClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<EMGetClientSetsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) (asynchronously)
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     * @param emGetClientSetsRequest Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetClientSetsAsync(EMGetClientSetsRequest emGetClientSetsRequest, final ApiCallback<EMGetClientSetsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetClientSetsValidateBeforeCall(emGetClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetClientSetsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetCreative
     * @param emGetCreativeRequest Proxy call to get EM creative (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetCreativeCall(EMGetCreativeRequest emGetCreativeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetCreativeRequest;

        // create path and map variables
        String localVarPath = "/EM_GetCreative";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetCreativeValidateBeforeCall(EMGetCreativeRequest emGetCreativeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetCreativeRequest' is set
        if (emGetCreativeRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetCreativeRequest' when calling eMGetCreative(Async)");
        }

        return eMGetCreativeCall(emGetCreativeRequest, _callback);

    }

    /**
     * Proxy call to get EM creative
     * Proxy call to get EM creative
     * @param emGetCreativeRequest Proxy call to get EM creative (required)
     * @return EMGetCreativeDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetCreativeDefaultResponse eMGetCreative(EMGetCreativeRequest emGetCreativeRequest) throws ApiException {
        ApiResponse<EMGetCreativeDefaultResponse> localVarResp = eMGetCreativeWithHttpInfo(emGetCreativeRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to get EM creative
     * Proxy call to get EM creative
     * @param emGetCreativeRequest Proxy call to get EM creative (required)
     * @return ApiResponse&lt;EMGetCreativeDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetCreativeDefaultResponse> eMGetCreativeWithHttpInfo(EMGetCreativeRequest emGetCreativeRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetCreativeValidateBeforeCall(emGetCreativeRequest, null);
        Type localVarReturnType = new TypeToken<EMGetCreativeDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to get EM creative (asynchronously)
     * Proxy call to get EM creative
     * @param emGetCreativeRequest Proxy call to get EM creative (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetCreativeAsync(EMGetCreativeRequest emGetCreativeRequest, final ApiCallback<EMGetCreativeDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetCreativeValidateBeforeCall(emGetCreativeRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetCreativeDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetCreativeFields
     * @param emGetCreativeRequest Proxy call to get EM creative fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetCreativeFieldsCall(EMGetCreativeRequest emGetCreativeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetCreativeRequest;

        // create path and map variables
        String localVarPath = "/EM_GetCreativeFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetCreativeFieldsValidateBeforeCall(EMGetCreativeRequest emGetCreativeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetCreativeRequest' is set
        if (emGetCreativeRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetCreativeRequest' when calling eMGetCreativeFields(Async)");
        }

        return eMGetCreativeFieldsCall(emGetCreativeRequest, _callback);

    }

    /**
     * Proxy call to get EM creative fields
     * Proxy call to get EM creative fields
     * @param emGetCreativeRequest Proxy call to get EM creative fields (required)
     * @return EMGetCreativeFieldsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetCreativeFieldsDefaultResponse eMGetCreativeFields(EMGetCreativeRequest emGetCreativeRequest) throws ApiException {
        ApiResponse<EMGetCreativeFieldsDefaultResponse> localVarResp = eMGetCreativeFieldsWithHttpInfo(emGetCreativeRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to get EM creative fields
     * Proxy call to get EM creative fields
     * @param emGetCreativeRequest Proxy call to get EM creative fields (required)
     * @return ApiResponse&lt;EMGetCreativeFieldsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetCreativeFieldsDefaultResponse> eMGetCreativeFieldsWithHttpInfo(EMGetCreativeRequest emGetCreativeRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetCreativeFieldsValidateBeforeCall(emGetCreativeRequest, null);
        Type localVarReturnType = new TypeToken<EMGetCreativeFieldsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to get EM creative fields (asynchronously)
     * Proxy call to get EM creative fields
     * @param emGetCreativeRequest Proxy call to get EM creative fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetCreativeFieldsAsync(EMGetCreativeRequest emGetCreativeRequest, final ApiCallback<EMGetCreativeFieldsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetCreativeFieldsValidateBeforeCall(emGetCreativeRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetCreativeFieldsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetCreatives
     * @param emGetCreativesRequest Proxy call to get EM creatives (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetCreativesCall(EMGetCreativesRequest emGetCreativesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetCreativesRequest;

        // create path and map variables
        String localVarPath = "/EM_GetCreatives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetCreativesValidateBeforeCall(EMGetCreativesRequest emGetCreativesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetCreativesRequest' is set
        if (emGetCreativesRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetCreativesRequest' when calling eMGetCreatives(Async)");
        }

        return eMGetCreativesCall(emGetCreativesRequest, _callback);

    }

    /**
     * Proxy call to get EM creatives
     * Proxy call to get EM creatives
     * @param emGetCreativesRequest Proxy call to get EM creatives (required)
     * @return EMGetCreativesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetCreativesDefaultResponse eMGetCreatives(EMGetCreativesRequest emGetCreativesRequest) throws ApiException {
        ApiResponse<EMGetCreativesDefaultResponse> localVarResp = eMGetCreativesWithHttpInfo(emGetCreativesRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to get EM creatives
     * Proxy call to get EM creatives
     * @param emGetCreativesRequest Proxy call to get EM creatives (required)
     * @return ApiResponse&lt;EMGetCreativesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetCreativesDefaultResponse> eMGetCreativesWithHttpInfo(EMGetCreativesRequest emGetCreativesRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetCreativesValidateBeforeCall(emGetCreativesRequest, null);
        Type localVarReturnType = new TypeToken<EMGetCreativesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to get EM creatives (asynchronously)
     * Proxy call to get EM creatives
     * @param emGetCreativesRequest Proxy call to get EM creatives (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetCreativesAsync(EMGetCreativesRequest emGetCreativesRequest, final ApiCallback<EMGetCreativesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetCreativesValidateBeforeCall(emGetCreativesRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetCreativesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetEMServiceURL
     * @param emGetEMServiceURLRequest Returns back the EM Service URL for the siteID requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetEMServiceURLCall(EMGetEMServiceURLRequest emGetEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetEMServiceURLRequest;

        // create path and map variables
        String localVarPath = "/EM_GetEMServiceURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetEMServiceURLValidateBeforeCall(EMGetEMServiceURLRequest emGetEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetEMServiceURLRequest' is set
        if (emGetEMServiceURLRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetEMServiceURLRequest' when calling eMGetEMServiceURL(Async)");
        }

        return eMGetEMServiceURLCall(emGetEMServiceURLRequest, _callback);

    }

    /**
     * Returns back the EM Service URL for the siteID requested.
     * Returns back the EM Service URL for the siteID requested.
     * @param emGetEMServiceURLRequest Returns back the EM Service URL for the siteID requested. (required)
     * @return GetDataSourceEngineUserNameDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceEngineUserNameDefaultResponse eMGetEMServiceURL(EMGetEMServiceURLRequest emGetEMServiceURLRequest) throws ApiException {
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResp = eMGetEMServiceURLWithHttpInfo(emGetEMServiceURLRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back the EM Service URL for the siteID requested.
     * Returns back the EM Service URL for the siteID requested.
     * @param emGetEMServiceURLRequest Returns back the EM Service URL for the siteID requested. (required)
     * @return ApiResponse&lt;GetDataSourceEngineUserNameDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceEngineUserNameDefaultResponse> eMGetEMServiceURLWithHttpInfo(EMGetEMServiceURLRequest emGetEMServiceURLRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetEMServiceURLValidateBeforeCall(emGetEMServiceURLRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the EM Service URL for the siteID requested. (asynchronously)
     * Returns back the EM Service URL for the siteID requested.
     * @param emGetEMServiceURLRequest Returns back the EM Service URL for the siteID requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetEMServiceURLAsync(EMGetEMServiceURLRequest emGetEMServiceURLRequest, final ApiCallback<GetDataSourceEngineUserNameDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetEMServiceURLValidateBeforeCall(emGetEMServiceURLRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetEmailValidationExpression
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetEmailValidationExpressionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EM_GetEmailValidationExpression";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetEmailValidationExpressionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return eMGetEmailValidationExpressionCall(_callback);

    }

    /**
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * @return GetDataSourceEngineUserNameDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceEngineUserNameDefaultResponse eMGetEmailValidationExpression() throws ApiException {
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResp = eMGetEmailValidationExpressionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * @return ApiResponse&lt;GetDataSourceEngineUserNameDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceEngineUserNameDefaultResponse> eMGetEmailValidationExpressionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = eMGetEmailValidationExpressionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager. (asynchronously)
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetEmailValidationExpressionAsync(final ApiCallback<GetDataSourceEngineUserNameDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetEmailValidationExpressionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetFoldersLazy
     * @param emGetFoldersLazyRequest Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetFoldersLazyCall(EMGetFoldersLazyRequest emGetFoldersLazyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetFoldersLazyRequest;

        // create path and map variables
        String localVarPath = "/EM_GetFoldersLazy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetFoldersLazyValidateBeforeCall(EMGetFoldersLazyRequest emGetFoldersLazyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetFoldersLazyRequest' is set
        if (emGetFoldersLazyRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetFoldersLazyRequest' when calling eMGetFoldersLazy(Async)");
        }

        return eMGetFoldersLazyCall(emGetFoldersLazyRequest, _callback);

    }

    /**
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @param emGetFoldersLazyRequest Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. (required)
     * @return EMGetFoldersLazyDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetFoldersLazyDefaultResponse eMGetFoldersLazy(EMGetFoldersLazyRequest emGetFoldersLazyRequest) throws ApiException {
        ApiResponse<EMGetFoldersLazyDefaultResponse> localVarResp = eMGetFoldersLazyWithHttpInfo(emGetFoldersLazyRequest);
        return localVarResp.getData();
    }

    /**
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @param emGetFoldersLazyRequest Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. (required)
     * @return ApiResponse&lt;EMGetFoldersLazyDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetFoldersLazyDefaultResponse> eMGetFoldersLazyWithHttpInfo(EMGetFoldersLazyRequest emGetFoldersLazyRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetFoldersLazyValidateBeforeCall(emGetFoldersLazyRequest, null);
        Type localVarReturnType = new TypeToken<EMGetFoldersLazyDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. (asynchronously)
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     * @param emGetFoldersLazyRequest Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetFoldersLazyAsync(EMGetFoldersLazyRequest emGetFoldersLazyRequest, final ApiCallback<EMGetFoldersLazyDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetFoldersLazyValidateBeforeCall(emGetFoldersLazyRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetFoldersLazyDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetInboundAddresses
     * @param emGetInboundAddressesRequest Proxy call to get inbound addresses (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetInboundAddressesCall(EMGetInboundAddressesRequest emGetInboundAddressesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetInboundAddressesRequest;

        // create path and map variables
        String localVarPath = "/EM_GetInboundAddresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetInboundAddressesValidateBeforeCall(EMGetInboundAddressesRequest emGetInboundAddressesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetInboundAddressesRequest' is set
        if (emGetInboundAddressesRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetInboundAddressesRequest' when calling eMGetInboundAddresses(Async)");
        }

        return eMGetInboundAddressesCall(emGetInboundAddressesRequest, _callback);

    }

    /**
     * Proxy call to get inbound addresses
     * Proxy call to get inbound addresses
     * @param emGetInboundAddressesRequest Proxy call to get inbound addresses (required)
     * @return EMGetInboundAddressesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetInboundAddressesDefaultResponse eMGetInboundAddresses(EMGetInboundAddressesRequest emGetInboundAddressesRequest) throws ApiException {
        ApiResponse<EMGetInboundAddressesDefaultResponse> localVarResp = eMGetInboundAddressesWithHttpInfo(emGetInboundAddressesRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to get inbound addresses
     * Proxy call to get inbound addresses
     * @param emGetInboundAddressesRequest Proxy call to get inbound addresses (required)
     * @return ApiResponse&lt;EMGetInboundAddressesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetInboundAddressesDefaultResponse> eMGetInboundAddressesWithHttpInfo(EMGetInboundAddressesRequest emGetInboundAddressesRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetInboundAddressesValidateBeforeCall(emGetInboundAddressesRequest, null);
        Type localVarReturnType = new TypeToken<EMGetInboundAddressesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to get inbound addresses (asynchronously)
     * Proxy call to get inbound addresses
     * @param emGetInboundAddressesRequest Proxy call to get inbound addresses (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetInboundAddressesAsync(EMGetInboundAddressesRequest emGetInboundAddressesRequest, final ApiCallback<EMGetInboundAddressesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetInboundAddressesValidateBeforeCall(emGetInboundAddressesRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetInboundAddressesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetTemplateContent
     * @param emGetTemplateContentRequest Proxy call to get EM template content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetTemplateContentCall(EMGetTemplateContentRequest emGetTemplateContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetTemplateContentRequest;

        // create path and map variables
        String localVarPath = "/EM_GetTemplateContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetTemplateContentValidateBeforeCall(EMGetTemplateContentRequest emGetTemplateContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetTemplateContentRequest' is set
        if (emGetTemplateContentRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetTemplateContentRequest' when calling eMGetTemplateContent(Async)");
        }

        return eMGetTemplateContentCall(emGetTemplateContentRequest, _callback);

    }

    /**
     * Proxy call to get EM template content
     * Proxy call to get EM template content
     * @param emGetTemplateContentRequest Proxy call to get EM template content (required)
     * @return GetDataSourceEngineUserNameDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSourceEngineUserNameDefaultResponse eMGetTemplateContent(EMGetTemplateContentRequest emGetTemplateContentRequest) throws ApiException {
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResp = eMGetTemplateContentWithHttpInfo(emGetTemplateContentRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to get EM template content
     * Proxy call to get EM template content
     * @param emGetTemplateContentRequest Proxy call to get EM template content (required)
     * @return ApiResponse&lt;GetDataSourceEngineUserNameDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDataSourceEngineUserNameDefaultResponse> eMGetTemplateContentWithHttpInfo(EMGetTemplateContentRequest emGetTemplateContentRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetTemplateContentValidateBeforeCall(emGetTemplateContentRequest, null);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to get EM template content (asynchronously)
     * Proxy call to get EM template content
     * @param emGetTemplateContentRequest Proxy call to get EM template content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetTemplateContentAsync(EMGetTemplateContentRequest emGetTemplateContentRequest, final ApiCallback<GetDataSourceEngineUserNameDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetTemplateContentValidateBeforeCall(emGetTemplateContentRequest, _callback);
        Type localVarReturnType = new TypeToken<GetDataSourceEngineUserNameDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMGetUsers
     * @param emGetUsersRequest Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetUsersCall(EMGetUsersRequest emGetUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetUsersRequest;

        // create path and map variables
        String localVarPath = "/EM_GetUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMGetUsersValidateBeforeCall(EMGetUsersRequest emGetUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetUsersRequest' is set
        if (emGetUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetUsersRequest' when calling eMGetUsers(Async)");
        }

        return eMGetUsersCall(emGetUsersRequest, _callback);

    }

    /**
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @param emGetUsersRequest Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login (required)
     * @return EMGetClientGroupUsersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMGetClientGroupUsersDefaultResponse eMGetUsers(EMGetUsersRequest emGetUsersRequest) throws ApiException {
        ApiResponse<EMGetClientGroupUsersDefaultResponse> localVarResp = eMGetUsersWithHttpInfo(emGetUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @param emGetUsersRequest Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login (required)
     * @return ApiResponse&lt;EMGetClientGroupUsersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMGetClientGroupUsersDefaultResponse> eMGetUsersWithHttpInfo(EMGetUsersRequest emGetUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = eMGetUsersValidateBeforeCall(emGetUsersRequest, null);
        Type localVarReturnType = new TypeToken<EMGetClientGroupUsersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login (asynchronously)
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     * @param emGetUsersRequest Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMGetUsersAsync(EMGetUsersRequest emGetUsersRequest, final ApiCallback<EMGetClientGroupUsersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMGetUsersValidateBeforeCall(emGetUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<EMGetClientGroupUsersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMIsSysAdmin
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMIsSysAdminCall(EMGetClientInfoRequest emGetClientInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetClientInfoRequest;

        // create path and map variables
        String localVarPath = "/EM_IsSysAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMIsSysAdminValidateBeforeCall(EMGetClientInfoRequest emGetClientInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emGetClientInfoRequest' is set
        if (emGetClientInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'emGetClientInfoRequest' when calling eMIsSysAdmin(Async)");
        }

        return eMIsSysAdminCall(emGetClientInfoRequest, _callback);

    }

    /**
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMIsSysAdmin(EMGetClientInfoRequest emGetClientInfoRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMIsSysAdminWithHttpInfo(emGetClientInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMIsSysAdminWithHttpInfo(EMGetClientInfoRequest emGetClientInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = eMIsSysAdminValidateBeforeCall(emGetClientInfoRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) (asynchronously)
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     * @param emGetClientInfoRequest Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMIsSysAdminAsync(EMGetClientInfoRequest emGetClientInfoRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMIsSysAdminValidateBeforeCall(emGetClientInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMLogOff
     * @param emLogOffRequest Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMLogOffCall(EMLogOffRequest emLogOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emLogOffRequest;

        // create path and map variables
        String localVarPath = "/EM_LogOff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMLogOffValidateBeforeCall(EMLogOffRequest emLogOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emLogOffRequest' is set
        if (emLogOffRequest == null) {
            throw new ApiException("Missing the required parameter 'emLogOffRequest' when calling eMLogOff(Async)");
        }

        return eMLogOffCall(emLogOffRequest, _callback);

    }

    /**
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @param emLogOffRequest Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMLogOff(EMLogOffRequest emLogOffRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMLogOffWithHttpInfo(emLogOffRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @param emLogOffRequest Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMLogOffWithHttpInfo(EMLogOffRequest emLogOffRequest) throws ApiException {
        okhttp3.Call localVarCall = eMLogOffValidateBeforeCall(emLogOffRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. (asynchronously)
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     * @param emLogOffRequest Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMLogOffAsync(EMLogOffRequest emLogOffRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMLogOffValidateBeforeCall(emLogOffRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMPauseDeployment
     * @param emPauseDeploymentRequest Proxy call to EM UserManager.asmx to pause a deployment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMPauseDeploymentCall(EMPauseDeploymentRequest emPauseDeploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emPauseDeploymentRequest;

        // create path and map variables
        String localVarPath = "/EM_PauseDeployment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMPauseDeploymentValidateBeforeCall(EMPauseDeploymentRequest emPauseDeploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emPauseDeploymentRequest' is set
        if (emPauseDeploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'emPauseDeploymentRequest' when calling eMPauseDeployment(Async)");
        }

        return eMPauseDeploymentCall(emPauseDeploymentRequest, _callback);

    }

    /**
     * Proxy call to EM UserManager.asmx to pause a deployment
     * Proxy call to EM UserManager.asmx to pause a deployment
     * @param emPauseDeploymentRequest Proxy call to EM UserManager.asmx to pause a deployment (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMPauseDeployment(EMPauseDeploymentRequest emPauseDeploymentRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMPauseDeploymentWithHttpInfo(emPauseDeploymentRequest);
        return localVarResp.getData();
    }

    /**
     * Proxy call to EM UserManager.asmx to pause a deployment
     * Proxy call to EM UserManager.asmx to pause a deployment
     * @param emPauseDeploymentRequest Proxy call to EM UserManager.asmx to pause a deployment (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMPauseDeploymentWithHttpInfo(EMPauseDeploymentRequest emPauseDeploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = eMPauseDeploymentValidateBeforeCall(emPauseDeploymentRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy call to EM UserManager.asmx to pause a deployment (asynchronously)
     * Proxy call to EM UserManager.asmx to pause a deployment
     * @param emPauseDeploymentRequest Proxy call to EM UserManager.asmx to pause a deployment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMPauseDeploymentAsync(EMPauseDeploymentRequest emPauseDeploymentRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMPauseDeploymentValidateBeforeCall(emPauseDeploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMPrimaryKeys
     * @param emPrimaryKeysRequest Returns back the primary keys for a specific EM client (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMPrimaryKeysCall(EMPrimaryKeysRequest emPrimaryKeysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emPrimaryKeysRequest;

        // create path and map variables
        String localVarPath = "/EM_PrimaryKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMPrimaryKeysValidateBeforeCall(EMPrimaryKeysRequest emPrimaryKeysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emPrimaryKeysRequest' is set
        if (emPrimaryKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'emPrimaryKeysRequest' when calling eMPrimaryKeys(Async)");
        }

        return eMPrimaryKeysCall(emPrimaryKeysRequest, _callback);

    }

    /**
     * Returns back the primary keys for a specific EM client
     * Returns back the primary keys for a specific EM client
     * @param emPrimaryKeysRequest Returns back the primary keys for a specific EM client (required)
     * @return EMPrimaryKeysDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EMPrimaryKeysDefaultResponse eMPrimaryKeys(EMPrimaryKeysRequest emPrimaryKeysRequest) throws ApiException {
        ApiResponse<EMPrimaryKeysDefaultResponse> localVarResp = eMPrimaryKeysWithHttpInfo(emPrimaryKeysRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back the primary keys for a specific EM client
     * Returns back the primary keys for a specific EM client
     * @param emPrimaryKeysRequest Returns back the primary keys for a specific EM client (required)
     * @return ApiResponse&lt;EMPrimaryKeysDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EMPrimaryKeysDefaultResponse> eMPrimaryKeysWithHttpInfo(EMPrimaryKeysRequest emPrimaryKeysRequest) throws ApiException {
        okhttp3.Call localVarCall = eMPrimaryKeysValidateBeforeCall(emPrimaryKeysRequest, null);
        Type localVarReturnType = new TypeToken<EMPrimaryKeysDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the primary keys for a specific EM client (asynchronously)
     * Returns back the primary keys for a specific EM client
     * @param emPrimaryKeysRequest Returns back the primary keys for a specific EM client (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMPrimaryKeysAsync(EMPrimaryKeysRequest emPrimaryKeysRequest, final ApiCallback<EMPrimaryKeysDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMPrimaryKeysValidateBeforeCall(emPrimaryKeysRequest, _callback);
        Type localVarReturnType = new TypeToken<EMPrimaryKeysDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMSetEMServiceURL
     * @param emSetEMServiceURLRequest Sets the URL used to connect to the EM instance (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMSetEMServiceURLCall(EMSetEMServiceURLRequest emSetEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emSetEMServiceURLRequest;

        // create path and map variables
        String localVarPath = "/EM_SetEMServiceURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMSetEMServiceURLValidateBeforeCall(EMSetEMServiceURLRequest emSetEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emSetEMServiceURLRequest' is set
        if (emSetEMServiceURLRequest == null) {
            throw new ApiException("Missing the required parameter 'emSetEMServiceURLRequest' when calling eMSetEMServiceURL(Async)");
        }

        return eMSetEMServiceURLCall(emSetEMServiceURLRequest, _callback);

    }

    /**
     * Sets the URL used to connect to the EM instance
     * Sets the URL used to connect to the EM instance
     * @param emSetEMServiceURLRequest Sets the URL used to connect to the EM instance (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMSetEMServiceURL(EMSetEMServiceURLRequest emSetEMServiceURLRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMSetEMServiceURLWithHttpInfo(emSetEMServiceURLRequest);
        return localVarResp.getData();
    }

    /**
     * Sets the URL used to connect to the EM instance
     * Sets the URL used to connect to the EM instance
     * @param emSetEMServiceURLRequest Sets the URL used to connect to the EM instance (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMSetEMServiceURLWithHttpInfo(EMSetEMServiceURLRequest emSetEMServiceURLRequest) throws ApiException {
        okhttp3.Call localVarCall = eMSetEMServiceURLValidateBeforeCall(emSetEMServiceURLRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the URL used to connect to the EM instance (asynchronously)
     * Sets the URL used to connect to the EM instance
     * @param emSetEMServiceURLRequest Sets the URL used to connect to the EM instance (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMSetEMServiceURLAsync(EMSetEMServiceURLRequest emSetEMServiceURLRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMSetEMServiceURLValidateBeforeCall(emSetEMServiceURLRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eMTestEMServiceURL
     * @param emTestEMServiceURLRequest Tests the EM Service URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMTestEMServiceURLCall(EMTestEMServiceURLRequest emTestEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emTestEMServiceURLRequest;

        // create path and map variables
        String localVarPath = "/EM_TestEMServiceURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eMTestEMServiceURLValidateBeforeCall(EMTestEMServiceURLRequest emTestEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emTestEMServiceURLRequest' is set
        if (emTestEMServiceURLRequest == null) {
            throw new ApiException("Missing the required parameter 'emTestEMServiceURLRequest' when calling eMTestEMServiceURL(Async)");
        }

        return eMTestEMServiceURLCall(emTestEMServiceURLRequest, _callback);

    }

    /**
     * Tests the EM Service URL
     * Tests the EM Service URL
     * @param emTestEMServiceURLRequest Tests the EM Service URL (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse eMTestEMServiceURL(EMTestEMServiceURLRequest emTestEMServiceURLRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = eMTestEMServiceURLWithHttpInfo(emTestEMServiceURLRequest);
        return localVarResp.getData();
    }

    /**
     * Tests the EM Service URL
     * Tests the EM Service URL
     * @param emTestEMServiceURLRequest Tests the EM Service URL (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> eMTestEMServiceURLWithHttpInfo(EMTestEMServiceURLRequest emTestEMServiceURLRequest) throws ApiException {
        okhttp3.Call localVarCall = eMTestEMServiceURLValidateBeforeCall(emTestEMServiceURLRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tests the EM Service URL (asynchronously)
     * Tests the EM Service URL
     * @param emTestEMServiceURLRequest Tests the EM Service URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eMTestEMServiceURLAsync(EMTestEMServiceURLRequest emTestEMServiceURLRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = eMTestEMServiceURLValidateBeforeCall(emTestEMServiceURLRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
