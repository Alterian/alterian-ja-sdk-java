/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AUTHChangePasswordRequest;
import com.alterian.ja.model.AUTHCreateLoginDefaultResponse;
import com.alterian.ja.model.AUTHCreateLoginRequest;
import com.alterian.ja.model.AUTHDisableLoginRequest;
import com.alterian.ja.model.AUTHGetClientLoginsDefaultResponse;
import com.alterian.ja.model.AUTHGetClientLoginsRequest;
import com.alterian.ja.model.AUTHGetLoginPasswordRulesDefaultResponse;
import com.alterian.ja.model.AUTHGetLoginPasswordRulesRequest;
import com.alterian.ja.model.AUTHGetLoginsForUserRequest;
import com.alterian.ja.model.AUTHGetLoginsRequest;
import com.alterian.ja.model.AUTHRenameLoginRequest;
import com.alterian.ja.model.AUTHSetLoginUserIdRequest;
import com.alterian.ja.model.AUTHUpdateLoginRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthServerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthServerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthServerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aUTHChangePassword
     * @param auTHChangePasswordRequest Set a new password for tthe specified login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHChangePasswordCall(AUTHChangePasswordRequest auTHChangePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHChangePasswordRequest;

        // create path and map variables
        String localVarPath = "/AUTH_ChangePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHChangePasswordValidateBeforeCall(AUTHChangePasswordRequest auTHChangePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHChangePasswordRequest' is set
        if (auTHChangePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHChangePasswordRequest' when calling aUTHChangePassword(Async)");
        }

        return aUTHChangePasswordCall(auTHChangePasswordRequest, _callback);

    }

    /**
     * Set a new password for tthe specified login
     * Set a new password for tthe specified login
     * @param auTHChangePasswordRequest Set a new password for tthe specified login (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHChangePassword(AUTHChangePasswordRequest auTHChangePasswordRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHChangePasswordWithHttpInfo(auTHChangePasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Set a new password for tthe specified login
     * Set a new password for tthe specified login
     * @param auTHChangePasswordRequest Set a new password for tthe specified login (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHChangePasswordWithHttpInfo(AUTHChangePasswordRequest auTHChangePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHChangePasswordValidateBeforeCall(auTHChangePasswordRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a new password for tthe specified login (asynchronously)
     * Set a new password for tthe specified login
     * @param auTHChangePasswordRequest Set a new password for tthe specified login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHChangePasswordAsync(AUTHChangePasswordRequest auTHChangePasswordRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHChangePasswordValidateBeforeCall(auTHChangePasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHCreateLogin
     * @param auTHCreateLoginRequest Creates a login and associates it with the client (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHCreateLoginCall(AUTHCreateLoginRequest auTHCreateLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHCreateLoginRequest;

        // create path and map variables
        String localVarPath = "/AUTH_CreateLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHCreateLoginValidateBeforeCall(AUTHCreateLoginRequest auTHCreateLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHCreateLoginRequest' is set
        if (auTHCreateLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHCreateLoginRequest' when calling aUTHCreateLogin(Async)");
        }

        return aUTHCreateLoginCall(auTHCreateLoginRequest, _callback);

    }

    /**
     * Creates a login and associates it with the client
     * Creates a login and associates it with the client
     * @param auTHCreateLoginRequest Creates a login and associates it with the client (required)
     * @return AUTHCreateLoginDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHCreateLoginDefaultResponse aUTHCreateLogin(AUTHCreateLoginRequest auTHCreateLoginRequest) throws ApiException {
        ApiResponse<AUTHCreateLoginDefaultResponse> localVarResp = aUTHCreateLoginWithHttpInfo(auTHCreateLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a login and associates it with the client
     * Creates a login and associates it with the client
     * @param auTHCreateLoginRequest Creates a login and associates it with the client (required)
     * @return ApiResponse&lt;AUTHCreateLoginDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHCreateLoginDefaultResponse> aUTHCreateLoginWithHttpInfo(AUTHCreateLoginRequest auTHCreateLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHCreateLoginValidateBeforeCall(auTHCreateLoginRequest, null);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a login and associates it with the client (asynchronously)
     * Creates a login and associates it with the client
     * @param auTHCreateLoginRequest Creates a login and associates it with the client (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHCreateLoginAsync(AUTHCreateLoginRequest auTHCreateLoginRequest, final ApiCallback<AUTHCreateLoginDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHCreateLoginValidateBeforeCall(auTHCreateLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHCreateLoginDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHDisableLogin
     * @param auTHDisableLoginRequest Disable the specified login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHDisableLoginCall(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHDisableLoginRequest;

        // create path and map variables
        String localVarPath = "/AUTH_DisableLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHDisableLoginValidateBeforeCall(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHDisableLoginRequest' is set
        if (auTHDisableLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHDisableLoginRequest' when calling aUTHDisableLogin(Async)");
        }

        return aUTHDisableLoginCall(auTHDisableLoginRequest, _callback);

    }

    /**
     * Disable the specified login
     * Disable the specified login
     * @param auTHDisableLoginRequest Disable the specified login (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHDisableLogin(AUTHDisableLoginRequest auTHDisableLoginRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHDisableLoginWithHttpInfo(auTHDisableLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Disable the specified login
     * Disable the specified login
     * @param auTHDisableLoginRequest Disable the specified login (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHDisableLoginWithHttpInfo(AUTHDisableLoginRequest auTHDisableLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHDisableLoginValidateBeforeCall(auTHDisableLoginRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable the specified login (asynchronously)
     * Disable the specified login
     * @param auTHDisableLoginRequest Disable the specified login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHDisableLoginAsync(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHDisableLoginValidateBeforeCall(auTHDisableLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHEnableLogin
     * @param auTHDisableLoginRequest Enable the specified login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHEnableLoginCall(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHDisableLoginRequest;

        // create path and map variables
        String localVarPath = "/AUTH_EnableLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHEnableLoginValidateBeforeCall(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHDisableLoginRequest' is set
        if (auTHDisableLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHDisableLoginRequest' when calling aUTHEnableLogin(Async)");
        }

        return aUTHEnableLoginCall(auTHDisableLoginRequest, _callback);

    }

    /**
     * Enable the specified login
     * Enable the specified login
     * @param auTHDisableLoginRequest Enable the specified login (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHEnableLogin(AUTHDisableLoginRequest auTHDisableLoginRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHEnableLoginWithHttpInfo(auTHDisableLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Enable the specified login
     * Enable the specified login
     * @param auTHDisableLoginRequest Enable the specified login (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHEnableLoginWithHttpInfo(AUTHDisableLoginRequest auTHDisableLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHEnableLoginValidateBeforeCall(auTHDisableLoginRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable the specified login (asynchronously)
     * Enable the specified login
     * @param auTHDisableLoginRequest Enable the specified login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHEnableLoginAsync(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHEnableLoginValidateBeforeCall(auTHDisableLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHExpirePassword
     * @param auTHDisableLoginRequest Expire the password for the specified login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHExpirePasswordCall(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHDisableLoginRequest;

        // create path and map variables
        String localVarPath = "/AUTH_ExpirePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHExpirePasswordValidateBeforeCall(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHDisableLoginRequest' is set
        if (auTHDisableLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHDisableLoginRequest' when calling aUTHExpirePassword(Async)");
        }

        return aUTHExpirePasswordCall(auTHDisableLoginRequest, _callback);

    }

    /**
     * Expire the password for the specified login
     * Expire the password for the specified login
     * @param auTHDisableLoginRequest Expire the password for the specified login (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHExpirePassword(AUTHDisableLoginRequest auTHDisableLoginRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHExpirePasswordWithHttpInfo(auTHDisableLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Expire the password for the specified login
     * Expire the password for the specified login
     * @param auTHDisableLoginRequest Expire the password for the specified login (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHExpirePasswordWithHttpInfo(AUTHDisableLoginRequest auTHDisableLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHExpirePasswordValidateBeforeCall(auTHDisableLoginRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Expire the password for the specified login (asynchronously)
     * Expire the password for the specified login
     * @param auTHDisableLoginRequest Expire the password for the specified login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHExpirePasswordAsync(AUTHDisableLoginRequest auTHDisableLoginRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHExpirePasswordValidateBeforeCall(auTHDisableLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHGetClientLogins
     * @param auTHGetClientLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetClientLoginsCall(AUTHGetClientLoginsRequest auTHGetClientLoginsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHGetClientLoginsRequest;

        // create path and map variables
        String localVarPath = "/AUTH_GetClientLogins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHGetClientLoginsValidateBeforeCall(AUTHGetClientLoginsRequest auTHGetClientLoginsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHGetClientLoginsRequest' is set
        if (auTHGetClientLoginsRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHGetClientLoginsRequest' when calling aUTHGetClientLogins(Async)");
        }

        return aUTHGetClientLoginsCall(auTHGetClientLoginsRequest, _callback);

    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     * @param auTHGetClientLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client (required)
     * @return AUTHGetClientLoginsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHGetClientLoginsDefaultResponse aUTHGetClientLogins(AUTHGetClientLoginsRequest auTHGetClientLoginsRequest) throws ApiException {
        ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResp = aUTHGetClientLoginsWithHttpInfo(auTHGetClientLoginsRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     * @param auTHGetClientLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client (required)
     * @return ApiResponse&lt;AUTHGetClientLoginsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHGetClientLoginsDefaultResponse> aUTHGetClientLoginsWithHttpInfo(AUTHGetClientLoginsRequest auTHGetClientLoginsRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHGetClientLoginsValidateBeforeCall(auTHGetClientLoginsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHGetClientLoginsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client (asynchronously)
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     * @param auTHGetClientLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetClientLoginsAsync(AUTHGetClientLoginsRequest auTHGetClientLoginsRequest, final ApiCallback<AUTHGetClientLoginsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHGetClientLoginsValidateBeforeCall(auTHGetClientLoginsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHGetClientLoginsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHGetLoginPasswordRules
     * @param auTHGetLoginPasswordRulesRequest Request the password policy rules from the authentication system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetLoginPasswordRulesCall(AUTHGetLoginPasswordRulesRequest auTHGetLoginPasswordRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHGetLoginPasswordRulesRequest;

        // create path and map variables
        String localVarPath = "/AUTH_GetLoginPasswordRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHGetLoginPasswordRulesValidateBeforeCall(AUTHGetLoginPasswordRulesRequest auTHGetLoginPasswordRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHGetLoginPasswordRulesRequest' is set
        if (auTHGetLoginPasswordRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHGetLoginPasswordRulesRequest' when calling aUTHGetLoginPasswordRules(Async)");
        }

        return aUTHGetLoginPasswordRulesCall(auTHGetLoginPasswordRulesRequest, _callback);

    }

    /**
     * Request the password policy rules from the authentication system
     * Request the password policy rules from the authentication system
     * @param auTHGetLoginPasswordRulesRequest Request the password policy rules from the authentication system (required)
     * @return AUTHGetLoginPasswordRulesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHGetLoginPasswordRulesDefaultResponse aUTHGetLoginPasswordRules(AUTHGetLoginPasswordRulesRequest auTHGetLoginPasswordRulesRequest) throws ApiException {
        ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse> localVarResp = aUTHGetLoginPasswordRulesWithHttpInfo(auTHGetLoginPasswordRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Request the password policy rules from the authentication system
     * Request the password policy rules from the authentication system
     * @param auTHGetLoginPasswordRulesRequest Request the password policy rules from the authentication system (required)
     * @return ApiResponse&lt;AUTHGetLoginPasswordRulesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse> aUTHGetLoginPasswordRulesWithHttpInfo(AUTHGetLoginPasswordRulesRequest auTHGetLoginPasswordRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHGetLoginPasswordRulesValidateBeforeCall(auTHGetLoginPasswordRulesRequest, null);
        Type localVarReturnType = new TypeToken<AUTHGetLoginPasswordRulesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request the password policy rules from the authentication system (asynchronously)
     * Request the password policy rules from the authentication system
     * @param auTHGetLoginPasswordRulesRequest Request the password policy rules from the authentication system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetLoginPasswordRulesAsync(AUTHGetLoginPasswordRulesRequest auTHGetLoginPasswordRulesRequest, final ApiCallback<AUTHGetLoginPasswordRulesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHGetLoginPasswordRulesValidateBeforeCall(auTHGetLoginPasswordRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHGetLoginPasswordRulesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHGetLogins
     * @param auTHGetLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetLoginsCall(AUTHGetLoginsRequest auTHGetLoginsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHGetLoginsRequest;

        // create path and map variables
        String localVarPath = "/AUTH_GetLogins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHGetLoginsValidateBeforeCall(AUTHGetLoginsRequest auTHGetLoginsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHGetLoginsRequest' is set
        if (auTHGetLoginsRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHGetLoginsRequest' when calling aUTHGetLogins(Async)");
        }

        return aUTHGetLoginsCall(auTHGetLoginsRequest, _callback);

    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     * @param auTHGetLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them (required)
     * @return AUTHGetClientLoginsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHGetClientLoginsDefaultResponse aUTHGetLogins(AUTHGetLoginsRequest auTHGetLoginsRequest) throws ApiException {
        ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResp = aUTHGetLoginsWithHttpInfo(auTHGetLoginsRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     * @param auTHGetLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them (required)
     * @return ApiResponse&lt;AUTHGetClientLoginsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHGetClientLoginsDefaultResponse> aUTHGetLoginsWithHttpInfo(AUTHGetLoginsRequest auTHGetLoginsRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHGetLoginsValidateBeforeCall(auTHGetLoginsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHGetClientLoginsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them (asynchronously)
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     * @param auTHGetLoginsRequest Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetLoginsAsync(AUTHGetLoginsRequest auTHGetLoginsRequest, final ApiCallback<AUTHGetClientLoginsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHGetLoginsValidateBeforeCall(auTHGetLoginsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHGetClientLoginsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHGetLoginsForUser
     * @param auTHGetLoginsForUserRequest Returns back the login(s) associated with a particular userid and siteid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetLoginsForUserCall(AUTHGetLoginsForUserRequest auTHGetLoginsForUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHGetLoginsForUserRequest;

        // create path and map variables
        String localVarPath = "/AUTH_GetLoginsForUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHGetLoginsForUserValidateBeforeCall(AUTHGetLoginsForUserRequest auTHGetLoginsForUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHGetLoginsForUserRequest' is set
        if (auTHGetLoginsForUserRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHGetLoginsForUserRequest' when calling aUTHGetLoginsForUser(Async)");
        }

        return aUTHGetLoginsForUserCall(auTHGetLoginsForUserRequest, _callback);

    }

    /**
     * Returns back the login(s) associated with a particular userid and siteid
     * Returns back the login(s) associated with a particular userid and siteid
     * @param auTHGetLoginsForUserRequest Returns back the login(s) associated with a particular userid and siteid (required)
     * @return AUTHGetClientLoginsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHGetClientLoginsDefaultResponse aUTHGetLoginsForUser(AUTHGetLoginsForUserRequest auTHGetLoginsForUserRequest) throws ApiException {
        ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResp = aUTHGetLoginsForUserWithHttpInfo(auTHGetLoginsForUserRequest);
        return localVarResp.getData();
    }

    /**
     * Returns back the login(s) associated with a particular userid and siteid
     * Returns back the login(s) associated with a particular userid and siteid
     * @param auTHGetLoginsForUserRequest Returns back the login(s) associated with a particular userid and siteid (required)
     * @return ApiResponse&lt;AUTHGetClientLoginsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHGetClientLoginsDefaultResponse> aUTHGetLoginsForUserWithHttpInfo(AUTHGetLoginsForUserRequest auTHGetLoginsForUserRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHGetLoginsForUserValidateBeforeCall(auTHGetLoginsForUserRequest, null);
        Type localVarReturnType = new TypeToken<AUTHGetClientLoginsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the login(s) associated with a particular userid and siteid (asynchronously)
     * Returns back the login(s) associated with a particular userid and siteid
     * @param auTHGetLoginsForUserRequest Returns back the login(s) associated with a particular userid and siteid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHGetLoginsForUserAsync(AUTHGetLoginsForUserRequest auTHGetLoginsForUserRequest, final ApiCallback<AUTHGetClientLoginsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHGetLoginsForUserValidateBeforeCall(auTHGetLoginsForUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHGetClientLoginsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHRenameLogin
     * @param auTHRenameLoginRequest Rename the specified login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHRenameLoginCall(AUTHRenameLoginRequest auTHRenameLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHRenameLoginRequest;

        // create path and map variables
        String localVarPath = "/AUTH_RenameLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHRenameLoginValidateBeforeCall(AUTHRenameLoginRequest auTHRenameLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHRenameLoginRequest' is set
        if (auTHRenameLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHRenameLoginRequest' when calling aUTHRenameLogin(Async)");
        }

        return aUTHRenameLoginCall(auTHRenameLoginRequest, _callback);

    }

    /**
     * Rename the specified login
     * Rename the specified login
     * @param auTHRenameLoginRequest Rename the specified login (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHRenameLogin(AUTHRenameLoginRequest auTHRenameLoginRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHRenameLoginWithHttpInfo(auTHRenameLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Rename the specified login
     * Rename the specified login
     * @param auTHRenameLoginRequest Rename the specified login (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHRenameLoginWithHttpInfo(AUTHRenameLoginRequest auTHRenameLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHRenameLoginValidateBeforeCall(auTHRenameLoginRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename the specified login (asynchronously)
     * Rename the specified login
     * @param auTHRenameLoginRequest Rename the specified login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHRenameLoginAsync(AUTHRenameLoginRequest auTHRenameLoginRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHRenameLoginValidateBeforeCall(auTHRenameLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHSetLoginUserId
     * @param auTHSetLoginUserIdRequest Associates an auth system login with a CM user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHSetLoginUserIdCall(AUTHSetLoginUserIdRequest auTHSetLoginUserIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHSetLoginUserIdRequest;

        // create path and map variables
        String localVarPath = "/AUTH_SetLoginUserId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHSetLoginUserIdValidateBeforeCall(AUTHSetLoginUserIdRequest auTHSetLoginUserIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHSetLoginUserIdRequest' is set
        if (auTHSetLoginUserIdRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHSetLoginUserIdRequest' when calling aUTHSetLoginUserId(Async)");
        }

        return aUTHSetLoginUserIdCall(auTHSetLoginUserIdRequest, _callback);

    }

    /**
     * Associates an auth system login with a CM user ID
     * Associates an auth system login with a CM user ID
     * @param auTHSetLoginUserIdRequest Associates an auth system login with a CM user ID (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHSetLoginUserId(AUTHSetLoginUserIdRequest auTHSetLoginUserIdRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHSetLoginUserIdWithHttpInfo(auTHSetLoginUserIdRequest);
        return localVarResp.getData();
    }

    /**
     * Associates an auth system login with a CM user ID
     * Associates an auth system login with a CM user ID
     * @param auTHSetLoginUserIdRequest Associates an auth system login with a CM user ID (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHSetLoginUserIdWithHttpInfo(AUTHSetLoginUserIdRequest auTHSetLoginUserIdRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHSetLoginUserIdValidateBeforeCall(auTHSetLoginUserIdRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associates an auth system login with a CM user ID (asynchronously)
     * Associates an auth system login with a CM user ID
     * @param auTHSetLoginUserIdRequest Associates an auth system login with a CM user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHSetLoginUserIdAsync(AUTHSetLoginUserIdRequest auTHSetLoginUserIdRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHSetLoginUserIdValidateBeforeCall(auTHSetLoginUserIdRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aUTHUpdateLogin
     * @param auTHUpdateLoginRequest Updates the important components of a login, use expire, etc. to expire or delete a login (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHUpdateLoginCall(AUTHUpdateLoginRequest auTHUpdateLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auTHUpdateLoginRequest;

        // create path and map variables
        String localVarPath = "/AUTH_UpdateLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aUTHUpdateLoginValidateBeforeCall(AUTHUpdateLoginRequest auTHUpdateLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auTHUpdateLoginRequest' is set
        if (auTHUpdateLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'auTHUpdateLoginRequest' when calling aUTHUpdateLogin(Async)");
        }

        return aUTHUpdateLoginCall(auTHUpdateLoginRequest, _callback);

    }

    /**
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * @param auTHUpdateLoginRequest Updates the important components of a login, use expire, etc. to expire or delete a login (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse aUTHUpdateLogin(AUTHUpdateLoginRequest auTHUpdateLoginRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = aUTHUpdateLoginWithHttpInfo(auTHUpdateLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * @param auTHUpdateLoginRequest Updates the important components of a login, use expire, etc. to expire or delete a login (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> aUTHUpdateLoginWithHttpInfo(AUTHUpdateLoginRequest auTHUpdateLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = aUTHUpdateLoginValidateBeforeCall(auTHUpdateLoginRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the important components of a login, use expire, etc. to expire or delete a login (asynchronously)
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     * @param auTHUpdateLoginRequest Updates the important components of a login, use expire, etc. to expire or delete a login (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aUTHUpdateLoginAsync(AUTHUpdateLoginRequest auTHUpdateLoginRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aUTHUpdateLoginValidateBeforeCall(auTHUpdateLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
