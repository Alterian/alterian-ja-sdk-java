/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.CopyUserRequest;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateUserRequest;
import com.alterian.ja.model.DeleteUserReassignAssetsRequest;
import com.alterian.ja.model.DeleteUserRequest;
import com.alterian.ja.model.GetClientSetsRequest;
import com.alterian.ja.model.GetCulturesDefaultResponse;
import com.alterian.ja.model.GetCurrentUserDefaultResponse;
import com.alterian.ja.model.GetCurrentUserRequest;
import com.alterian.ja.model.GetTimeZonesDefaultResponse;
import com.alterian.ja.model.GetUserRequest;
import com.alterian.ja.model.GetUsersDefaultResponse;
import com.alterian.ja.model.GetUsersForClientRequest;
import com.alterian.ja.model.GetUsersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copyUser
     * @param copyUserRequest Copy a user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyUserCall(CopyUserRequest copyUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyUserRequest;

        // create path and map variables
        String localVarPath = "/CopyUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyUserValidateBeforeCall(CopyUserRequest copyUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'copyUserRequest' is set
        if (copyUserRequest == null) {
            throw new ApiException("Missing the required parameter 'copyUserRequest' when calling copyUser(Async)");
        }

        return copyUserCall(copyUserRequest, _callback);

    }

    /**
     * Copy a user
     * Copy a user
     * @param copyUserRequest Copy a user (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse copyUser(CopyUserRequest copyUserRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = copyUserWithHttpInfo(copyUserRequest);
        return localVarResp.getData();
    }

    /**
     * Copy a user
     * Copy a user
     * @param copyUserRequest Copy a user (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> copyUserWithHttpInfo(CopyUserRequest copyUserRequest) throws ApiException {
        okhttp3.Call localVarCall = copyUserValidateBeforeCall(copyUserRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a user (asynchronously)
     * Copy a user
     * @param copyUserRequest Copy a user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyUserAsync(CopyUserRequest copyUserRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyUserValidateBeforeCall(copyUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param createUserRequest Add a new user to the specified @see(ALClient) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/CreateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling createUser(Async)");
        }

        return createUserCall(createUserRequest, _callback);

    }

    /**
     * Add a new user to the specified @see(ALClient)
     * Add a new user to the specified @see(ALClient)
     * @param createUserRequest Add a new user to the specified @see(ALClient) (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse createUser(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = createUserWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new user to the specified @see(ALClient)
     * Add a new user to the specified @see(ALClient)
     * @param createUserRequest Add a new user to the specified @see(ALClient) (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> createUserWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new user to the specified @see(ALClient) (asynchronously)
     * Add a new user to the specified @see(ALClient)
     * @param createUserRequest Add a new user to the specified @see(ALClient) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(CreateUserRequest createUserRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param deleteUserRequest Delete a user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(DeleteUserRequest deleteUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserRequest;

        // create path and map variables
        String localVarPath = "/DeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(DeleteUserRequest deleteUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteUserRequest' is set
        if (deleteUserRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserRequest' when calling deleteUser(Async)");
        }

        return deleteUserCall(deleteUserRequest, _callback);

    }

    /**
     * Delete a user
     * Delete a user
     * @param deleteUserRequest Delete a user (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteUser(DeleteUserRequest deleteUserRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteUserWithHttpInfo(deleteUserRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a user
     * Delete a user
     * @param deleteUserRequest Delete a user (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteUserWithHttpInfo(DeleteUserRequest deleteUserRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(deleteUserRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a user (asynchronously)
     * Delete a user
     * @param deleteUserRequest Delete a user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(DeleteUserRequest deleteUserRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(deleteUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserReassignAssets
     * @param deleteUserReassignAssetsRequest Deletes a user and reassigns their documents, files and folders to another user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserReassignAssetsCall(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserReassignAssetsRequest;

        // create path and map variables
        String localVarPath = "/DeleteUserReassignAssets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserReassignAssetsValidateBeforeCall(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteUserReassignAssetsRequest' is set
        if (deleteUserReassignAssetsRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserReassignAssetsRequest' when calling deleteUserReassignAssets(Async)");
        }

        return deleteUserReassignAssetsCall(deleteUserReassignAssetsRequest, _callback);

    }

    /**
     * Deletes a user and reassigns their documents, files and folders to another user
     * Deletes a user and reassigns their documents, files and folders to another user
     * @param deleteUserReassignAssetsRequest Deletes a user and reassigns their documents, files and folders to another user (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteUserReassignAssets(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteUserReassignAssetsWithHttpInfo(deleteUserReassignAssetsRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a user and reassigns their documents, files and folders to another user
     * Deletes a user and reassigns their documents, files and folders to another user
     * @param deleteUserReassignAssetsRequest Deletes a user and reassigns their documents, files and folders to another user (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteUserReassignAssetsWithHttpInfo(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteUserReassignAssetsValidateBeforeCall(deleteUserReassignAssetsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a user and reassigns their documents, files and folders to another user (asynchronously)
     * Deletes a user and reassigns their documents, files and folders to another user
     * @param deleteUserReassignAssetsRequest Deletes a user and reassigns their documents, files and folders to another user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserReassignAssetsAsync(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserReassignAssetsValidateBeforeCall(deleteUserReassignAssetsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCultures
     * @param getClientSetsRequest Get a list of cultures [for use with the @see(ALUser) ] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCulturesCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSetsRequest;

        // create path and map variables
        String localVarPath = "/GetCultures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCulturesValidateBeforeCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSetsRequest' is set
        if (getClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSetsRequest' when calling getCultures(Async)");
        }

        return getCulturesCall(getClientSetsRequest, _callback);

    }

    /**
     * Get a list of cultures [for use with the @see(ALUser) ]
     * Get a list of cultures [for use with the @see(ALUser) ]
     * @param getClientSetsRequest Get a list of cultures [for use with the @see(ALUser) ] (required)
     * @return GetCulturesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCulturesDefaultResponse getCultures(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        ApiResponse<GetCulturesDefaultResponse> localVarResp = getCulturesWithHttpInfo(getClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of cultures [for use with the @see(ALUser) ]
     * Get a list of cultures [for use with the @see(ALUser) ]
     * @param getClientSetsRequest Get a list of cultures [for use with the @see(ALUser) ] (required)
     * @return ApiResponse&lt;GetCulturesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCulturesDefaultResponse> getCulturesWithHttpInfo(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = getCulturesValidateBeforeCall(getClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<GetCulturesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of cultures [for use with the @see(ALUser) ] (asynchronously)
     * Get a list of cultures [for use with the @see(ALUser) ]
     * @param getClientSetsRequest Get a list of cultures [for use with the @see(ALUser) ] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCulturesAsync(GetClientSetsRequest getClientSetsRequest, final ApiCallback<GetCulturesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCulturesValidateBeforeCall(getClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetCulturesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentUser
     * @param getCurrentUserRequest Return back the current user [based upon their token] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentUserCall(GetCurrentUserRequest getCurrentUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCurrentUserRequest;

        // create path and map variables
        String localVarPath = "/GetCurrentUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserValidateBeforeCall(GetCurrentUserRequest getCurrentUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getCurrentUserRequest' is set
        if (getCurrentUserRequest == null) {
            throw new ApiException("Missing the required parameter 'getCurrentUserRequest' when calling getCurrentUser(Async)");
        }

        return getCurrentUserCall(getCurrentUserRequest, _callback);

    }

    /**
     * Return back the current user [based upon their token]
     * Return back the current user [based upon their token]
     * @param getCurrentUserRequest Return back the current user [based upon their token] (required)
     * @return GetCurrentUserDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserDefaultResponse getCurrentUser(GetCurrentUserRequest getCurrentUserRequest) throws ApiException {
        ApiResponse<GetCurrentUserDefaultResponse> localVarResp = getCurrentUserWithHttpInfo(getCurrentUserRequest);
        return localVarResp.getData();
    }

    /**
     * Return back the current user [based upon their token]
     * Return back the current user [based upon their token]
     * @param getCurrentUserRequest Return back the current user [based upon their token] (required)
     * @return ApiResponse&lt;GetCurrentUserDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCurrentUserDefaultResponse> getCurrentUserWithHttpInfo(GetCurrentUserRequest getCurrentUserRequest) throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(getCurrentUserRequest, null);
        Type localVarReturnType = new TypeToken<GetCurrentUserDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return back the current user [based upon their token] (asynchronously)
     * Return back the current user [based upon their token]
     * @param getCurrentUserRequest Return back the current user [based upon their token] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentUserAsync(GetCurrentUserRequest getCurrentUserRequest, final ApiCallback<GetCurrentUserDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(getCurrentUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetCurrentUserDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTimeZones
     * @param getClientSetsRequest Get a list of the timezones [for use with the @see(ALUser) ] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZonesCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSetsRequest;

        // create path and map variables
        String localVarPath = "/GetTimeZones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeZonesValidateBeforeCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSetsRequest' is set
        if (getClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSetsRequest' when calling getTimeZones(Async)");
        }

        return getTimeZonesCall(getClientSetsRequest, _callback);

    }

    /**
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * @param getClientSetsRequest Get a list of the timezones [for use with the @see(ALUser) ] (required)
     * @return GetTimeZonesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeZonesDefaultResponse getTimeZones(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        ApiResponse<GetTimeZonesDefaultResponse> localVarResp = getTimeZonesWithHttpInfo(getClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * @param getClientSetsRequest Get a list of the timezones [for use with the @see(ALUser) ] (required)
     * @return ApiResponse&lt;GetTimeZonesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTimeZonesDefaultResponse> getTimeZonesWithHttpInfo(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = getTimeZonesValidateBeforeCall(getClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<GetTimeZonesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the timezones [for use with the @see(ALUser) ] (asynchronously)
     * Get a list of the timezones [for use with the @see(ALUser) ]
     * @param getClientSetsRequest Get a list of the timezones [for use with the @see(ALUser) ] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTimeZonesAsync(GetClientSetsRequest getClientSetsRequest, final ApiCallback<GetTimeZonesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeZonesValidateBeforeCall(getClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetTimeZonesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param getUserRequest Given a UserID, get the rest of the details for that user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(GetUserRequest getUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUserRequest;

        // create path and map variables
        String localVarPath = "/GetUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(GetUserRequest getUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getUserRequest' is set
        if (getUserRequest == null) {
            throw new ApiException("Missing the required parameter 'getUserRequest' when calling getUser(Async)");
        }

        return getUserCall(getUserRequest, _callback);

    }

    /**
     * Given a UserID, get the rest of the details for that user.
     * Given a UserID, get the rest of the details for that user.
     * @param getUserRequest Given a UserID, get the rest of the details for that user. (required)
     * @return GetCurrentUserDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserDefaultResponse getUser(GetUserRequest getUserRequest) throws ApiException {
        ApiResponse<GetCurrentUserDefaultResponse> localVarResp = getUserWithHttpInfo(getUserRequest);
        return localVarResp.getData();
    }

    /**
     * Given a UserID, get the rest of the details for that user.
     * Given a UserID, get the rest of the details for that user.
     * @param getUserRequest Given a UserID, get the rest of the details for that user. (required)
     * @return ApiResponse&lt;GetCurrentUserDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCurrentUserDefaultResponse> getUserWithHttpInfo(GetUserRequest getUserRequest) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(getUserRequest, null);
        Type localVarReturnType = new TypeToken<GetCurrentUserDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a UserID, get the rest of the details for that user. (asynchronously)
     * Given a UserID, get the rest of the details for that user.
     * @param getUserRequest Given a UserID, get the rest of the details for that user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(GetUserRequest getUserRequest, final ApiCallback<GetCurrentUserDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(getUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GetCurrentUserDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param getUsersRequest List the users within the current @see(ALClient), optionally filtering the set returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(GetUsersRequest getUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUsersRequest;

        // create path and map variables
        String localVarPath = "/GetUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(GetUsersRequest getUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getUsersRequest' is set
        if (getUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'getUsersRequest' when calling getUsers(Async)");
        }

        return getUsersCall(getUsersRequest, _callback);

    }

    /**
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * @param getUsersRequest List the users within the current @see(ALClient), optionally filtering the set returned. (required)
     * @return GetUsersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUsersDefaultResponse getUsers(GetUsersRequest getUsersRequest) throws ApiException {
        ApiResponse<GetUsersDefaultResponse> localVarResp = getUsersWithHttpInfo(getUsersRequest);
        return localVarResp.getData();
    }

    /**
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * @param getUsersRequest List the users within the current @see(ALClient), optionally filtering the set returned. (required)
     * @return ApiResponse&lt;GetUsersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUsersDefaultResponse> getUsersWithHttpInfo(GetUsersRequest getUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(getUsersRequest, null);
        Type localVarReturnType = new TypeToken<GetUsersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users within the current @see(ALClient), optionally filtering the set returned. (asynchronously)
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     * @param getUsersRequest List the users within the current @see(ALClient), optionally filtering the set returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(GetUsersRequest getUsersRequest, final ApiCallback<GetUsersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(getUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetUsersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersForClient
     * @param getUsersForClientRequest List the users within the specified client, optionally filtering the set returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersForClientCall(GetUsersForClientRequest getUsersForClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUsersForClientRequest;

        // create path and map variables
        String localVarPath = "/GetUsersForClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersForClientValidateBeforeCall(GetUsersForClientRequest getUsersForClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getUsersForClientRequest' is set
        if (getUsersForClientRequest == null) {
            throw new ApiException("Missing the required parameter 'getUsersForClientRequest' when calling getUsersForClient(Async)");
        }

        return getUsersForClientCall(getUsersForClientRequest, _callback);

    }

    /**
     * List the users within the specified client, optionally filtering the set returned.
     * List the users within the specified client, optionally filtering the set returned.
     * @param getUsersForClientRequest List the users within the specified client, optionally filtering the set returned. (required)
     * @return GetUsersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUsersDefaultResponse getUsersForClient(GetUsersForClientRequest getUsersForClientRequest) throws ApiException {
        ApiResponse<GetUsersDefaultResponse> localVarResp = getUsersForClientWithHttpInfo(getUsersForClientRequest);
        return localVarResp.getData();
    }

    /**
     * List the users within the specified client, optionally filtering the set returned.
     * List the users within the specified client, optionally filtering the set returned.
     * @param getUsersForClientRequest List the users within the specified client, optionally filtering the set returned. (required)
     * @return ApiResponse&lt;GetUsersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUsersDefaultResponse> getUsersForClientWithHttpInfo(GetUsersForClientRequest getUsersForClientRequest) throws ApiException {
        okhttp3.Call localVarCall = getUsersForClientValidateBeforeCall(getUsersForClientRequest, null);
        Type localVarReturnType = new TypeToken<GetUsersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users within the specified client, optionally filtering the set returned. (asynchronously)
     * List the users within the specified client, optionally filtering the set returned.
     * @param getUsersForClientRequest List the users within the specified client, optionally filtering the set returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersForClientAsync(GetUsersForClientRequest getUsersForClientRequest, final ApiCallback<GetUsersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersForClientValidateBeforeCall(getUsersForClientRequest, _callback);
        Type localVarReturnType = new TypeToken<GetUsersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param createUserRequest Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/UpdateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling updateUser(Async)");
        }

        return updateUserCall(createUserRequest, _callback);

    }

    /**
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @param createUserRequest Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse updateUser(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = updateUserWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @param createUserRequest Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> updateUserWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database (asynchronously)
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     * @param createUserRequest Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(CreateUserRequest createUserRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
