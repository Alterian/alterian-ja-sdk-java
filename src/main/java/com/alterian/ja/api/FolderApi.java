/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateFolderRequest;
import com.alterian.ja.model.DeleteFolderRequest;
import com.alterian.ja.model.GetFolderDefaultResponse;
import com.alterian.ja.model.GetFolderRequest;
import com.alterian.ja.model.GetFoldersDefaultResponse;
import com.alterian.ja.model.GetFoldersRequest;
import com.alterian.ja.model.MoveFolderRequest;
import com.alterian.ja.model.RenameFolderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FolderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FolderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FolderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFolder
     * @param createFolderRequest Create a @see(Folder) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderCall(CreateFolderRequest createFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFolderRequest;

        // create path and map variables
        String localVarPath = "/CreateFolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(CreateFolderRequest createFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFolderRequest' is set
        if (createFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'createFolderRequest' when calling createFolder(Async)");
        }

        return createFolderCall(createFolderRequest, _callback);

    }

    /**
     * Create a @see(Folder)
     * Create a @see(Folder)
     * @param createFolderRequest Create a @see(Folder) (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse createFolder(CreateFolderRequest createFolderRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = createFolderWithHttpInfo(createFolderRequest);
        return localVarResp.getData();
    }

    /**
     * Create a @see(Folder)
     * Create a @see(Folder)
     * @param createFolderRequest Create a @see(Folder) (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> createFolderWithHttpInfo(CreateFolderRequest createFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(createFolderRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a @see(Folder) (asynchronously)
     * Create a @see(Folder)
     * @param createFolderRequest Create a @see(Folder) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderAsync(CreateFolderRequest createFolderRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(createFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolder
     * @param deleteFolderRequest Delete a @see(Folder) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderCall(DeleteFolderRequest deleteFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFolderRequest;

        // create path and map variables
        String localVarPath = "/DeleteFolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(DeleteFolderRequest deleteFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteFolderRequest' is set
        if (deleteFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFolderRequest' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(deleteFolderRequest, _callback);

    }

    /**
     * Delete a @see(Folder)
     * Delete a @see(Folder)
     * @param deleteFolderRequest Delete a @see(Folder) (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteFolder(DeleteFolderRequest deleteFolderRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteFolderWithHttpInfo(deleteFolderRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a @see(Folder)
     * Delete a @see(Folder)
     * @param deleteFolderRequest Delete a @see(Folder) (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteFolderWithHttpInfo(DeleteFolderRequest deleteFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(deleteFolderRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a @see(Folder) (asynchronously)
     * Delete a @see(Folder)
     * @param deleteFolderRequest Delete a @see(Folder) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderAsync(DeleteFolderRequest deleteFolderRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(deleteFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolder
     * @param getFolderRequest Get a particular @see(Folder) by it&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderCall(GetFolderRequest getFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFolderRequest;

        // create path and map variables
        String localVarPath = "/GetFolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(GetFolderRequest getFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFolderRequest' is set
        if (getFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'getFolderRequest' when calling getFolder(Async)");
        }

        return getFolderCall(getFolderRequest, _callback);

    }

    /**
     * Get a particular @see(Folder) by it&#39;s ID
     * Get a particular @see(Folder) by it&#39;s ID
     * @param getFolderRequest Get a particular @see(Folder) by it&#39;s ID (required)
     * @return GetFolderDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderDefaultResponse getFolder(GetFolderRequest getFolderRequest) throws ApiException {
        ApiResponse<GetFolderDefaultResponse> localVarResp = getFolderWithHttpInfo(getFolderRequest);
        return localVarResp.getData();
    }

    /**
     * Get a particular @see(Folder) by it&#39;s ID
     * Get a particular @see(Folder) by it&#39;s ID
     * @param getFolderRequest Get a particular @see(Folder) by it&#39;s ID (required)
     * @return ApiResponse&lt;GetFolderDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFolderDefaultResponse> getFolderWithHttpInfo(GetFolderRequest getFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(getFolderRequest, null);
        Type localVarReturnType = new TypeToken<GetFolderDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a particular @see(Folder) by it&#39;s ID (asynchronously)
     * Get a particular @see(Folder) by it&#39;s ID
     * @param getFolderRequest Get a particular @see(Folder) by it&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderAsync(GetFolderRequest getFolderRequest, final ApiCallback<GetFolderDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(getFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFolderDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolders
     * @param getFoldersRequest Obtain a list of @see(Folder)s (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFoldersCall(GetFoldersRequest getFoldersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFoldersRequest;

        // create path and map variables
        String localVarPath = "/GetFolders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFoldersValidateBeforeCall(GetFoldersRequest getFoldersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFoldersRequest' is set
        if (getFoldersRequest == null) {
            throw new ApiException("Missing the required parameter 'getFoldersRequest' when calling getFolders(Async)");
        }

        return getFoldersCall(getFoldersRequest, _callback);

    }

    /**
     * Obtain a list of @see(Folder)s
     * Obtain a list of @see(Folder)s
     * @param getFoldersRequest Obtain a list of @see(Folder)s (required)
     * @return GetFoldersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFoldersDefaultResponse getFolders(GetFoldersRequest getFoldersRequest) throws ApiException {
        ApiResponse<GetFoldersDefaultResponse> localVarResp = getFoldersWithHttpInfo(getFoldersRequest);
        return localVarResp.getData();
    }

    /**
     * Obtain a list of @see(Folder)s
     * Obtain a list of @see(Folder)s
     * @param getFoldersRequest Obtain a list of @see(Folder)s (required)
     * @return ApiResponse&lt;GetFoldersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFoldersDefaultResponse> getFoldersWithHttpInfo(GetFoldersRequest getFoldersRequest) throws ApiException {
        okhttp3.Call localVarCall = getFoldersValidateBeforeCall(getFoldersRequest, null);
        Type localVarReturnType = new TypeToken<GetFoldersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain a list of @see(Folder)s (asynchronously)
     * Obtain a list of @see(Folder)s
     * @param getFoldersRequest Obtain a list of @see(Folder)s (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFoldersAsync(GetFoldersRequest getFoldersRequest, final ApiCallback<GetFoldersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFoldersValidateBeforeCall(getFoldersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFoldersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveFolder
     * @param moveFolderRequest Move a @see(Folder) from one @see(Folder) to another (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveFolderCall(MoveFolderRequest moveFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveFolderRequest;

        // create path and map variables
        String localVarPath = "/MoveFolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveFolderValidateBeforeCall(MoveFolderRequest moveFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moveFolderRequest' is set
        if (moveFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'moveFolderRequest' when calling moveFolder(Async)");
        }

        return moveFolderCall(moveFolderRequest, _callback);

    }

    /**
     * Move a @see(Folder) from one @see(Folder) to another
     * Move a @see(Folder) from one @see(Folder) to another
     * @param moveFolderRequest Move a @see(Folder) from one @see(Folder) to another (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse moveFolder(MoveFolderRequest moveFolderRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = moveFolderWithHttpInfo(moveFolderRequest);
        return localVarResp.getData();
    }

    /**
     * Move a @see(Folder) from one @see(Folder) to another
     * Move a @see(Folder) from one @see(Folder) to another
     * @param moveFolderRequest Move a @see(Folder) from one @see(Folder) to another (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> moveFolderWithHttpInfo(MoveFolderRequest moveFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = moveFolderValidateBeforeCall(moveFolderRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move a @see(Folder) from one @see(Folder) to another (asynchronously)
     * Move a @see(Folder) from one @see(Folder) to another
     * @param moveFolderRequest Move a @see(Folder) from one @see(Folder) to another (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveFolderAsync(MoveFolderRequest moveFolderRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveFolderValidateBeforeCall(moveFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameFolder
     * @param renameFolderRequest Rename a @see(Folder) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameFolderCall(RenameFolderRequest renameFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameFolderRequest;

        // create path and map variables
        String localVarPath = "/RenameFolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameFolderValidateBeforeCall(RenameFolderRequest renameFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'renameFolderRequest' is set
        if (renameFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'renameFolderRequest' when calling renameFolder(Async)");
        }

        return renameFolderCall(renameFolderRequest, _callback);

    }

    /**
     * Rename a @see(Folder)
     * Rename a @see(Folder)
     * @param renameFolderRequest Rename a @see(Folder) (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse renameFolder(RenameFolderRequest renameFolderRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = renameFolderWithHttpInfo(renameFolderRequest);
        return localVarResp.getData();
    }

    /**
     * Rename a @see(Folder)
     * Rename a @see(Folder)
     * @param renameFolderRequest Rename a @see(Folder) (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> renameFolderWithHttpInfo(RenameFolderRequest renameFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = renameFolderValidateBeforeCall(renameFolderRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename a @see(Folder) (asynchronously)
     * Rename a @see(Folder)
     * @param renameFolderRequest Rename a @see(Folder) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameFolderAsync(RenameFolderRequest renameFolderRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameFolderValidateBeforeCall(renameFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
