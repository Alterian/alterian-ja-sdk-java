/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.GetClientSetsRequest;
import com.alterian.ja.model.GetProcessApplicationsDefaultResponse;
import com.alterian.ja.model.GetProcessEntriesDefaultResponse;
import com.alterian.ja.model.GetProcessEntriesRequest;
import com.alterian.ja.model.UpdateProcessEntryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProcessesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProcessApplications
     * @param getClientSetsRequest List all the applications that operate together to form the complete system. This list cannot be modified (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessApplicationsCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSetsRequest;

        // create path and map variables
        String localVarPath = "/GetProcessApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessApplicationsValidateBeforeCall(GetClientSetsRequest getClientSetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSetsRequest' is set
        if (getClientSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSetsRequest' when calling getProcessApplications(Async)");
        }

        return getProcessApplicationsCall(getClientSetsRequest, _callback);

    }

    /**
     * List all the applications that operate together to form the complete system. This list cannot be modified
     * List all the applications that operate together to form the complete system. This list cannot be modified
     * @param getClientSetsRequest List all the applications that operate together to form the complete system. This list cannot be modified (required)
     * @return GetProcessApplicationsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetProcessApplicationsDefaultResponse getProcessApplications(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        ApiResponse<GetProcessApplicationsDefaultResponse> localVarResp = getProcessApplicationsWithHttpInfo(getClientSetsRequest);
        return localVarResp.getData();
    }

    /**
     * List all the applications that operate together to form the complete system. This list cannot be modified
     * List all the applications that operate together to form the complete system. This list cannot be modified
     * @param getClientSetsRequest List all the applications that operate together to form the complete system. This list cannot be modified (required)
     * @return ApiResponse&lt;GetProcessApplicationsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProcessApplicationsDefaultResponse> getProcessApplicationsWithHttpInfo(GetClientSetsRequest getClientSetsRequest) throws ApiException {
        okhttp3.Call localVarCall = getProcessApplicationsValidateBeforeCall(getClientSetsRequest, null);
        Type localVarReturnType = new TypeToken<GetProcessApplicationsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the applications that operate together to form the complete system. This list cannot be modified (asynchronously)
     * List all the applications that operate together to form the complete system. This list cannot be modified
     * @param getClientSetsRequest List all the applications that operate together to form the complete system. This list cannot be modified (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessApplicationsAsync(GetClientSetsRequest getClientSetsRequest, final ApiCallback<GetProcessApplicationsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessApplicationsValidateBeforeCall(getClientSetsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetProcessApplicationsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcessEntries
     * @param getProcessEntriesRequest Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessEntriesCall(GetProcessEntriesRequest getProcessEntriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getProcessEntriesRequest;

        // create path and map variables
        String localVarPath = "/GetProcessEntries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessEntriesValidateBeforeCall(GetProcessEntriesRequest getProcessEntriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getProcessEntriesRequest' is set
        if (getProcessEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'getProcessEntriesRequest' when calling getProcessEntries(Async)");
        }

        return getProcessEntriesCall(getProcessEntriesRequest, _callback);

    }

    /**
     * Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity
     * Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity
     * @param getProcessEntriesRequest Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity (required)
     * @return GetProcessEntriesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetProcessEntriesDefaultResponse getProcessEntries(GetProcessEntriesRequest getProcessEntriesRequest) throws ApiException {
        ApiResponse<GetProcessEntriesDefaultResponse> localVarResp = getProcessEntriesWithHttpInfo(getProcessEntriesRequest);
        return localVarResp.getData();
    }

    /**
     * Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity
     * Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity
     * @param getProcessEntriesRequest Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity (required)
     * @return ApiResponse&lt;GetProcessEntriesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProcessEntriesDefaultResponse> getProcessEntriesWithHttpInfo(GetProcessEntriesRequest getProcessEntriesRequest) throws ApiException {
        okhttp3.Call localVarCall = getProcessEntriesValidateBeforeCall(getProcessEntriesRequest, null);
        Type localVarReturnType = new TypeToken<GetProcessEntriesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity (asynchronously)
     * Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity
     * @param getProcessEntriesRequest Get the list of where each @see(ALProcessApplication) is currently located and it&#39;s last activity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessEntriesAsync(GetProcessEntriesRequest getProcessEntriesRequest, final ApiCallback<GetProcessEntriesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessEntriesValidateBeforeCall(getProcessEntriesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetProcessEntriesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProcessEntry
     * @param updateProcessEntryRequest Modify the location or settings of a particular instance of a @see(ALProcessApplication) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessEntryCall(UpdateProcessEntryRequest updateProcessEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProcessEntryRequest;

        // create path and map variables
        String localVarPath = "/UpdateProcessEntry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProcessEntryValidateBeforeCall(UpdateProcessEntryRequest updateProcessEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateProcessEntryRequest' is set
        if (updateProcessEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'updateProcessEntryRequest' when calling updateProcessEntry(Async)");
        }

        return updateProcessEntryCall(updateProcessEntryRequest, _callback);

    }

    /**
     * Modify the location or settings of a particular instance of a @see(ALProcessApplication)
     * Modify the location or settings of a particular instance of a @see(ALProcessApplication)
     * @param updateProcessEntryRequest Modify the location or settings of a particular instance of a @see(ALProcessApplication) (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse updateProcessEntry(UpdateProcessEntryRequest updateProcessEntryRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = updateProcessEntryWithHttpInfo(updateProcessEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Modify the location or settings of a particular instance of a @see(ALProcessApplication)
     * Modify the location or settings of a particular instance of a @see(ALProcessApplication)
     * @param updateProcessEntryRequest Modify the location or settings of a particular instance of a @see(ALProcessApplication) (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> updateProcessEntryWithHttpInfo(UpdateProcessEntryRequest updateProcessEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProcessEntryValidateBeforeCall(updateProcessEntryRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the location or settings of a particular instance of a @see(ALProcessApplication) (asynchronously)
     * Modify the location or settings of a particular instance of a @see(ALProcessApplication)
     * @param updateProcessEntryRequest Modify the location or settings of a particular instance of a @see(ALProcessApplication) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessEntryAsync(UpdateProcessEntryRequest updateProcessEntryRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProcessEntryValidateBeforeCall(updateProcessEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
