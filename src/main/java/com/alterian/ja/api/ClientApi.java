/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiCallback;
import com.alterian.ja.ApiClient;
import com.alterian.ja.ApiException;
import com.alterian.ja.ApiResponse;
import com.alterian.ja.Configuration;
import com.alterian.ja.Pair;
import com.alterian.ja.ProgressRequestBody;
import com.alterian.ja.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateClientRequest;
import com.alterian.ja.model.DeleteClientRequest;
import com.alterian.ja.model.DisableClientRequest;
import com.alterian.ja.model.GetBrandsDefaultResponse;
import com.alterian.ja.model.GetClientSettingsDefaultResponse;
import com.alterian.ja.model.GetClientSettingsRequest;
import com.alterian.ja.model.GetClientsRequest;
import com.alterian.ja.model.GetCurrentClientDefaultResponse;
import com.alterian.ja.model.UpdateClientSettingsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createClient
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientCall(CreateClientRequest createClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClientRequest;

        // create path and map variables
        String localVarPath = "/CreateClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClientValidateBeforeCall(CreateClientRequest createClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createClientRequest' is set
        if (createClientRequest == null) {
            throw new ApiException("Missing the required parameter 'createClientRequest' when calling createClient(Async)");
        }

        return createClientCall(createClientRequest, _callback);

    }

    /**
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users. (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse createClient(CreateClientRequest createClientRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = createClientWithHttpInfo(createClientRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users. (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> createClientWithHttpInfo(CreateClientRequest createClientRequest) throws ApiException {
        okhttp3.Call localVarCall = createClientValidateBeforeCall(createClientRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users. (asynchronously)
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientAsync(CreateClientRequest createClientRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClientValidateBeforeCall(createClientRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createClientEx
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientExCall(CreateClientRequest createClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClientRequest;

        // create path and map variables
        String localVarPath = "/CreateClientEx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClientExValidateBeforeCall(CreateClientRequest createClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createClientRequest' is set
        if (createClientRequest == null) {
            throw new ApiException("Missing the required parameter 'createClientRequest' when calling createClientEx(Async)");
        }

        return createClientExCall(createClientRequest, _callback);

    }

    /**
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns. (required)
     * @return CreateClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateClientDefaultResponse createClientEx(CreateClientRequest createClientRequest) throws ApiException {
        ApiResponse<CreateClientDefaultResponse> localVarResp = createClientExWithHttpInfo(createClientRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns. (required)
     * @return ApiResponse&lt;CreateClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClientDefaultResponse> createClientExWithHttpInfo(CreateClientRequest createClientRequest) throws ApiException {
        okhttp3.Call localVarCall = createClientExValidateBeforeCall(createClientRequest, null);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns. (asynchronously)
     * Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns.
     * @param createClientRequest Create a new @see(ALClient), with it&#39;s own unique database and set of users.             Additionally creates an example user / group with relevant permissions to design campaign factory campaigns. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClientExAsync(CreateClientRequest createClientRequest, final ApiCallback<CreateClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClientExValidateBeforeCall(createClientRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteClient
     * @param deleteClientRequest Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClientCall(DeleteClientRequest deleteClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteClientRequest;

        // create path and map variables
        String localVarPath = "/DeleteClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClientValidateBeforeCall(DeleteClientRequest deleteClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteClientRequest' is set
        if (deleteClientRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteClientRequest' when calling deleteClient(Async)");
        }

        return deleteClientCall(deleteClientRequest, _callback);

    }

    /**
     * Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @param deleteClientRequest Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse deleteClient(DeleteClientRequest deleteClientRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = deleteClientWithHttpInfo(deleteClientRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @param deleteClientRequest Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> deleteClientWithHttpInfo(DeleteClientRequest deleteClientRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteClientValidateBeforeCall(deleteClientRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this. (asynchronously)
     * Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this.
     * @param deleteClientRequest Deletes a @see(ALClient).  Removes the client&#39;s database.  Note that the client must be disabled with @see(DisableClient) before calling this. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClientAsync(DeleteClientRequest deleteClientRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClientValidateBeforeCall(deleteClientRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableClient
     * @param disableClientRequest Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableClientCall(DisableClientRequest disableClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableClientRequest;

        // create path and map variables
        String localVarPath = "/DisableClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableClientValidateBeforeCall(DisableClientRequest disableClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disableClientRequest' is set
        if (disableClientRequest == null) {
            throw new ApiException("Missing the required parameter 'disableClientRequest' when calling disableClient(Async)");
        }

        return disableClientCall(disableClientRequest, _callback);

    }

    /**
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @param disableClientRequest Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse disableClient(DisableClientRequest disableClientRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = disableClientWithHttpInfo(disableClientRequest);
        return localVarResp.getData();
    }

    /**
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @param disableClientRequest Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> disableClientWithHttpInfo(DisableClientRequest disableClientRequest) throws ApiException {
        okhttp3.Call localVarCall = disableClientValidateBeforeCall(disableClientRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc. (asynchronously)
     * Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc.
     * @param disableClientRequest Mark an individual @see(ALClient) as disabled. Disabled clients will not allow users to log on, documents will not be processed etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableClientAsync(DisableClientRequest disableClientRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableClientValidateBeforeCall(disableClientRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableClient
     * @param disableClientRequest Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableClientCall(DisableClientRequest disableClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableClientRequest;

        // create path and map variables
        String localVarPath = "/EnableClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableClientValidateBeforeCall(DisableClientRequest disableClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disableClientRequest' is set
        if (disableClientRequest == null) {
            throw new ApiException("Missing the required parameter 'disableClientRequest' when calling enableClient(Async)");
        }

        return enableClientCall(disableClientRequest, _callback);

    }

    /**
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @param disableClientRequest Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc. (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse enableClient(DisableClientRequest disableClientRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = enableClientWithHttpInfo(disableClientRequest);
        return localVarResp.getData();
    }

    /**
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @param disableClientRequest Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc. (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> enableClientWithHttpInfo(DisableClientRequest disableClientRequest) throws ApiException {
        okhttp3.Call localVarCall = enableClientValidateBeforeCall(disableClientRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc. (asynchronously)
     * Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc.
     * @param disableClientRequest Mark an individual @see(ALClient) as enabled. Enabled clients allow users to log on, documents will be processed etc. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableClientAsync(DisableClientRequest disableClientRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableClientValidateBeforeCall(disableClientRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClientSettings
     * @param getClientSettingsRequest Returns the settings for the specified Client (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientSettingsCall(GetClientSettingsRequest getClientSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientSettingsRequest;

        // create path and map variables
        String localVarPath = "/GetClientSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientSettingsValidateBeforeCall(GetClientSettingsRequest getClientSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientSettingsRequest' is set
        if (getClientSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientSettingsRequest' when calling getClientSettings(Async)");
        }

        return getClientSettingsCall(getClientSettingsRequest, _callback);

    }

    /**
     * Returns the settings for the specified Client
     * Returns the settings for the specified Client
     * @param getClientSettingsRequest Returns the settings for the specified Client (required)
     * @return GetClientSettingsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetClientSettingsDefaultResponse getClientSettings(GetClientSettingsRequest getClientSettingsRequest) throws ApiException {
        ApiResponse<GetClientSettingsDefaultResponse> localVarResp = getClientSettingsWithHttpInfo(getClientSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the settings for the specified Client
     * Returns the settings for the specified Client
     * @param getClientSettingsRequest Returns the settings for the specified Client (required)
     * @return ApiResponse&lt;GetClientSettingsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetClientSettingsDefaultResponse> getClientSettingsWithHttpInfo(GetClientSettingsRequest getClientSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = getClientSettingsValidateBeforeCall(getClientSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetClientSettingsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the settings for the specified Client (asynchronously)
     * Returns the settings for the specified Client
     * @param getClientSettingsRequest Returns the settings for the specified Client (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientSettingsAsync(GetClientSettingsRequest getClientSettingsRequest, final ApiCallback<GetClientSettingsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientSettingsValidateBeforeCall(getClientSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetClientSettingsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClients
     * @param getClientsRequest Return a list of clients that match the supplied (optional) filters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientsCall(GetClientsRequest getClientsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getClientsRequest;

        // create path and map variables
        String localVarPath = "/GetClients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientsValidateBeforeCall(GetClientsRequest getClientsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getClientsRequest' is set
        if (getClientsRequest == null) {
            throw new ApiException("Missing the required parameter 'getClientsRequest' when calling getClients(Async)");
        }

        return getClientsCall(getClientsRequest, _callback);

    }

    /**
     * Return a list of clients that match the supplied (optional) filters.
     * Return a list of clients that match the supplied (optional) filters.
     * @param getClientsRequest Return a list of clients that match the supplied (optional) filters. (required)
     * @return GetBrandsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetBrandsDefaultResponse getClients(GetClientsRequest getClientsRequest) throws ApiException {
        ApiResponse<GetBrandsDefaultResponse> localVarResp = getClientsWithHttpInfo(getClientsRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of clients that match the supplied (optional) filters.
     * Return a list of clients that match the supplied (optional) filters.
     * @param getClientsRequest Return a list of clients that match the supplied (optional) filters. (required)
     * @return ApiResponse&lt;GetBrandsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBrandsDefaultResponse> getClientsWithHttpInfo(GetClientsRequest getClientsRequest) throws ApiException {
        okhttp3.Call localVarCall = getClientsValidateBeforeCall(getClientsRequest, null);
        Type localVarReturnType = new TypeToken<GetBrandsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of clients that match the supplied (optional) filters. (asynchronously)
     * Return a list of clients that match the supplied (optional) filters.
     * @param getClientsRequest Return a list of clients that match the supplied (optional) filters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientsAsync(GetClientsRequest getClientsRequest, final ApiCallback<GetBrandsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientsValidateBeforeCall(getClientsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetBrandsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentClient
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentClientCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetCurrentClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentClientValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentClientCall(_callback);

    }

    /**
     * Returns back the client for the current token
     * Returns back the client for the current token
     * @return GetCurrentClientDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentClientDefaultResponse getCurrentClient() throws ApiException {
        ApiResponse<GetCurrentClientDefaultResponse> localVarResp = getCurrentClientWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns back the client for the current token
     * Returns back the client for the current token
     * @return ApiResponse&lt;GetCurrentClientDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCurrentClientDefaultResponse> getCurrentClientWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentClientValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetCurrentClientDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the client for the current token (asynchronously)
     * Returns back the client for the current token
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentClientAsync(final ApiCallback<GetCurrentClientDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentClientValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetCurrentClientDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientSettings
     * @param updateClientSettingsRequest Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientSettingsCall(UpdateClientSettingsRequest updateClientSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClientSettingsRequest;

        // create path and map variables
        String localVarPath = "/UpdateClientSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientSettingsValidateBeforeCall(UpdateClientSettingsRequest updateClientSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateClientSettingsRequest' is set
        if (updateClientSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClientSettingsRequest' when calling updateClientSettings(Async)");
        }

        return updateClientSettingsCall(updateClientSettingsRequest, _callback);

    }

    /**
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @param updateClientSettingsRequest Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request (required)
     * @return AUTHChangePasswordDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AUTHChangePasswordDefaultResponse updateClientSettings(UpdateClientSettingsRequest updateClientSettingsRequest) throws ApiException {
        ApiResponse<AUTHChangePasswordDefaultResponse> localVarResp = updateClientSettingsWithHttpInfo(updateClientSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @param updateClientSettingsRequest Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request (required)
     * @return ApiResponse&lt;AUTHChangePasswordDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUTHChangePasswordDefaultResponse> updateClientSettingsWithHttpInfo(UpdateClientSettingsRequest updateClientSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateClientSettingsValidateBeforeCall(updateClientSettingsRequest, null);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request (asynchronously)
     * Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request
     * @param updateClientSettingsRequest Updates the settings for the specified client. Warning: This API deletes any settings not included in the update request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientSettingsAsync(UpdateClientSettingsRequest updateClientSettingsRequest, final ApiCallback<AUTHChangePasswordDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientSettingsValidateBeforeCall(updateClientSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<AUTHChangePasswordDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
