/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.EMClient;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * Provides a download mapping into the EM system to a specific EM client and user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EMDownloadMapping {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_KEY_COLUMN_ID = "KeyColumnId";
  @SerializedName(SERIALIZED_NAME_KEY_COLUMN_ID)
  private Integer keyColumnId;

  public static final String SERIALIZED_NAME_KEY_COLUMN_NAME_EX = "KeyColumnNameEx";
  @SerializedName(SERIALIZED_NAME_KEY_COLUMN_NAME_EX)
  private String keyColumnNameEx;

  public static final String SERIALIZED_NAME_RESPONSE_TABLE = "ResponseTable";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TABLE)
  private String responseTable;

  public static final String SERIALIZED_NAME_CONTACT_TABLE = "ContactTable";
  @SerializedName(SERIALIZED_NAME_CONTACT_TABLE)
  private String contactTable;

  public static final String SERIALIZED_NAME_EM_PRIMARYKEY_ID = "EMPrimarykeyId";
  @SerializedName(SERIALIZED_NAME_EM_PRIMARYKEY_ID)
  private Integer emPrimarykeyId;

  public static final String SERIALIZED_NAME_EM_U_N_C_OUTPUT_LOCATION = "EMUNCOutputLocation";
  @SerializedName(SERIALIZED_NAME_EM_U_N_C_OUTPUT_LOCATION)
  private String emUNCOutputLocation;

  public static final String SERIALIZED_NAME_EM_PRIMARY_KEY_TYPE = "EMPrimaryKeyType";
  @SerializedName(SERIALIZED_NAME_EM_PRIMARY_KEY_TYPE)
  private Integer emPrimaryKeyType;

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "DatasourceId";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private Integer datasourceId;

  public static final String SERIALIZED_NAME_EM_CLIENT = "EMClient";
  @SerializedName(SERIALIZED_NAME_EM_CLIENT)
  private EMClient emClient;

  public static final String SERIALIZED_NAME_EM_CLIENT_I_D = "EMClientID";
  @SerializedName(SERIALIZED_NAME_EM_CLIENT_I_D)
  private Integer emClientID;

  public static final String SERIALIZED_NAME_DATASOURCE_NAME = "DatasourceName";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME)
  private String datasourceName;

  public static final String SERIALIZED_NAME_OWNER_I_D = "OwnerID";
  @SerializedName(SERIALIZED_NAME_OWNER_I_D)
  private Integer ownerID;

  public static final String SERIALIZED_NAME_CAN_EDIT = "CanEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Integer canEdit;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_EM_PRIMARY_KEY_NAME = "EmPrimaryKeyName";
  @SerializedName(SERIALIZED_NAME_EM_PRIMARY_KEY_NAME)
  private String emPrimaryKeyName;

  public static final String SERIALIZED_NAME_GD_C_TABLE = "GDCTable";
  @SerializedName(SERIALIZED_NAME_GD_C_TABLE)
  private String gdCTable;

  public static final String SERIALIZED_NAME_PREFERENCES_TABLE = "PreferencesTable";
  @SerializedName(SERIALIZED_NAME_PREFERENCES_TABLE)
  private String preferencesTable;

  public EMDownloadMapping() {
  }

  public EMDownloadMapping ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Unique ID of this mapping
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public EMDownloadMapping name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of this mapping
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EMDownloadMapping keyColumnId(Integer keyColumnId) {
    this.keyColumnId = keyColumnId;
    return this;
  }

   /**
   * Key column Id associated with this client
   * @return keyColumnId
  **/
  @javax.annotation.Nullable
  public Integer getKeyColumnId() {
    return keyColumnId;
  }

  public void setKeyColumnId(Integer keyColumnId) {
    this.keyColumnId = keyColumnId;
  }


  public EMDownloadMapping keyColumnNameEx(String keyColumnNameEx) {
    this.keyColumnNameEx = keyColumnNameEx;
    return this;
  }

   /**
   * Key column NameEx - readonly
   * @return keyColumnNameEx
  **/
  @javax.annotation.Nullable
  public String getKeyColumnNameEx() {
    return keyColumnNameEx;
  }

  public void setKeyColumnNameEx(String keyColumnNameEx) {
    this.keyColumnNameEx = keyColumnNameEx;
  }


  public EMDownloadMapping responseTable(String responseTable) {
    this.responseTable = responseTable;
    return this;
  }

   /**
   * Name of the response table
   * @return responseTable
  **/
  @javax.annotation.Nullable
  public String getResponseTable() {
    return responseTable;
  }

  public void setResponseTable(String responseTable) {
    this.responseTable = responseTable;
  }


  public EMDownloadMapping contactTable(String contactTable) {
    this.contactTable = contactTable;
    return this;
  }

   /**
   * Name of the contact table
   * @return contactTable
  **/
  @javax.annotation.Nullable
  public String getContactTable() {
    return contactTable;
  }

  public void setContactTable(String contactTable) {
    this.contactTable = contactTable;
  }


  public EMDownloadMapping emPrimarykeyId(Integer emPrimarykeyId) {
    this.emPrimarykeyId = emPrimarykeyId;
    return this;
  }

   /**
   * Primary key for EM to which this EM Client is mapped
   * @return emPrimarykeyId
  **/
  @javax.annotation.Nullable
  public Integer getEmPrimarykeyId() {
    return emPrimarykeyId;
  }

  public void setEmPrimarykeyId(Integer emPrimarykeyId) {
    this.emPrimarykeyId = emPrimarykeyId;
  }


  public EMDownloadMapping emUNCOutputLocation(String emUNCOutputLocation) {
    this.emUNCOutputLocation = emUNCOutputLocation;
    return this;
  }

   /**
   * UNC path for hosted EM\\CM systems
   * @return emUNCOutputLocation
  **/
  @javax.annotation.Nullable
  public String getEmUNCOutputLocation() {
    return emUNCOutputLocation;
  }

  public void setEmUNCOutputLocation(String emUNCOutputLocation) {
    this.emUNCOutputLocation = emUNCOutputLocation;
  }


  public EMDownloadMapping emPrimaryKeyType(Integer emPrimaryKeyType) {
    this.emPrimaryKeyType = emPrimaryKeyType;
    return this;
  }

   /**
   * EM&#39;s primary key type
   * @return emPrimaryKeyType
  **/
  @javax.annotation.Nullable
  public Integer getEmPrimaryKeyType() {
    return emPrimaryKeyType;
  }

  public void setEmPrimaryKeyType(Integer emPrimaryKeyType) {
    this.emPrimaryKeyType = emPrimaryKeyType;
  }


  public EMDownloadMapping datasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

   /**
   * Datasource Id associated with this client
   * @return datasourceId
  **/
  @javax.annotation.Nullable
  public Integer getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
  }


  public EMDownloadMapping emClient(EMClient emClient) {
    this.emClient = emClient;
    return this;
  }

   /**
   * Get emClient
   * @return emClient
  **/
  @javax.annotation.Nullable
  public EMClient getEmClient() {
    return emClient;
  }

  public void setEmClient(EMClient emClient) {
    this.emClient = emClient;
  }


  public EMDownloadMapping emClientID(Integer emClientID) {
    this.emClientID = emClientID;
    return this;
  }

   /**
   * EM Client ID of this mapping
   * @return emClientID
  **/
  @javax.annotation.Nullable
  public Integer getEmClientID() {
    return emClientID;
  }

  public void setEmClientID(Integer emClientID) {
    this.emClientID = emClientID;
  }


  public EMDownloadMapping datasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
    return this;
  }

   /**
   * Datasource Name - readonly
   * @return datasourceName
  **/
  @javax.annotation.Nullable
  public String getDatasourceName() {
    return datasourceName;
  }

  public void setDatasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
  }


  public EMDownloadMapping ownerID(Integer ownerID) {
    this.ownerID = ownerID;
    return this;
  }

   /**
   * The owner\\creator of this EMMapping
   * @return ownerID
  **/
  @javax.annotation.Nullable
  public Integer getOwnerID() {
    return ownerID;
  }

  public void setOwnerID(Integer ownerID) {
    this.ownerID = ownerID;
  }


  public EMDownloadMapping canEdit(Integer canEdit) {
    this.canEdit = canEdit;
    return this;
  }

   /**
   * Does the Mapping have edit permissions for this user - cannot set this value using this property
   * @return canEdit
  **/
  @javax.annotation.Nullable
  public Integer getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Integer canEdit) {
    this.canEdit = canEdit;
  }


  public EMDownloadMapping isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Is mapping enabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public EMDownloadMapping emPrimaryKeyName(String emPrimaryKeyName) {
    this.emPrimaryKeyName = emPrimaryKeyName;
    return this;
  }

   /**
   * EM Primary Key Name
   * @return emPrimaryKeyName
  **/
  @javax.annotation.Nullable
  public String getEmPrimaryKeyName() {
    return emPrimaryKeyName;
  }

  public void setEmPrimaryKeyName(String emPrimaryKeyName) {
    this.emPrimaryKeyName = emPrimaryKeyName;
  }


  public EMDownloadMapping gdCTable(String gdCTable) {
    this.gdCTable = gdCTable;
    return this;
  }

   /**
   * Name of the table which will store data collection information for this primary key
   * @return gdCTable
  **/
  @javax.annotation.Nullable
  public String getGdCTable() {
    return gdCTable;
  }

  public void setGdCTable(String gdCTable) {
    this.gdCTable = gdCTable;
  }


  public EMDownloadMapping preferencesTable(String preferencesTable) {
    this.preferencesTable = preferencesTable;
    return this;
  }

   /**
   * Name of the table which will store Preference OptIn\\OptOut data
   * @return preferencesTable
  **/
  @javax.annotation.Nullable
  public String getPreferencesTable() {
    return preferencesTable;
  }

  public void setPreferencesTable(String preferencesTable) {
    this.preferencesTable = preferencesTable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMDownloadMapping emDownloadMapping = (EMDownloadMapping) o;
    return Objects.equals(this.ID, emDownloadMapping.ID) &&
        Objects.equals(this.name, emDownloadMapping.name) &&
        Objects.equals(this.keyColumnId, emDownloadMapping.keyColumnId) &&
        Objects.equals(this.keyColumnNameEx, emDownloadMapping.keyColumnNameEx) &&
        Objects.equals(this.responseTable, emDownloadMapping.responseTable) &&
        Objects.equals(this.contactTable, emDownloadMapping.contactTable) &&
        Objects.equals(this.emPrimarykeyId, emDownloadMapping.emPrimarykeyId) &&
        Objects.equals(this.emUNCOutputLocation, emDownloadMapping.emUNCOutputLocation) &&
        Objects.equals(this.emPrimaryKeyType, emDownloadMapping.emPrimaryKeyType) &&
        Objects.equals(this.datasourceId, emDownloadMapping.datasourceId) &&
        Objects.equals(this.emClient, emDownloadMapping.emClient) &&
        Objects.equals(this.emClientID, emDownloadMapping.emClientID) &&
        Objects.equals(this.datasourceName, emDownloadMapping.datasourceName) &&
        Objects.equals(this.ownerID, emDownloadMapping.ownerID) &&
        Objects.equals(this.canEdit, emDownloadMapping.canEdit) &&
        Objects.equals(this.isEnabled, emDownloadMapping.isEnabled) &&
        Objects.equals(this.emPrimaryKeyName, emDownloadMapping.emPrimaryKeyName) &&
        Objects.equals(this.gdCTable, emDownloadMapping.gdCTable) &&
        Objects.equals(this.preferencesTable, emDownloadMapping.preferencesTable);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, keyColumnId, keyColumnNameEx, responseTable, contactTable, emPrimarykeyId, emUNCOutputLocation, emPrimaryKeyType, datasourceId, emClient, emClientID, datasourceName, ownerID, canEdit, isEnabled, emPrimaryKeyName, gdCTable, preferencesTable);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMDownloadMapping {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    keyColumnId: ").append(toIndentedString(keyColumnId)).append("\n");
    sb.append("    keyColumnNameEx: ").append(toIndentedString(keyColumnNameEx)).append("\n");
    sb.append("    responseTable: ").append(toIndentedString(responseTable)).append("\n");
    sb.append("    contactTable: ").append(toIndentedString(contactTable)).append("\n");
    sb.append("    emPrimarykeyId: ").append(toIndentedString(emPrimarykeyId)).append("\n");
    sb.append("    emUNCOutputLocation: ").append(toIndentedString(emUNCOutputLocation)).append("\n");
    sb.append("    emPrimaryKeyType: ").append(toIndentedString(emPrimaryKeyType)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    emClient: ").append(toIndentedString(emClient)).append("\n");
    sb.append("    emClientID: ").append(toIndentedString(emClientID)).append("\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    ownerID: ").append(toIndentedString(ownerID)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    emPrimaryKeyName: ").append(toIndentedString(emPrimaryKeyName)).append("\n");
    sb.append("    gdCTable: ").append(toIndentedString(gdCTable)).append("\n");
    sb.append("    preferencesTable: ").append(toIndentedString(preferencesTable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("KeyColumnId");
    openapiFields.add("KeyColumnNameEx");
    openapiFields.add("ResponseTable");
    openapiFields.add("ContactTable");
    openapiFields.add("EMPrimarykeyId");
    openapiFields.add("EMUNCOutputLocation");
    openapiFields.add("EMPrimaryKeyType");
    openapiFields.add("DatasourceId");
    openapiFields.add("EMClient");
    openapiFields.add("EMClientID");
    openapiFields.add("DatasourceName");
    openapiFields.add("OwnerID");
    openapiFields.add("CanEdit");
    openapiFields.add("IsEnabled");
    openapiFields.add("EmPrimaryKeyName");
    openapiFields.add("GDCTable");
    openapiFields.add("PreferencesTable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMDownloadMapping
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMDownloadMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMDownloadMapping is not found in the empty JSON string", EMDownloadMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMDownloadMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMDownloadMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("KeyColumnNameEx") != null && !jsonObj.get("KeyColumnNameEx").isJsonNull()) && !jsonObj.get("KeyColumnNameEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeyColumnNameEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeyColumnNameEx").toString()));
      }
      if ((jsonObj.get("ResponseTable") != null && !jsonObj.get("ResponseTable").isJsonNull()) && !jsonObj.get("ResponseTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResponseTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResponseTable").toString()));
      }
      if ((jsonObj.get("ContactTable") != null && !jsonObj.get("ContactTable").isJsonNull()) && !jsonObj.get("ContactTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactTable").toString()));
      }
      if ((jsonObj.get("EMUNCOutputLocation") != null && !jsonObj.get("EMUNCOutputLocation").isJsonNull()) && !jsonObj.get("EMUNCOutputLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EMUNCOutputLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EMUNCOutputLocation").toString()));
      }
      // validate the optional field `EMClient`
      if (jsonObj.get("EMClient") != null && !jsonObj.get("EMClient").isJsonNull()) {
        EMClient.validateJsonElement(jsonObj.get("EMClient"));
      }
      if ((jsonObj.get("DatasourceName") != null && !jsonObj.get("DatasourceName").isJsonNull()) && !jsonObj.get("DatasourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DatasourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DatasourceName").toString()));
      }
      if ((jsonObj.get("EmPrimaryKeyName") != null && !jsonObj.get("EmPrimaryKeyName").isJsonNull()) && !jsonObj.get("EmPrimaryKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmPrimaryKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmPrimaryKeyName").toString()));
      }
      if ((jsonObj.get("GDCTable") != null && !jsonObj.get("GDCTable").isJsonNull()) && !jsonObj.get("GDCTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GDCTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GDCTable").toString()));
      }
      if ((jsonObj.get("PreferencesTable") != null && !jsonObj.get("PreferencesTable").isJsonNull()) && !jsonObj.get("PreferencesTable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreferencesTable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreferencesTable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMDownloadMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMDownloadMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMDownloadMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMDownloadMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<EMDownloadMapping>() {
           @Override
           public void write(JsonWriter out, EMDownloadMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMDownloadMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMDownloadMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMDownloadMapping
  * @throws IOException if the JSON string is invalid with respect to EMDownloadMapping
  */
  public static EMDownloadMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMDownloadMapping.class);
  }

 /**
  * Convert an instance of EMDownloadMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

