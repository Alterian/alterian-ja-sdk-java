/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * CreateWebSpoonRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class CreateWebSpoonRequest {
  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE = "AllowMultiple";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE)
  private Boolean allowMultiple;

  public static final String SERIALIZED_NAME_J_A_U_R_L = "JAURL";
  @SerializedName(SERIALIZED_NAME_J_A_U_R_L)
  private String JAURL;

  public static final String SERIALIZED_NAME_JO_URL = "JOUrl";
  @SerializedName(SERIALIZED_NAME_JO_URL)
  private String joUrl;

  public static final String SERIALIZED_NAME_JO_USER = "JOUser";
  @SerializedName(SERIALIZED_NAME_JO_USER)
  private String joUser;

  public CreateWebSpoonRequest() {
  }

  public CreateWebSpoonRequest allowMultiple(Boolean allowMultiple) {
    this.allowMultiple = allowMultiple;
    return this;
  }

   /**
   * If false, the system will error if there is already a task for the user
   * @return allowMultiple
  **/
  @javax.annotation.Nullable
  public Boolean getAllowMultiple() {
    return allowMultiple;
  }

  public void setAllowMultiple(Boolean allowMultiple) {
    this.allowMultiple = allowMultiple;
  }


  public CreateWebSpoonRequest JAURL(String JAURL) {
    this.JAURL = JAURL;
    return this;
  }

   /**
   * Your analytics server URL, like https://cx-dev-v01.alterian.net
   * @return JAURL
  **/
  @javax.annotation.Nullable
  public String getJAURL() {
    return JAURL;
  }

  public void setJAURL(String JAURL) {
    this.JAURL = JAURL;
  }


  public CreateWebSpoonRequest joUrl(String joUrl) {
    this.joUrl = joUrl;
    return this;
  }

   /**
   * The orchestration instance URL to which your analytics system is connected; this is normally something like https://dde.alterian.net
   * @return joUrl
  **/
  @javax.annotation.Nullable
  public String getJoUrl() {
    return joUrl;
  }

  public void setJoUrl(String joUrl) {
    this.joUrl = joUrl;
  }


  public CreateWebSpoonRequest joUser(String joUser) {
    this.joUser = joUser;
    return this;
  }

   /**
   * Your analytics\\orchestration user (note, these should match but, if they do not, it must be the orchestration user name)
   * @return joUser
  **/
  @javax.annotation.Nullable
  public String getJoUser() {
    return joUser;
  }

  public void setJoUser(String joUser) {
    this.joUser = joUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWebSpoonRequest createWebSpoonRequest = (CreateWebSpoonRequest) o;
    return Objects.equals(this.allowMultiple, createWebSpoonRequest.allowMultiple) &&
        Objects.equals(this.JAURL, createWebSpoonRequest.JAURL) &&
        Objects.equals(this.joUrl, createWebSpoonRequest.joUrl) &&
        Objects.equals(this.joUser, createWebSpoonRequest.joUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultiple, JAURL, joUrl, joUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWebSpoonRequest {\n");
    sb.append("    allowMultiple: ").append(toIndentedString(allowMultiple)).append("\n");
    sb.append("    JAURL: ").append(toIndentedString(JAURL)).append("\n");
    sb.append("    joUrl: ").append(toIndentedString(joUrl)).append("\n");
    sb.append("    joUser: ").append(toIndentedString(joUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowMultiple");
    openapiFields.add("JAURL");
    openapiFields.add("JOUrl");
    openapiFields.add("JOUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateWebSpoonRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWebSpoonRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWebSpoonRequest is not found in the empty JSON string", CreateWebSpoonRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWebSpoonRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWebSpoonRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("JAURL") != null && !jsonObj.get("JAURL").isJsonNull()) && !jsonObj.get("JAURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JAURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JAURL").toString()));
      }
      if ((jsonObj.get("JOUrl") != null && !jsonObj.get("JOUrl").isJsonNull()) && !jsonObj.get("JOUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JOUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JOUrl").toString()));
      }
      if ((jsonObj.get("JOUser") != null && !jsonObj.get("JOUser").isJsonNull()) && !jsonObj.get("JOUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JOUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JOUser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWebSpoonRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWebSpoonRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWebSpoonRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWebSpoonRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWebSpoonRequest>() {
           @Override
           public void write(JsonWriter out, CreateWebSpoonRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWebSpoonRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateWebSpoonRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateWebSpoonRequest
  * @throws IOException if the JSON string is invalid with respect to CreateWebSpoonRequest
  */
  public static CreateWebSpoonRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWebSpoonRequest.class);
  }

 /**
  * Convert an instance of CreateWebSpoonRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

