/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMGroup {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_PARENT_I_D = "ParentID";
  @SerializedName(SERIALIZED_NAME_PARENT_I_D)
  private Integer parentID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ISOLATE_RECIPIENTS = "IsolateRecipients";
  @SerializedName(SERIALIZED_NAME_ISOLATE_RECIPIENTS)
  private Boolean isolateRecipients;

  public static final String SERIALIZED_NAME_FORCE_ISOLATE_RECIPIENTS = "ForceIsolateRecipients";
  @SerializedName(SERIALIZED_NAME_FORCE_ISOLATE_RECIPIENTS)
  private Boolean forceIsolateRecipients;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_USERS = "Users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private Object users;

  public DMGroup() {
  }

  public DMGroup ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public DMGroup parentID(Integer parentID) {
    this.parentID = parentID;
    return this;
  }

   /**
   * 
   * @return parentID
  **/
  @javax.annotation.Nullable
  public Integer getParentID() {
    return parentID;
  }

  public void setParentID(Integer parentID) {
    this.parentID = parentID;
  }


  public DMGroup name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DMGroup description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DMGroup isolateRecipients(Boolean isolateRecipients) {
    this.isolateRecipients = isolateRecipients;
    return this;
  }

   /**
   * 
   * @return isolateRecipients
  **/
  @javax.annotation.Nullable
  public Boolean getIsolateRecipients() {
    return isolateRecipients;
  }

  public void setIsolateRecipients(Boolean isolateRecipients) {
    this.isolateRecipients = isolateRecipients;
  }


  public DMGroup forceIsolateRecipients(Boolean forceIsolateRecipients) {
    this.forceIsolateRecipients = forceIsolateRecipients;
    return this;
  }

   /**
   * 
   * @return forceIsolateRecipients
  **/
  @javax.annotation.Nullable
  public Boolean getForceIsolateRecipients() {
    return forceIsolateRecipients;
  }

  public void setForceIsolateRecipients(Boolean forceIsolateRecipients) {
    this.forceIsolateRecipients = forceIsolateRecipients;
  }


  public DMGroup created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * 
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public DMGroup modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * 
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public DMGroup users(Object users) {
    this.users = users;
    return this;
  }

   /**
   * 
   * @return users
  **/
  @javax.annotation.Nullable
  public Object getUsers() {
    return users;
  }

  public void setUsers(Object users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMGroup dmGroup = (DMGroup) o;
    return Objects.equals(this.ID, dmGroup.ID) &&
        Objects.equals(this.parentID, dmGroup.parentID) &&
        Objects.equals(this.name, dmGroup.name) &&
        Objects.equals(this.description, dmGroup.description) &&
        Objects.equals(this.isolateRecipients, dmGroup.isolateRecipients) &&
        Objects.equals(this.forceIsolateRecipients, dmGroup.forceIsolateRecipients) &&
        Objects.equals(this.created, dmGroup.created) &&
        Objects.equals(this.modified, dmGroup.modified) &&
        Objects.equals(this.users, dmGroup.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, parentID, name, description, isolateRecipients, forceIsolateRecipients, created, modified, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMGroup {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isolateRecipients: ").append(toIndentedString(isolateRecipients)).append("\n");
    sb.append("    forceIsolateRecipients: ").append(toIndentedString(forceIsolateRecipients)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("ParentID");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("IsolateRecipients");
    openapiFields.add("ForceIsolateRecipients");
    openapiFields.add("Created");
    openapiFields.add("Modified");
    openapiFields.add("Users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMGroup is not found in the empty JSON string", DMGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<DMGroup>() {
           @Override
           public void write(JsonWriter out, DMGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMGroup
  * @throws IOException if the JSON string is invalid with respect to DMGroup
  */
  public static DMGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMGroup.class);
  }

 /**
  * Convert an instance of DMGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

