/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * A user is a unique profile of permissions and linked to a set of user login credentials. When a user logs in using those credentials, the permissions in the user profile are applied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ALUserGroup {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_FOLDER_I_D = "FolderID";
  @SerializedName(SERIALIZED_NAME_FOLDER_I_D)
  private Integer folderID;

  public static final String SERIALIZED_NAME_MEMBERS = "Members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<Object> members;

  public static final String SERIALIZED_NAME_GROUPS = "Groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<ALUserGroup> groups;

  public static final String SERIALIZED_NAME_FOLDER_NAME = "FolderName";
  @SerializedName(SERIALIZED_NAME_FOLDER_NAME)
  private String folderName;

  public ALUserGroup() {
  }

  public ALUserGroup ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public ALUserGroup name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ALUserGroup description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ALUserGroup enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * 
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ALUserGroup created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * 
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ALUserGroup modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * 
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public ALUserGroup folderID(Integer folderID) {
    this.folderID = folderID;
    return this;
  }

   /**
   * 
   * @return folderID
  **/
  @javax.annotation.Nullable
  public Integer getFolderID() {
    return folderID;
  }

  public void setFolderID(Integer folderID) {
    this.folderID = folderID;
  }


  public ALUserGroup members(List<Object> members) {
    this.members = members;
    return this;
  }

  public ALUserGroup addMembersItem(Object membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

   /**
   * A list that can contain the groups or users that are immediate children of this group. I contain them.
   * @return members
  **/
  @javax.annotation.Nullable
  public List<Object> getMembers() {
    return members;
  }

  public void setMembers(List<Object> members) {
    this.members = members;
  }


  public ALUserGroup groups(List<ALUserGroup> groups) {
    this.groups = groups;
    return this;
  }

  public ALUserGroup addGroupsItem(ALUserGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * The groups that are immediate parents of this group. They contain me.
   * @return groups
  **/
  @javax.annotation.Nullable
  public List<ALUserGroup> getGroups() {
    return groups;
  }

  public void setGroups(List<ALUserGroup> groups) {
    this.groups = groups;
  }


  public ALUserGroup folderName(String folderName) {
    this.folderName = folderName;
    return this;
  }

   /**
   * 
   * @return folderName
  **/
  @javax.annotation.Nullable
  public String getFolderName() {
    return folderName;
  }

  public void setFolderName(String folderName) {
    this.folderName = folderName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ALUserGroup alUserGroup = (ALUserGroup) o;
    return Objects.equals(this.ID, alUserGroup.ID) &&
        Objects.equals(this.name, alUserGroup.name) &&
        Objects.equals(this.description, alUserGroup.description) &&
        Objects.equals(this.enabled, alUserGroup.enabled) &&
        Objects.equals(this.created, alUserGroup.created) &&
        Objects.equals(this.modified, alUserGroup.modified) &&
        Objects.equals(this.folderID, alUserGroup.folderID) &&
        Objects.equals(this.members, alUserGroup.members) &&
        Objects.equals(this.groups, alUserGroup.groups) &&
        Objects.equals(this.folderName, alUserGroup.folderName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, description, enabled, created, modified, folderID, members, groups, folderName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ALUserGroup {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    folderID: ").append(toIndentedString(folderID)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    folderName: ").append(toIndentedString(folderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("Enabled");
    openapiFields.add("Created");
    openapiFields.add("Modified");
    openapiFields.add("FolderID");
    openapiFields.add("Members");
    openapiFields.add("Groups");
    openapiFields.add("FolderName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ALUserGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ALUserGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ALUserGroup is not found in the empty JSON string", ALUserGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ALUserGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ALUserGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Members") != null && !jsonObj.get("Members").isJsonNull() && !jsonObj.get("Members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Members` to be an array in the JSON string but got `%s`", jsonObj.get("Members").toString()));
      }
      if (jsonObj.get("Groups") != null && !jsonObj.get("Groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("Groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Groups` to be an array in the JSON string but got `%s`", jsonObj.get("Groups").toString()));
          }

          // validate the optional field `Groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            ALUserGroup.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if ((jsonObj.get("FolderName") != null && !jsonObj.get("FolderName").isJsonNull()) && !jsonObj.get("FolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FolderName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ALUserGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ALUserGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ALUserGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ALUserGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ALUserGroup>() {
           @Override
           public void write(JsonWriter out, ALUserGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ALUserGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ALUserGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ALUserGroup
  * @throws IOException if the JSON string is invalid with respect to ALUserGroup
  */
  public static ALUserGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ALUserGroup.class);
  }

 /**
  * Convert an instance of ALUserGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

