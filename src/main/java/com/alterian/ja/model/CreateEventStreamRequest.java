/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * CreateEventStreamRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class CreateEventStreamRequest {
  public static final String SERIALIZED_NAME_DD_E_CLIENT = "DDEClient";
  @SerializedName(SERIALIZED_NAME_DD_E_CLIENT)
  private String ddEClient;

  public static final String SERIALIZED_NAME_DD_E_SITE_ID = "DDESiteId";
  @SerializedName(SERIALIZED_NAME_DD_E_SITE_ID)
  private Integer ddESiteId;

  public static final String SERIALIZED_NAME_DD_E_TARGET = "DDETarget";
  @SerializedName(SERIALIZED_NAME_DD_E_TARGET)
  private String ddETarget;

  public static final String SERIALIZED_NAME_EVENT_STREAM_DATABASE = "EventStreamDatabase";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_DATABASE)
  private String eventStreamDatabase;

  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_IS_FIFO_QUEUE_REQUIRED = "IsFifoQueueRequired";
  @SerializedName(SERIALIZED_NAME_IS_FIFO_QUEUE_REQUIRED)
  private Boolean isFifoQueueRequired;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "Project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_QUEUE_LOCK_ID = "QueueLockId";
  @SerializedName(SERIALIZED_NAME_QUEUE_LOCK_ID)
  private String queueLockId;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_SKIP_DEFAULT_QUEUE_SETUP = "SkipDefaultQueueSetup";
  @SerializedName(SERIALIZED_NAME_SKIP_DEFAULT_QUEUE_SETUP)
  private Boolean skipDefaultQueueSetup;

  public CreateEventStreamRequest() {
  }

  public CreateEventStreamRequest ddEClient(String ddEClient) {
    this.ddEClient = ddEClient;
    return this;
  }

   /**
   * Client in DDE in which you would like to create the event stream
   * @return ddEClient
  **/
  @javax.annotation.Nullable
  public String getDdEClient() {
    return ddEClient;
  }

  public void setDdEClient(String ddEClient) {
    this.ddEClient = ddEClient;
  }


  public CreateEventStreamRequest ddESiteId(Integer ddESiteId) {
    this.ddESiteId = ddESiteId;
    return this;
  }

   /**
   * An integer uniquely identifying the DDE system.  This site id is provided when it has been added via the SysAdminApp&#39;s AddDDESite command.
   * @return ddESiteId
  **/
  @javax.annotation.Nullable
  public Integer getDdESiteId() {
    return ddESiteId;
  }

  public void setDdESiteId(Integer ddESiteId) {
    this.ddESiteId = ddESiteId;
  }


  public CreateEventStreamRequest ddETarget(String ddETarget) {
    this.ddETarget = ddETarget;
    return this;
  }

   /**
   * Target within the DDE client in which you would like to create the event stream
   * @return ddETarget
  **/
  @javax.annotation.Nullable
  public String getDdETarget() {
    return ddETarget;
  }

  public void setDdETarget(String ddETarget) {
    this.ddETarget = ddETarget;
  }


  public CreateEventStreamRequest eventStreamDatabase(String eventStreamDatabase) {
    this.eventStreamDatabase = eventStreamDatabase;
    return this;
  }

   /**
   * Name of the engine database into which to place the event stream data
   * @return eventStreamDatabase
  **/
  @javax.annotation.Nullable
  public String getEventStreamDatabase() {
    return eventStreamDatabase;
  }

  public void setEventStreamDatabase(String eventStreamDatabase) {
    this.eventStreamDatabase = eventStreamDatabase;
  }


  public CreateEventStreamRequest groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * ID of group to associate the event stream data with
   * @return groupId
  **/
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public CreateEventStreamRequest isFifoQueueRequired(Boolean isFifoQueueRequired) {
    this.isFifoQueueRequired = isFifoQueueRequired;
    return this;
  }

   /**
   * (default false)
   * @return isFifoQueueRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsFifoQueueRequired() {
    return isFifoQueueRequired;
  }

  public void setIsFifoQueueRequired(Boolean isFifoQueueRequired) {
    this.isFifoQueueRequired = isFifoQueueRequired;
  }


  public CreateEventStreamRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the event stream you would like to create
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateEventStreamRequest project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Engine project into which to place the Event tables
   * @return project
  **/
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public CreateEventStreamRequest queueLockId(String queueLockId) {
    this.queueLockId = queueLockId;
    return this;
  }

   /**
   * If the event stream is to be attached to an existing queue then the lock id must be specified. This pre-supposes that any existing consumer event stream has been deleted
   * @return queueLockId
  **/
  @javax.annotation.Nullable
  public String getQueueLockId() {
    return queueLockId;
  }

  public void setQueueLockId(String queueLockId) {
    this.queueLockId = queueLockId;
  }


  public CreateEventStreamRequest server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Engine server on which to install the Event tables
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public CreateEventStreamRequest skipDefaultQueueSetup(Boolean skipDefaultQueueSetup) {
    this.skipDefaultQueueSetup = skipDefaultQueueSetup;
    return this;
  }

   /**
   * If this is true then the AlterianCX_defaultQueue global parameter will not be set (default false)
   * @return skipDefaultQueueSetup
  **/
  @javax.annotation.Nullable
  public Boolean getSkipDefaultQueueSetup() {
    return skipDefaultQueueSetup;
  }

  public void setSkipDefaultQueueSetup(Boolean skipDefaultQueueSetup) {
    this.skipDefaultQueueSetup = skipDefaultQueueSetup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventStreamRequest createEventStreamRequest = (CreateEventStreamRequest) o;
    return Objects.equals(this.ddEClient, createEventStreamRequest.ddEClient) &&
        Objects.equals(this.ddESiteId, createEventStreamRequest.ddESiteId) &&
        Objects.equals(this.ddETarget, createEventStreamRequest.ddETarget) &&
        Objects.equals(this.eventStreamDatabase, createEventStreamRequest.eventStreamDatabase) &&
        Objects.equals(this.groupId, createEventStreamRequest.groupId) &&
        Objects.equals(this.isFifoQueueRequired, createEventStreamRequest.isFifoQueueRequired) &&
        Objects.equals(this.name, createEventStreamRequest.name) &&
        Objects.equals(this.project, createEventStreamRequest.project) &&
        Objects.equals(this.queueLockId, createEventStreamRequest.queueLockId) &&
        Objects.equals(this.server, createEventStreamRequest.server) &&
        Objects.equals(this.skipDefaultQueueSetup, createEventStreamRequest.skipDefaultQueueSetup);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ddEClient, ddESiteId, ddETarget, eventStreamDatabase, groupId, isFifoQueueRequired, name, project, queueLockId, server, skipDefaultQueueSetup);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventStreamRequest {\n");
    sb.append("    ddEClient: ").append(toIndentedString(ddEClient)).append("\n");
    sb.append("    ddESiteId: ").append(toIndentedString(ddESiteId)).append("\n");
    sb.append("    ddETarget: ").append(toIndentedString(ddETarget)).append("\n");
    sb.append("    eventStreamDatabase: ").append(toIndentedString(eventStreamDatabase)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    isFifoQueueRequired: ").append(toIndentedString(isFifoQueueRequired)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    queueLockId: ").append(toIndentedString(queueLockId)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    skipDefaultQueueSetup: ").append(toIndentedString(skipDefaultQueueSetup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DDEClient");
    openapiFields.add("DDESiteId");
    openapiFields.add("DDETarget");
    openapiFields.add("EventStreamDatabase");
    openapiFields.add("GroupId");
    openapiFields.add("IsFifoQueueRequired");
    openapiFields.add("Name");
    openapiFields.add("Project");
    openapiFields.add("QueueLockId");
    openapiFields.add("Server");
    openapiFields.add("SkipDefaultQueueSetup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateEventStreamRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEventStreamRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEventStreamRequest is not found in the empty JSON string", CreateEventStreamRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEventStreamRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEventStreamRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DDEClient") != null && !jsonObj.get("DDEClient").isJsonNull()) && !jsonObj.get("DDEClient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DDEClient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DDEClient").toString()));
      }
      if ((jsonObj.get("DDETarget") != null && !jsonObj.get("DDETarget").isJsonNull()) && !jsonObj.get("DDETarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DDETarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DDETarget").toString()));
      }
      if ((jsonObj.get("EventStreamDatabase") != null && !jsonObj.get("EventStreamDatabase").isJsonNull()) && !jsonObj.get("EventStreamDatabase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventStreamDatabase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventStreamDatabase").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Project") != null && !jsonObj.get("Project").isJsonNull()) && !jsonObj.get("Project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Project").toString()));
      }
      if ((jsonObj.get("QueueLockId") != null && !jsonObj.get("QueueLockId").isJsonNull()) && !jsonObj.get("QueueLockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueueLockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueueLockId").toString()));
      }
      if ((jsonObj.get("Server") != null && !jsonObj.get("Server").isJsonNull()) && !jsonObj.get("Server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Server").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEventStreamRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEventStreamRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEventStreamRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEventStreamRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEventStreamRequest>() {
           @Override
           public void write(JsonWriter out, CreateEventStreamRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEventStreamRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateEventStreamRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateEventStreamRequest
  * @throws IOException if the JSON string is invalid with respect to CreateEventStreamRequest
  */
  public static CreateEventStreamRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEventStreamRequest.class);
  }

 /**
  * Convert an instance of CreateEventStreamRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

