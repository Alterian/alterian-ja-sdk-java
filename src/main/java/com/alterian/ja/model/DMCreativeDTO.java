/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMCreativeDTO {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_ID = "CreatedByUserId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_ID)
  private Integer createdByUserId;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_NAME = "CreatedByUserName";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_NAME)
  private String createdByUserName;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CREATIVE_ID = "CreativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private Integer creativeId;

  public static final String SERIALIZED_NAME_CREATIVE_NAME = "CreativeName";
  @SerializedName(SERIALIZED_NAME_CREATIVE_NAME)
  private String creativeName;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "DocumentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private Integer documentId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY_USER_ID = "LastModifiedByUserId";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY_USER_ID)
  private Integer lastModifiedByUserId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY_USER_NAME = "LastModifiedByUserName";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY_USER_NAME)
  private String lastModifiedByUserName;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private OffsetDateTime lastModifiedDate;

  public static final String SERIALIZED_NAME_THUMBNAIL_PATH = "ThumbnailPath";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_PATH)
  private String thumbnailPath;

  public DMCreativeDTO() {
  }

  public DMCreativeDTO categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * 
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public DMCreativeDTO createdByUserId(Integer createdByUserId) {
    this.createdByUserId = createdByUserId;
    return this;
  }

   /**
   * 
   * @return createdByUserId
  **/
  @javax.annotation.Nullable
  public Integer getCreatedByUserId() {
    return createdByUserId;
  }

  public void setCreatedByUserId(Integer createdByUserId) {
    this.createdByUserId = createdByUserId;
  }


  public DMCreativeDTO createdByUserName(String createdByUserName) {
    this.createdByUserName = createdByUserName;
    return this;
  }

   /**
   * 
   * @return createdByUserName
  **/
  @javax.annotation.Nullable
  public String getCreatedByUserName() {
    return createdByUserName;
  }

  public void setCreatedByUserName(String createdByUserName) {
    this.createdByUserName = createdByUserName;
  }


  public DMCreativeDTO createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * 
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public DMCreativeDTO creativeId(Integer creativeId) {
    this.creativeId = creativeId;
    return this;
  }

   /**
   * 
   * @return creativeId
  **/
  @javax.annotation.Nullable
  public Integer getCreativeId() {
    return creativeId;
  }

  public void setCreativeId(Integer creativeId) {
    this.creativeId = creativeId;
  }


  public DMCreativeDTO creativeName(String creativeName) {
    this.creativeName = creativeName;
    return this;
  }

   /**
   * 
   * @return creativeName
  **/
  @javax.annotation.Nullable
  public String getCreativeName() {
    return creativeName;
  }

  public void setCreativeName(String creativeName) {
    this.creativeName = creativeName;
  }


  public DMCreativeDTO documentId(Integer documentId) {
    this.documentId = documentId;
    return this;
  }

   /**
   * 
   * @return documentId
  **/
  @javax.annotation.Nullable
  public Integer getDocumentId() {
    return documentId;
  }

  public void setDocumentId(Integer documentId) {
    this.documentId = documentId;
  }


  public DMCreativeDTO lastModifiedByUserId(Integer lastModifiedByUserId) {
    this.lastModifiedByUserId = lastModifiedByUserId;
    return this;
  }

   /**
   * 
   * @return lastModifiedByUserId
  **/
  @javax.annotation.Nullable
  public Integer getLastModifiedByUserId() {
    return lastModifiedByUserId;
  }

  public void setLastModifiedByUserId(Integer lastModifiedByUserId) {
    this.lastModifiedByUserId = lastModifiedByUserId;
  }


  public DMCreativeDTO lastModifiedByUserName(String lastModifiedByUserName) {
    this.lastModifiedByUserName = lastModifiedByUserName;
    return this;
  }

   /**
   * 
   * @return lastModifiedByUserName
  **/
  @javax.annotation.Nullable
  public String getLastModifiedByUserName() {
    return lastModifiedByUserName;
  }

  public void setLastModifiedByUserName(String lastModifiedByUserName) {
    this.lastModifiedByUserName = lastModifiedByUserName;
  }


  public DMCreativeDTO lastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * 
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public DMCreativeDTO thumbnailPath(String thumbnailPath) {
    this.thumbnailPath = thumbnailPath;
    return this;
  }

   /**
   * 
   * @return thumbnailPath
  **/
  @javax.annotation.Nullable
  public String getThumbnailPath() {
    return thumbnailPath;
  }

  public void setThumbnailPath(String thumbnailPath) {
    this.thumbnailPath = thumbnailPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMCreativeDTO dmCreativeDTO = (DMCreativeDTO) o;
    return Objects.equals(this.categoryId, dmCreativeDTO.categoryId) &&
        Objects.equals(this.createdByUserId, dmCreativeDTO.createdByUserId) &&
        Objects.equals(this.createdByUserName, dmCreativeDTO.createdByUserName) &&
        Objects.equals(this.createdDate, dmCreativeDTO.createdDate) &&
        Objects.equals(this.creativeId, dmCreativeDTO.creativeId) &&
        Objects.equals(this.creativeName, dmCreativeDTO.creativeName) &&
        Objects.equals(this.documentId, dmCreativeDTO.documentId) &&
        Objects.equals(this.lastModifiedByUserId, dmCreativeDTO.lastModifiedByUserId) &&
        Objects.equals(this.lastModifiedByUserName, dmCreativeDTO.lastModifiedByUserName) &&
        Objects.equals(this.lastModifiedDate, dmCreativeDTO.lastModifiedDate) &&
        Objects.equals(this.thumbnailPath, dmCreativeDTO.thumbnailPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, createdByUserId, createdByUserName, createdDate, creativeId, creativeName, documentId, lastModifiedByUserId, lastModifiedByUserName, lastModifiedDate, thumbnailPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMCreativeDTO {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    createdByUserId: ").append(toIndentedString(createdByUserId)).append("\n");
    sb.append("    createdByUserName: ").append(toIndentedString(createdByUserName)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    creativeName: ").append(toIndentedString(creativeName)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    lastModifiedByUserId: ").append(toIndentedString(lastModifiedByUserId)).append("\n");
    sb.append("    lastModifiedByUserName: ").append(toIndentedString(lastModifiedByUserName)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    thumbnailPath: ").append(toIndentedString(thumbnailPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoryId");
    openapiFields.add("CreatedByUserId");
    openapiFields.add("CreatedByUserName");
    openapiFields.add("CreatedDate");
    openapiFields.add("CreativeId");
    openapiFields.add("CreativeName");
    openapiFields.add("DocumentId");
    openapiFields.add("LastModifiedByUserId");
    openapiFields.add("LastModifiedByUserName");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("ThumbnailPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMCreativeDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMCreativeDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMCreativeDTO is not found in the empty JSON string", DMCreativeDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMCreativeDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMCreativeDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CreatedByUserName") != null && !jsonObj.get("CreatedByUserName").isJsonNull()) && !jsonObj.get("CreatedByUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreatedByUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreatedByUserName").toString()));
      }
      if ((jsonObj.get("CreativeName") != null && !jsonObj.get("CreativeName").isJsonNull()) && !jsonObj.get("CreativeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreativeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreativeName").toString()));
      }
      if ((jsonObj.get("LastModifiedByUserName") != null && !jsonObj.get("LastModifiedByUserName").isJsonNull()) && !jsonObj.get("LastModifiedByUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastModifiedByUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastModifiedByUserName").toString()));
      }
      if ((jsonObj.get("ThumbnailPath") != null && !jsonObj.get("ThumbnailPath").isJsonNull()) && !jsonObj.get("ThumbnailPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbnailPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThumbnailPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMCreativeDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMCreativeDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMCreativeDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMCreativeDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<DMCreativeDTO>() {
           @Override
           public void write(JsonWriter out, DMCreativeDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMCreativeDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMCreativeDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMCreativeDTO
  * @throws IOException if the JSON string is invalid with respect to DMCreativeDTO
  */
  public static DMCreativeDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMCreativeDTO.class);
  }

 /**
  * Convert an instance of DMCreativeDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

