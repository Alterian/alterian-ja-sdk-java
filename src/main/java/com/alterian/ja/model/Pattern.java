/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ColumnPublishedTransformSummary;
import com.alterian.ja.model.PatternState;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Pattern {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_EVENT_STREAM_ID = "EventStreamId";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_ID)
  private Integer eventStreamId;

  public static final String SERIALIZED_NAME_SNAPSHOT_START = "SnapshotStart";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_START)
  private OffsetDateTime snapshotStart;

  public static final String SERIALIZED_NAME_SNAPSHOT_END = "SnapshotEnd";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_END)
  private OffsetDateTime snapshotEnd;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private String settings;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PatternState state;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "DataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private Integer dataSourceId;

  public static final String SERIALIZED_NAME_TRANSFORMS = "Transforms";
  @SerializedName(SERIALIZED_NAME_TRANSFORMS)
  private List<ColumnPublishedTransformSummary> transforms;

  public Pattern() {
  }

  public Pattern id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Pattern eventStreamId(Integer eventStreamId) {
    this.eventStreamId = eventStreamId;
    return this;
  }

   /**
   * 
   * @return eventStreamId
  **/
  @javax.annotation.Nullable
  public Integer getEventStreamId() {
    return eventStreamId;
  }

  public void setEventStreamId(Integer eventStreamId) {
    this.eventStreamId = eventStreamId;
  }


  public Pattern snapshotStart(OffsetDateTime snapshotStart) {
    this.snapshotStart = snapshotStart;
    return this;
  }

   /**
   * 
   * @return snapshotStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSnapshotStart() {
    return snapshotStart;
  }

  public void setSnapshotStart(OffsetDateTime snapshotStart) {
    this.snapshotStart = snapshotStart;
  }


  public Pattern snapshotEnd(OffsetDateTime snapshotEnd) {
    this.snapshotEnd = snapshotEnd;
    return this;
  }

   /**
   * 
   * @return snapshotEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSnapshotEnd() {
    return snapshotEnd;
  }

  public void setSnapshotEnd(OffsetDateTime snapshotEnd) {
    this.snapshotEnd = snapshotEnd;
  }


  public Pattern settings(String settings) {
    this.settings = settings;
    return this;
  }

   /**
   * 
   * @return settings
  **/
  @javax.annotation.Nullable
  public String getSettings() {
    return settings;
  }

  public void setSettings(String settings) {
    this.settings = settings;
  }


  public Pattern state(PatternState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public PatternState getState() {
    return state;
  }

  public void setState(PatternState state) {
    this.state = state;
  }


  public Pattern dataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

   /**
   * 
   * @return dataSourceId
  **/
  @javax.annotation.Nullable
  public Integer getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public Pattern transforms(List<ColumnPublishedTransformSummary> transforms) {
    this.transforms = transforms;
    return this;
  }

  public Pattern addTransformsItem(ColumnPublishedTransformSummary transformsItem) {
    if (this.transforms == null) {
      this.transforms = new ArrayList<>();
    }
    this.transforms.add(transformsItem);
    return this;
  }

   /**
   * 
   * @return transforms
  **/
  @javax.annotation.Nullable
  public List<ColumnPublishedTransformSummary> getTransforms() {
    return transforms;
  }

  public void setTransforms(List<ColumnPublishedTransformSummary> transforms) {
    this.transforms = transforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pattern pattern = (Pattern) o;
    return Objects.equals(this.id, pattern.id) &&
        Objects.equals(this.eventStreamId, pattern.eventStreamId) &&
        Objects.equals(this.snapshotStart, pattern.snapshotStart) &&
        Objects.equals(this.snapshotEnd, pattern.snapshotEnd) &&
        Objects.equals(this.settings, pattern.settings) &&
        Objects.equals(this.state, pattern.state) &&
        Objects.equals(this.dataSourceId, pattern.dataSourceId) &&
        Objects.equals(this.transforms, pattern.transforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, eventStreamId, snapshotStart, snapshotEnd, settings, state, dataSourceId, transforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pattern {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    eventStreamId: ").append(toIndentedString(eventStreamId)).append("\n");
    sb.append("    snapshotStart: ").append(toIndentedString(snapshotStart)).append("\n");
    sb.append("    snapshotEnd: ").append(toIndentedString(snapshotEnd)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    transforms: ").append(toIndentedString(transforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("EventStreamId");
    openapiFields.add("SnapshotStart");
    openapiFields.add("SnapshotEnd");
    openapiFields.add("Settings");
    openapiFields.add("State");
    openapiFields.add("DataSourceId");
    openapiFields.add("Transforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Pattern
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pattern.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pattern is not found in the empty JSON string", Pattern.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pattern.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pattern` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) && !jsonObj.get("Settings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Settings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Settings").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        PatternState.validateJsonElement(jsonObj.get("State"));
      }
      if (jsonObj.get("Transforms") != null && !jsonObj.get("Transforms").isJsonNull()) {
        JsonArray jsonArraytransforms = jsonObj.getAsJsonArray("Transforms");
        if (jsonArraytransforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Transforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Transforms` to be an array in the JSON string but got `%s`", jsonObj.get("Transforms").toString()));
          }

          // validate the optional field `Transforms` (array)
          for (int i = 0; i < jsonArraytransforms.size(); i++) {
            ColumnPublishedTransformSummary.validateJsonElement(jsonArraytransforms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pattern.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pattern' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pattern> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pattern.class));

       return (TypeAdapter<T>) new TypeAdapter<Pattern>() {
           @Override
           public void write(JsonWriter out, Pattern value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pattern read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Pattern given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Pattern
  * @throws IOException if the JSON string is invalid with respect to Pattern
  */
  public static Pattern fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pattern.class);
  }

 /**
  * Convert an instance of Pattern to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

