/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.APICursor;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetUsersForClientRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetUsersForClientRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private Integer clientId;

  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_FOLDER_ID = "FolderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private Integer folderId;

  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_INCLUDE_CHILDREN = "IncludeChildren";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CHILDREN)
  private Boolean includeChildren;

  public static final String SERIALIZED_NAME_INCLUDE_DISABLED = "IncludeDisabled";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DISABLED)
  private Boolean includeDisabled;

  public GetUsersForClientRequest() {
  }

  public GetUsersForClientRequest clientId(Integer clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * ClientId for which you would like to see users.
   * @return clientId
  **/
  @javax.annotation.Nullable
  public Integer getClientId() {
    return clientId;
  }

  public void setClientId(Integer clientId) {
    this.clientId = clientId;
  }


  public GetUsersForClientRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetUsersForClientRequest folderId(Integer folderId) {
    this.folderId = folderId;
    return this;
  }

   /**
   * Optionally get just the users in this folder. Provide NULL to list all users, but see IncludeChildren below
   * @return folderId
  **/
  @javax.annotation.Nullable
  public Integer getFolderId() {
    return folderId;
  }

  public void setFolderId(Integer folderId) {
    this.folderId = folderId;
  }


  public GetUsersForClientRequest groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Optionally get just the users in this group. Provide NULL to list all users
   * @return groupId
  **/
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public GetUsersForClientRequest includeChildren(Boolean includeChildren) {
    this.includeChildren = includeChildren;
    return this;
  }

   /**
   * If a folderID is supplied, show users in the supplied folder and all its subfolders. If a folderID is not supplied, show all users in all folders (true), or no folders (false)
   * @return includeChildren
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeChildren() {
    return includeChildren;
  }

  public void setIncludeChildren(Boolean includeChildren) {
    this.includeChildren = includeChildren;
  }


  public GetUsersForClientRequest includeDisabled(Boolean includeDisabled) {
    this.includeDisabled = includeDisabled;
    return this;
  }

   /**
   * Include disabled users in the result
   * @return includeDisabled
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeDisabled() {
    return includeDisabled;
  }

  public void setIncludeDisabled(Boolean includeDisabled) {
    this.includeDisabled = includeDisabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUsersForClientRequest getUsersForClientRequest = (GetUsersForClientRequest) o;
    return Objects.equals(this.clientId, getUsersForClientRequest.clientId) &&
        Objects.equals(this.cursor, getUsersForClientRequest.cursor) &&
        Objects.equals(this.folderId, getUsersForClientRequest.folderId) &&
        Objects.equals(this.groupId, getUsersForClientRequest.groupId) &&
        Objects.equals(this.includeChildren, getUsersForClientRequest.includeChildren) &&
        Objects.equals(this.includeDisabled, getUsersForClientRequest.includeDisabled);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, cursor, folderId, groupId, includeChildren, includeDisabled);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUsersForClientRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    includeChildren: ").append(toIndentedString(includeChildren)).append("\n");
    sb.append("    includeDisabled: ").append(toIndentedString(includeDisabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientId");
    openapiFields.add("Cursor");
    openapiFields.add("FolderId");
    openapiFields.add("GroupId");
    openapiFields.add("IncludeChildren");
    openapiFields.add("IncludeDisabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetUsersForClientRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUsersForClientRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUsersForClientRequest is not found in the empty JSON string", GetUsersForClientRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUsersForClientRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUsersForClientRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUsersForClientRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUsersForClientRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUsersForClientRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUsersForClientRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUsersForClientRequest>() {
           @Override
           public void write(JsonWriter out, GetUsersForClientRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUsersForClientRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetUsersForClientRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetUsersForClientRequest
  * @throws IOException if the JSON string is invalid with respect to GetUsersForClientRequest
  */
  public static GetUsersForClientRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUsersForClientRequest.class);
  }

 /**
  * Convert an instance of GetUsersForClientRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

