/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ResourceType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Permission {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private ResourceType resource;

  public static final String SERIALIZED_NAME_ITEM_PERMISSION = "ItemPermission";
  @SerializedName(SERIALIZED_NAME_ITEM_PERMISSION)
  private Integer itemPermission;

  public static final String SERIALIZED_NAME_IS_MODIFY = "IsModify";
  @SerializedName(SERIALIZED_NAME_IS_MODIFY)
  private Boolean isModify;

  public static final String SERIALIZED_NAME_IS_VIEW = "IsView";
  @SerializedName(SERIALIZED_NAME_IS_VIEW)
  private Boolean isView;

  public Permission() {
  }

  public Permission id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id of the permission
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Permission name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the permission
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Permission resource(ResourceType resource) {
    this.resource = resource;
    return this;
  }

   /**
   * Get resource
   * @return resource
  **/
  @javax.annotation.Nullable
  public ResourceType getResource() {
    return resource;
  }

  public void setResource(ResourceType resource) {
    this.resource = resource;
  }


  public Permission itemPermission(Integer itemPermission) {
    this.itemPermission = itemPermission;
    return this;
  }

   /**
   * If this permission is applied to a folder, this is the permission id for the underlying item.  For instance, if the resource type is Folder and the permission is \&quot;View Document\&quot; [44], the ItemPermission will be 1 because that is the matching permission for the underlying resource for the folder.
   * @return itemPermission
  **/
  @javax.annotation.Nullable
  public Integer getItemPermission() {
    return itemPermission;
  }

  public void setItemPermission(Integer itemPermission) {
    this.itemPermission = itemPermission;
  }


  public Permission isModify(Boolean isModify) {
    this.isModify = isModify;
    return this;
  }

   /**
   * Is the permission a \&quot;modify\&quot; type permission
   * @return isModify
  **/
  @javax.annotation.Nullable
  public Boolean getIsModify() {
    return isModify;
  }

  public void setIsModify(Boolean isModify) {
    this.isModify = isModify;
  }


  public Permission isView(Boolean isView) {
    this.isView = isView;
    return this;
  }

   /**
   * Is the permission a \&quot;view\&quot; type permission
   * @return isView
  **/
  @javax.annotation.Nullable
  public Boolean getIsView() {
    return isView;
  }

  public void setIsView(Boolean isView) {
    this.isView = isView;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permission permission = (Permission) o;
    return Objects.equals(this.id, permission.id) &&
        Objects.equals(this.name, permission.name) &&
        Objects.equals(this.resource, permission.resource) &&
        Objects.equals(this.itemPermission, permission.itemPermission) &&
        Objects.equals(this.isModify, permission.isModify) &&
        Objects.equals(this.isView, permission.isView);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, resource, itemPermission, isModify, isView);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permission {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    itemPermission: ").append(toIndentedString(itemPermission)).append("\n");
    sb.append("    isModify: ").append(toIndentedString(isModify)).append("\n");
    sb.append("    isView: ").append(toIndentedString(isView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Resource");
    openapiFields.add("ItemPermission");
    openapiFields.add("IsModify");
    openapiFields.add("IsView");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Permission
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permission is not found in the empty JSON string", Permission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Resource`
      if (jsonObj.get("Resource") != null && !jsonObj.get("Resource").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("Resource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permission.class));

       return (TypeAdapter<T>) new TypeAdapter<Permission>() {
           @Override
           public void write(JsonWriter out, Permission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Permission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Permission
  * @throws IOException if the JSON string is invalid with respect to Permission
  */
  public static Permission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permission.class);
  }

 /**
  * Convert an instance of Permission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

