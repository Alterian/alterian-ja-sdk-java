/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMOmnitureSettings;
import com.alterian.ja.model.DMWCMEntry;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMClientSettings {
  public static final String SERIALIZED_NAME_INBOUND_DOMAIN = "InboundDomain";
  @SerializedName(SERIALIZED_NAME_INBOUND_DOMAIN)
  private String inboundDomain;

  public static final String SERIALIZED_NAME_CONTENT_DOMAIN = "ContentDomain";
  @SerializedName(SERIALIZED_NAME_CONTENT_DOMAIN)
  private String contentDomain;

  public static final String SERIALIZED_NAME_UPLOAD_IMAGE_DEFAULT = "UploadImageDefault";
  @SerializedName(SERIALIZED_NAME_UPLOAD_IMAGE_DEFAULT)
  private Boolean uploadImageDefault;

  public static final String SERIALIZED_NAME_DM_W_C_M_LIST = "DMWCMList";
  @SerializedName(SERIALIZED_NAME_DM_W_C_M_LIST)
  private List<DMWCMEntry> dmWCMList;

  public static final String SERIALIZED_NAME_P_V_I_D = "PVID";
  @SerializedName(SERIALIZED_NAME_P_V_I_D)
  private Integer PVID;

  public static final String SERIALIZED_NAME_USER_CULTURE = "UserCulture";
  @SerializedName(SERIALIZED_NAME_USER_CULTURE)
  private String userCulture;

  public static final String SERIALIZED_NAME_OMNITURE_SETTINGS = "OmnitureSettings";
  @SerializedName(SERIALIZED_NAME_OMNITURE_SETTINGS)
  private DMOmnitureSettings omnitureSettings;

  public static final String SERIALIZED_NAME_DEFAULT_TEMPLATE_CODE_PAGE = "DefaultTemplateCodePage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TEMPLATE_CODE_PAGE)
  private Integer defaultTemplateCodePage;

  public static final String SERIALIZED_NAME_PV_URL = "PVUrl";
  @SerializedName(SERIALIZED_NAME_PV_URL)
  private String pvUrl;

  public static final String SERIALIZED_NAME_SM2_URL = "SM2Url";
  @SerializedName(SERIALIZED_NAME_SM2_URL)
  private String sm2Url;

  public DMClientSettings() {
  }

  public DMClientSettings inboundDomain(String inboundDomain) {
    this.inboundDomain = inboundDomain;
    return this;
  }

   /**
   * 
   * @return inboundDomain
  **/
  @javax.annotation.Nullable
  public String getInboundDomain() {
    return inboundDomain;
  }

  public void setInboundDomain(String inboundDomain) {
    this.inboundDomain = inboundDomain;
  }


  public DMClientSettings contentDomain(String contentDomain) {
    this.contentDomain = contentDomain;
    return this;
  }

   /**
   * 
   * @return contentDomain
  **/
  @javax.annotation.Nullable
  public String getContentDomain() {
    return contentDomain;
  }

  public void setContentDomain(String contentDomain) {
    this.contentDomain = contentDomain;
  }


  public DMClientSettings uploadImageDefault(Boolean uploadImageDefault) {
    this.uploadImageDefault = uploadImageDefault;
    return this;
  }

   /**
   * 
   * @return uploadImageDefault
  **/
  @javax.annotation.Nullable
  public Boolean getUploadImageDefault() {
    return uploadImageDefault;
  }

  public void setUploadImageDefault(Boolean uploadImageDefault) {
    this.uploadImageDefault = uploadImageDefault;
  }


  public DMClientSettings dmWCMList(List<DMWCMEntry> dmWCMList) {
    this.dmWCMList = dmWCMList;
    return this;
  }

  public DMClientSettings addDmWCMListItem(DMWCMEntry dmWCMListItem) {
    if (this.dmWCMList == null) {
      this.dmWCMList = new ArrayList<>();
    }
    this.dmWCMList.add(dmWCMListItem);
    return this;
  }

   /**
   * 
   * @return dmWCMList
  **/
  @javax.annotation.Nullable
  public List<DMWCMEntry> getDmWCMList() {
    return dmWCMList;
  }

  public void setDmWCMList(List<DMWCMEntry> dmWCMList) {
    this.dmWCMList = dmWCMList;
  }


  public DMClientSettings PVID(Integer PVID) {
    this.PVID = PVID;
    return this;
  }

   /**
   * 
   * @return PVID
  **/
  @javax.annotation.Nullable
  public Integer getPVID() {
    return PVID;
  }

  public void setPVID(Integer PVID) {
    this.PVID = PVID;
  }


  public DMClientSettings userCulture(String userCulture) {
    this.userCulture = userCulture;
    return this;
  }

   /**
   * 
   * @return userCulture
  **/
  @javax.annotation.Nullable
  public String getUserCulture() {
    return userCulture;
  }

  public void setUserCulture(String userCulture) {
    this.userCulture = userCulture;
  }


  public DMClientSettings omnitureSettings(DMOmnitureSettings omnitureSettings) {
    this.omnitureSettings = omnitureSettings;
    return this;
  }

   /**
   * Get omnitureSettings
   * @return omnitureSettings
  **/
  @javax.annotation.Nullable
  public DMOmnitureSettings getOmnitureSettings() {
    return omnitureSettings;
  }

  public void setOmnitureSettings(DMOmnitureSettings omnitureSettings) {
    this.omnitureSettings = omnitureSettings;
  }


  public DMClientSettings defaultTemplateCodePage(Integer defaultTemplateCodePage) {
    this.defaultTemplateCodePage = defaultTemplateCodePage;
    return this;
  }

   /**
   * 
   * @return defaultTemplateCodePage
  **/
  @javax.annotation.Nullable
  public Integer getDefaultTemplateCodePage() {
    return defaultTemplateCodePage;
  }

  public void setDefaultTemplateCodePage(Integer defaultTemplateCodePage) {
    this.defaultTemplateCodePage = defaultTemplateCodePage;
  }


  public DMClientSettings pvUrl(String pvUrl) {
    this.pvUrl = pvUrl;
    return this;
  }

   /**
   * 
   * @return pvUrl
  **/
  @javax.annotation.Nullable
  public String getPvUrl() {
    return pvUrl;
  }

  public void setPvUrl(String pvUrl) {
    this.pvUrl = pvUrl;
  }


  public DMClientSettings sm2Url(String sm2Url) {
    this.sm2Url = sm2Url;
    return this;
  }

   /**
   * 
   * @return sm2Url
  **/
  @javax.annotation.Nullable
  public String getSm2Url() {
    return sm2Url;
  }

  public void setSm2Url(String sm2Url) {
    this.sm2Url = sm2Url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMClientSettings dmClientSettings = (DMClientSettings) o;
    return Objects.equals(this.inboundDomain, dmClientSettings.inboundDomain) &&
        Objects.equals(this.contentDomain, dmClientSettings.contentDomain) &&
        Objects.equals(this.uploadImageDefault, dmClientSettings.uploadImageDefault) &&
        Objects.equals(this.dmWCMList, dmClientSettings.dmWCMList) &&
        Objects.equals(this.PVID, dmClientSettings.PVID) &&
        Objects.equals(this.userCulture, dmClientSettings.userCulture) &&
        Objects.equals(this.omnitureSettings, dmClientSettings.omnitureSettings) &&
        Objects.equals(this.defaultTemplateCodePage, dmClientSettings.defaultTemplateCodePage) &&
        Objects.equals(this.pvUrl, dmClientSettings.pvUrl) &&
        Objects.equals(this.sm2Url, dmClientSettings.sm2Url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboundDomain, contentDomain, uploadImageDefault, dmWCMList, PVID, userCulture, omnitureSettings, defaultTemplateCodePage, pvUrl, sm2Url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMClientSettings {\n");
    sb.append("    inboundDomain: ").append(toIndentedString(inboundDomain)).append("\n");
    sb.append("    contentDomain: ").append(toIndentedString(contentDomain)).append("\n");
    sb.append("    uploadImageDefault: ").append(toIndentedString(uploadImageDefault)).append("\n");
    sb.append("    dmWCMList: ").append(toIndentedString(dmWCMList)).append("\n");
    sb.append("    PVID: ").append(toIndentedString(PVID)).append("\n");
    sb.append("    userCulture: ").append(toIndentedString(userCulture)).append("\n");
    sb.append("    omnitureSettings: ").append(toIndentedString(omnitureSettings)).append("\n");
    sb.append("    defaultTemplateCodePage: ").append(toIndentedString(defaultTemplateCodePage)).append("\n");
    sb.append("    pvUrl: ").append(toIndentedString(pvUrl)).append("\n");
    sb.append("    sm2Url: ").append(toIndentedString(sm2Url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InboundDomain");
    openapiFields.add("ContentDomain");
    openapiFields.add("UploadImageDefault");
    openapiFields.add("DMWCMList");
    openapiFields.add("PVID");
    openapiFields.add("UserCulture");
    openapiFields.add("OmnitureSettings");
    openapiFields.add("DefaultTemplateCodePage");
    openapiFields.add("PVUrl");
    openapiFields.add("SM2Url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMClientSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMClientSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMClientSettings is not found in the empty JSON string", DMClientSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMClientSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMClientSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("InboundDomain") != null && !jsonObj.get("InboundDomain").isJsonNull()) && !jsonObj.get("InboundDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundDomain").toString()));
      }
      if ((jsonObj.get("ContentDomain") != null && !jsonObj.get("ContentDomain").isJsonNull()) && !jsonObj.get("ContentDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentDomain").toString()));
      }
      if (jsonObj.get("DMWCMList") != null && !jsonObj.get("DMWCMList").isJsonNull()) {
        JsonArray jsonArraydmWCMList = jsonObj.getAsJsonArray("DMWCMList");
        if (jsonArraydmWCMList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DMWCMList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DMWCMList` to be an array in the JSON string but got `%s`", jsonObj.get("DMWCMList").toString()));
          }

          // validate the optional field `DMWCMList` (array)
          for (int i = 0; i < jsonArraydmWCMList.size(); i++) {
            DMWCMEntry.validateJsonElement(jsonArraydmWCMList.get(i));
          };
        }
      }
      if ((jsonObj.get("UserCulture") != null && !jsonObj.get("UserCulture").isJsonNull()) && !jsonObj.get("UserCulture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserCulture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserCulture").toString()));
      }
      // validate the optional field `OmnitureSettings`
      if (jsonObj.get("OmnitureSettings") != null && !jsonObj.get("OmnitureSettings").isJsonNull()) {
        DMOmnitureSettings.validateJsonElement(jsonObj.get("OmnitureSettings"));
      }
      if ((jsonObj.get("PVUrl") != null && !jsonObj.get("PVUrl").isJsonNull()) && !jsonObj.get("PVUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PVUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PVUrl").toString()));
      }
      if ((jsonObj.get("SM2Url") != null && !jsonObj.get("SM2Url").isJsonNull()) && !jsonObj.get("SM2Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SM2Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SM2Url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMClientSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMClientSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMClientSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMClientSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DMClientSettings>() {
           @Override
           public void write(JsonWriter out, DMClientSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMClientSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMClientSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMClientSettings
  * @throws IOException if the JSON string is invalid with respect to DMClientSettings
  */
  public static DMClientSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMClientSettings.class);
  }

 /**
  * Convert an instance of DMClientSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

