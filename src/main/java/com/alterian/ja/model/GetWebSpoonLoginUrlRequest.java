/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetWebSpoonLoginUrlRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetWebSpoonLoginUrlRequest {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JO_CLIENT = "JOClient";
  @SerializedName(SERIALIZED_NAME_JO_CLIENT)
  private String joClient;

  public static final String SERIALIZED_NAME_JO_TOKEN = "JOToken";
  @SerializedName(SERIALIZED_NAME_JO_TOKEN)
  private UUID joToken;

  public static final String SERIALIZED_NAME_JO_USER = "JOUser";
  @SerializedName(SERIALIZED_NAME_JO_USER)
  private String joUser;

  public GetWebSpoonLoginUrlRequest() {
  }

  public GetWebSpoonLoginUrlRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The Id of the Template Builder instance from @(ListWebSpoon) or @(CreateWebSpoon)
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetWebSpoonLoginUrlRequest joClient(String joClient) {
    this.joClient = joClient;
    return this;
  }

   /**
   * The default JO client to assign
   * @return joClient
  **/
  @javax.annotation.Nullable
  public String getJoClient() {
    return joClient;
  }

  public void setJoClient(String joClient) {
    this.joClient = joClient;
  }


  public GetWebSpoonLoginUrlRequest joToken(UUID joToken) {
    this.joToken = joToken;
    return this;
  }

   /**
   * A valid JO token
   * @return joToken
  **/
  @javax.annotation.Nullable
  public UUID getJoToken() {
    return joToken;
  }

  public void setJoToken(UUID joToken) {
    this.joToken = joToken;
  }


  public GetWebSpoonLoginUrlRequest joUser(String joUser) {
    this.joUser = joUser;
    return this;
  }

   /**
   * The same user which was passed to @see(CreateWebSpoon)
   * @return joUser
  **/
  @javax.annotation.Nullable
  public String getJoUser() {
    return joUser;
  }

  public void setJoUser(String joUser) {
    this.joUser = joUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest = (GetWebSpoonLoginUrlRequest) o;
    return Objects.equals(this.id, getWebSpoonLoginUrlRequest.id) &&
        Objects.equals(this.joClient, getWebSpoonLoginUrlRequest.joClient) &&
        Objects.equals(this.joToken, getWebSpoonLoginUrlRequest.joToken) &&
        Objects.equals(this.joUser, getWebSpoonLoginUrlRequest.joUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, joClient, joToken, joUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWebSpoonLoginUrlRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    joClient: ").append(toIndentedString(joClient)).append("\n");
    sb.append("    joToken: ").append(toIndentedString(joToken)).append("\n");
    sb.append("    joUser: ").append(toIndentedString(joUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("JOClient");
    openapiFields.add("JOToken");
    openapiFields.add("JOUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetWebSpoonLoginUrlRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWebSpoonLoginUrlRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWebSpoonLoginUrlRequest is not found in the empty JSON string", GetWebSpoonLoginUrlRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWebSpoonLoginUrlRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWebSpoonLoginUrlRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("JOClient") != null && !jsonObj.get("JOClient").isJsonNull()) && !jsonObj.get("JOClient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JOClient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JOClient").toString()));
      }
      if ((jsonObj.get("JOToken") != null && !jsonObj.get("JOToken").isJsonNull()) && !jsonObj.get("JOToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JOToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JOToken").toString()));
      }
      if ((jsonObj.get("JOUser") != null && !jsonObj.get("JOUser").isJsonNull()) && !jsonObj.get("JOUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JOUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JOUser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWebSpoonLoginUrlRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWebSpoonLoginUrlRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWebSpoonLoginUrlRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWebSpoonLoginUrlRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWebSpoonLoginUrlRequest>() {
           @Override
           public void write(JsonWriter out, GetWebSpoonLoginUrlRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWebSpoonLoginUrlRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetWebSpoonLoginUrlRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetWebSpoonLoginUrlRequest
  * @throws IOException if the JSON string is invalid with respect to GetWebSpoonLoginUrlRequest
  */
  public static GetWebSpoonLoginUrlRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWebSpoonLoginUrlRequest.class);
  }

 /**
  * Convert an instance of GetWebSpoonLoginUrlRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

