/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMFieldStorageType;
import com.alterian.ja.model.DMFieldType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMField {
  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "FieldType";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private DMFieldType fieldType;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_IS_SEED = "IsSeed";
  @SerializedName(SERIALIZED_NAME_IS_SEED)
  private Boolean isSeed;

  public static final String SERIALIZED_NAME_LIST_FIELD = "ListField";
  @SerializedName(SERIALIZED_NAME_LIST_FIELD)
  private Boolean listField;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "PrimaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private Boolean primaryKey;

  public static final String SERIALIZED_NAME_SOURCE_COLUMN = "SourceColumn";
  @SerializedName(SERIALIZED_NAME_SOURCE_COLUMN)
  private String sourceColumn;

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "StorageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private DMFieldStorageType storageType;

  public static final String SERIALIZED_NAME_USER_ACCESS = "UserAccess";
  @SerializedName(SERIALIZED_NAME_USER_ACCESS)
  private Boolean userAccess;

  public static final String SERIALIZED_NAME_USER_OPT_OUT = "UserOptOut";
  @SerializedName(SERIALIZED_NAME_USER_OPT_OUT)
  private Boolean userOptOut;

  public DMField() {
  }

  public DMField created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * 
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public DMField fieldType(DMFieldType fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @javax.annotation.Nullable
  public DMFieldType getFieldType() {
    return fieldType;
  }

  public void setFieldType(DMFieldType fieldType) {
    this.fieldType = fieldType;
  }


  public DMField ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public DMField isSeed(Boolean isSeed) {
    this.isSeed = isSeed;
    return this;
  }

   /**
   * 
   * @return isSeed
  **/
  @javax.annotation.Nullable
  public Boolean getIsSeed() {
    return isSeed;
  }

  public void setIsSeed(Boolean isSeed) {
    this.isSeed = isSeed;
  }


  public DMField listField(Boolean listField) {
    this.listField = listField;
    return this;
  }

   /**
   * 
   * @return listField
  **/
  @javax.annotation.Nullable
  public Boolean getListField() {
    return listField;
  }

  public void setListField(Boolean listField) {
    this.listField = listField;
  }


  public DMField modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * 
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public DMField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DMField primaryKey(Boolean primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

   /**
   * 
   * @return primaryKey
  **/
  @javax.annotation.Nullable
  public Boolean getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(Boolean primaryKey) {
    this.primaryKey = primaryKey;
  }


  public DMField sourceColumn(String sourceColumn) {
    this.sourceColumn = sourceColumn;
    return this;
  }

   /**
   * 
   * @return sourceColumn
  **/
  @javax.annotation.Nullable
  public String getSourceColumn() {
    return sourceColumn;
  }

  public void setSourceColumn(String sourceColumn) {
    this.sourceColumn = sourceColumn;
  }


  public DMField storageType(DMFieldStorageType storageType) {
    this.storageType = storageType;
    return this;
  }

   /**
   * Get storageType
   * @return storageType
  **/
  @javax.annotation.Nullable
  public DMFieldStorageType getStorageType() {
    return storageType;
  }

  public void setStorageType(DMFieldStorageType storageType) {
    this.storageType = storageType;
  }


  public DMField userAccess(Boolean userAccess) {
    this.userAccess = userAccess;
    return this;
  }

   /**
   * 
   * @return userAccess
  **/
  @javax.annotation.Nullable
  public Boolean getUserAccess() {
    return userAccess;
  }

  public void setUserAccess(Boolean userAccess) {
    this.userAccess = userAccess;
  }


  public DMField userOptOut(Boolean userOptOut) {
    this.userOptOut = userOptOut;
    return this;
  }

   /**
   * 
   * @return userOptOut
  **/
  @javax.annotation.Nullable
  public Boolean getUserOptOut() {
    return userOptOut;
  }

  public void setUserOptOut(Boolean userOptOut) {
    this.userOptOut = userOptOut;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMField dmField = (DMField) o;
    return Objects.equals(this.created, dmField.created) &&
        Objects.equals(this.fieldType, dmField.fieldType) &&
        Objects.equals(this.ID, dmField.ID) &&
        Objects.equals(this.isSeed, dmField.isSeed) &&
        Objects.equals(this.listField, dmField.listField) &&
        Objects.equals(this.modified, dmField.modified) &&
        Objects.equals(this.name, dmField.name) &&
        Objects.equals(this.primaryKey, dmField.primaryKey) &&
        Objects.equals(this.sourceColumn, dmField.sourceColumn) &&
        Objects.equals(this.storageType, dmField.storageType) &&
        Objects.equals(this.userAccess, dmField.userAccess) &&
        Objects.equals(this.userOptOut, dmField.userOptOut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, fieldType, ID, isSeed, listField, modified, name, primaryKey, sourceColumn, storageType, userAccess, userOptOut);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMField {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    isSeed: ").append(toIndentedString(isSeed)).append("\n");
    sb.append("    listField: ").append(toIndentedString(listField)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    sourceColumn: ").append(toIndentedString(sourceColumn)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    userAccess: ").append(toIndentedString(userAccess)).append("\n");
    sb.append("    userOptOut: ").append(toIndentedString(userOptOut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Created");
    openapiFields.add("FieldType");
    openapiFields.add("ID");
    openapiFields.add("IsSeed");
    openapiFields.add("ListField");
    openapiFields.add("Modified");
    openapiFields.add("Name");
    openapiFields.add("PrimaryKey");
    openapiFields.add("SourceColumn");
    openapiFields.add("StorageType");
    openapiFields.add("UserAccess");
    openapiFields.add("UserOptOut");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMField
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMField is not found in the empty JSON string", DMField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FieldType`
      if (jsonObj.get("FieldType") != null && !jsonObj.get("FieldType").isJsonNull()) {
        DMFieldType.validateJsonElement(jsonObj.get("FieldType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SourceColumn") != null && !jsonObj.get("SourceColumn").isJsonNull()) && !jsonObj.get("SourceColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceColumn").toString()));
      }
      // validate the optional field `StorageType`
      if (jsonObj.get("StorageType") != null && !jsonObj.get("StorageType").isJsonNull()) {
        DMFieldStorageType.validateJsonElement(jsonObj.get("StorageType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMField.class));

       return (TypeAdapter<T>) new TypeAdapter<DMField>() {
           @Override
           public void write(JsonWriter out, DMField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMField
  * @throws IOException if the JSON string is invalid with respect to DMField
  */
  public static DMField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMField.class);
  }

 /**
  * Convert an instance of DMField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

