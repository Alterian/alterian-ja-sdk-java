/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * A folder is a logical container for items which match the foldertype.  All folders have security applied to them, with the exception of @see(ALUser) and @see(ALUserGroup) folders.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Folder {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUB_FOLDERS = "SubFolders";
  @SerializedName(SERIALIZED_NAME_SUB_FOLDERS)
  private List<Folder> subFolders;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Object> items;

  public static final String SERIALIZED_NAME_SYSTEM = "System";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_PARENT_I_D = "ParentID";
  @SerializedName(SERIALIZED_NAME_PARENT_I_D)
  private Integer parentID;

  public static final String SERIALIZED_NAME_ACCESS_VIEW = "AccessView";
  @SerializedName(SERIALIZED_NAME_ACCESS_VIEW)
  private Boolean accessView;

  public static final String SERIALIZED_NAME_ACCESS_MODIFY = "AccessModify";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODIFY)
  private Boolean accessModify;

  public static final String SERIALIZED_NAME_OWNER_I_D = "OwnerID";
  @SerializedName(SERIALIZED_NAME_OWNER_I_D)
  private Integer ownerID;

  public static final String SERIALIZED_NAME_HIDDEN = "Hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ANCESTOR_FOLDER_I_DS = "AncestorFolderIDs";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_FOLDER_I_DS)
  private List<Integer> ancestorFolderIDs;

  public static final String SERIALIZED_NAME_CHILD_COUNT = "ChildCount";
  @SerializedName(SERIALIZED_NAME_CHILD_COUNT)
  private Integer childCount;

  public Folder() {
  }

  public Folder ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * ID of the folder; always unique
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public Folder name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the folder; only unique within a ParentID and FolderType
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Folder subFolders(List<Folder> subFolders) {
    this.subFolders = subFolders;
    return this;
  }

  public Folder addSubFoldersItem(Folder subFoldersItem) {
    if (this.subFolders == null) {
      this.subFolders = new ArrayList<>();
    }
    this.subFolders.add(subFoldersItem);
    return this;
  }

   /**
   * GUI helper property; not filled in by the API
   * @return subFolders
  **/
  @javax.annotation.Nullable
  public List<Folder> getSubFolders() {
    return subFolders;
  }

  public void setSubFolders(List<Folder> subFolders) {
    this.subFolders = subFolders;
  }


  public Folder items(List<Object> items) {
    this.items = items;
    return this;
  }

  public Folder addItemsItem(Object itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * GUI helper property; not filled in by the API
   * @return items
  **/
  @javax.annotation.Nullable
  public List<Object> getItems() {
    return items;
  }

  public void setItems(List<Object> items) {
    this.items = items;
  }


  public Folder system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * Is this a system folder?  You can&#39;t delete system folders
   * @return system
  **/
  @javax.annotation.Nullable
  public Boolean getSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }


  public Folder parentID(Integer parentID) {
    this.parentID = parentID;
    return this;
  }

   /**
   * Parent of this folder; null means it is a root folder
   * @return parentID
  **/
  @javax.annotation.Nullable
  public Integer getParentID() {
    return parentID;
  }

  public void setParentID(Integer parentID) {
    this.parentID = parentID;
  }


  public Folder accessView(Boolean accessView) {
    this.accessView = accessView;
    return this;
  }

   /**
   * Can the user view this folder
   * @return accessView
  **/
  @javax.annotation.Nullable
  public Boolean getAccessView() {
    return accessView;
  }

  public void setAccessView(Boolean accessView) {
    this.accessView = accessView;
  }


  public Folder accessModify(Boolean accessModify) {
    this.accessModify = accessModify;
    return this;
  }

   /**
   * Can the user modify this folder in some way [rename, etc.]
   * @return accessModify
  **/
  @javax.annotation.Nullable
  public Boolean getAccessModify() {
    return accessModify;
  }

  public void setAccessModify(Boolean accessModify) {
    this.accessModify = accessModify;
  }


  public Folder ownerID(Integer ownerID) {
    this.ownerID = ownerID;
    return this;
  }

   /**
   * The owner of this folder.  This typically starts out as the creator of the folder.
   * @return ownerID
  **/
  @javax.annotation.Nullable
  public Integer getOwnerID() {
    return ownerID;
  }

  public void setOwnerID(Integer ownerID) {
    this.ownerID = ownerID;
  }


  public Folder hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Has this folder been flagged as \&quot;hidden\&quot;
   * @return hidden
  **/
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public Folder ancestorFolderIDs(List<Integer> ancestorFolderIDs) {
    this.ancestorFolderIDs = ancestorFolderIDs;
    return this;
  }

  public Folder addAncestorFolderIDsItem(Integer ancestorFolderIDsItem) {
    if (this.ancestorFolderIDs == null) {
      this.ancestorFolderIDs = new ArrayList<>();
    }
    this.ancestorFolderIDs.add(ancestorFolderIDsItem);
    return this;
  }

   /**
   * The ids of all the folders under the root that are ancestors of this one, ordered from parent to child             Only populated by the GetFolder API
   * @return ancestorFolderIDs
  **/
  @javax.annotation.Nullable
  public List<Integer> getAncestorFolderIDs() {
    return ancestorFolderIDs;
  }

  public void setAncestorFolderIDs(List<Integer> ancestorFolderIDs) {
    this.ancestorFolderIDs = ancestorFolderIDs;
  }


  public Folder childCount(Integer childCount) {
    this.childCount = childCount;
    return this;
  }

   /**
   * Count of the folders immediate children
   * @return childCount
  **/
  @javax.annotation.Nullable
  public Integer getChildCount() {
    return childCount;
  }

  public void setChildCount(Integer childCount) {
    this.childCount = childCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.ID, folder.ID) &&
        Objects.equals(this.name, folder.name) &&
        Objects.equals(this.subFolders, folder.subFolders) &&
        Objects.equals(this.items, folder.items) &&
        Objects.equals(this.system, folder.system) &&
        Objects.equals(this.parentID, folder.parentID) &&
        Objects.equals(this.accessView, folder.accessView) &&
        Objects.equals(this.accessModify, folder.accessModify) &&
        Objects.equals(this.ownerID, folder.ownerID) &&
        Objects.equals(this.hidden, folder.hidden) &&
        Objects.equals(this.ancestorFolderIDs, folder.ancestorFolderIDs) &&
        Objects.equals(this.childCount, folder.childCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, subFolders, items, system, parentID, accessView, accessModify, ownerID, hidden, ancestorFolderIDs, childCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subFolders: ").append(toIndentedString(subFolders)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    accessView: ").append(toIndentedString(accessView)).append("\n");
    sb.append("    accessModify: ").append(toIndentedString(accessModify)).append("\n");
    sb.append("    ownerID: ").append(toIndentedString(ownerID)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    ancestorFolderIDs: ").append(toIndentedString(ancestorFolderIDs)).append("\n");
    sb.append("    childCount: ").append(toIndentedString(childCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("SubFolders");
    openapiFields.add("Items");
    openapiFields.add("System");
    openapiFields.add("ParentID");
    openapiFields.add("AccessView");
    openapiFields.add("AccessModify");
    openapiFields.add("OwnerID");
    openapiFields.add("Hidden");
    openapiFields.add("AncestorFolderIDs");
    openapiFields.add("ChildCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Folder
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Folder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Folder is not found in the empty JSON string", Folder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Folder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Folder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("SubFolders") != null && !jsonObj.get("SubFolders").isJsonNull()) {
        JsonArray jsonArraysubFolders = jsonObj.getAsJsonArray("SubFolders");
        if (jsonArraysubFolders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SubFolders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SubFolders` to be an array in the JSON string but got `%s`", jsonObj.get("SubFolders").toString()));
          }

          // validate the optional field `SubFolders` (array)
          for (int i = 0; i < jsonArraysubFolders.size(); i++) {
            Folder.validateJsonElement(jsonArraysubFolders.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull() && !jsonObj.get("Items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AncestorFolderIDs") != null && !jsonObj.get("AncestorFolderIDs").isJsonNull() && !jsonObj.get("AncestorFolderIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AncestorFolderIDs` to be an array in the JSON string but got `%s`", jsonObj.get("AncestorFolderIDs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Folder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Folder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Folder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Folder.class));

       return (TypeAdapter<T>) new TypeAdapter<Folder>() {
           @Override
           public void write(JsonWriter out, Folder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Folder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Folder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Folder
  * @throws IOException if the JSON string is invalid with respect to Folder
  */
  public static Folder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Folder.class);
  }

 /**
  * Convert an instance of Folder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

