/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ColumnDataType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * Structure for holding the basic column information for a record
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class RecordColumn {
  public static final String SERIALIZED_NAME_HANDLE = "Handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private Integer handle;

  public static final String SERIALIZED_NAME_NAME_EX = "NameEx";
  @SerializedName(SERIALIZED_NAME_NAME_EX)
  private String nameEx;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private ColumnDataType dataType;

  public static final String SERIALIZED_NAME_IS_INDEXED = "IsIndexed";
  @SerializedName(SERIALIZED_NAME_IS_INDEXED)
  private Boolean isIndexed;

  public static final String SERIALIZED_NAME_IS_SORTABLE = "IsSortable";
  @SerializedName(SERIALIZED_NAME_IS_SORTABLE)
  private Boolean isSortable;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_RECORD_COUNT = "RecordCount";
  @SerializedName(SERIALIZED_NAME_RECORD_COUNT)
  private Long recordCount;

  public static final String SERIALIZED_NAME_PRECISION = "Precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  public static final String SERIALIZED_NAME_SNAPSHOT = "Snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private Boolean snapshot;

  public static final String SERIALIZED_NAME_DELETE_ON_DATA_CHANGE = "DeleteOnDataChange";
  @SerializedName(SERIALIZED_NAME_DELETE_ON_DATA_CHANGE)
  private Boolean deleteOnDataChange;

  public static final String SERIALIZED_NAME_NUMBEROF_NULLS = "NumberofNulls";
  @SerializedName(SERIALIZED_NAME_NUMBEROF_NULLS)
  private Long numberofNulls;

  public RecordColumn() {
  }

  public RecordColumn handle(Integer handle) {
    this.handle = handle;
    return this;
  }

   /**
   * The Engine Handle
   * @return handle
  **/
  @javax.annotation.Nullable
  public Integer getHandle() {
    return handle;
  }

  public void setHandle(Integer handle) {
    this.handle = handle;
  }


  public RecordColumn nameEx(String nameEx) {
    this.nameEx = nameEx;
    return this;
  }

   /**
   * The NameEx
   * @return nameEx
  **/
  @javax.annotation.Nullable
  public String getNameEx() {
    return nameEx;
  }

  public void setNameEx(String nameEx) {
    this.nameEx = nameEx;
  }


  public RecordColumn name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The Short Name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RecordColumn description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The Description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RecordColumn type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The column type expressed as a textual description (as per Engine sheet)
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public RecordColumn dataType(ColumnDataType dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @javax.annotation.Nullable
  public ColumnDataType getDataType() {
    return dataType;
  }

  public void setDataType(ColumnDataType dataType) {
    this.dataType = dataType;
  }


  public RecordColumn isIndexed(Boolean isIndexed) {
    this.isIndexed = isIndexed;
    return this;
  }

   /**
   * 
   * @return isIndexed
  **/
  @javax.annotation.Nullable
  public Boolean getIsIndexed() {
    return isIndexed;
  }

  public void setIsIndexed(Boolean isIndexed) {
    this.isIndexed = isIndexed;
  }


  public RecordColumn isSortable(Boolean isSortable) {
    this.isSortable = isSortable;
    return this;
  }

   /**
   * Flag indicating if the column is sortable
   * @return isSortable
  **/
  @javax.annotation.Nullable
  public Boolean getIsSortable() {
    return isSortable;
  }

  public void setIsSortable(Boolean isSortable) {
    this.isSortable = isSortable;
  }


  public RecordColumn width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * Current maximum width of this column.
   * @return width
  **/
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  public RecordColumn recordCount(Long recordCount) {
    this.recordCount = recordCount;
    return this;
  }

   /**
   * The total number of records in this column
   * @return recordCount
  **/
  @javax.annotation.Nullable
  public Long getRecordCount() {
    return recordCount;
  }

  public void setRecordCount(Long recordCount) {
    this.recordCount = recordCount;
  }


  public RecordColumn precision(Integer precision) {
    this.precision = precision;
    return this;
  }

   /**
   * Precision of this column, if it is a decimal type
   * @return precision
  **/
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public RecordColumn snapshot(Boolean snapshot) {
    this.snapshot = snapshot;
    return this;
  }

   /**
   * Is this column a snapshotted column?
   * @return snapshot
  **/
  @javax.annotation.Nullable
  public Boolean getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(Boolean snapshot) {
    this.snapshot = snapshot;
  }


  public RecordColumn deleteOnDataChange(Boolean deleteOnDataChange) {
    this.deleteOnDataChange = deleteOnDataChange;
    return this;
  }

   /**
   * Will this column get deleted on data change?
   * @return deleteOnDataChange
  **/
  @javax.annotation.Nullable
  public Boolean getDeleteOnDataChange() {
    return deleteOnDataChange;
  }

  public void setDeleteOnDataChange(Boolean deleteOnDataChange) {
    this.deleteOnDataChange = deleteOnDataChange;
  }


  public RecordColumn numberofNulls(Long numberofNulls) {
    this.numberofNulls = numberofNulls;
    return this;
  }

   /**
   * The number of nulls in this column; if the column is engineered, etc. and has not been calculated, this will be -1
   * @return numberofNulls
  **/
  @javax.annotation.Nullable
  public Long getNumberofNulls() {
    return numberofNulls;
  }

  public void setNumberofNulls(Long numberofNulls) {
    this.numberofNulls = numberofNulls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordColumn recordColumn = (RecordColumn) o;
    return Objects.equals(this.handle, recordColumn.handle) &&
        Objects.equals(this.nameEx, recordColumn.nameEx) &&
        Objects.equals(this.name, recordColumn.name) &&
        Objects.equals(this.description, recordColumn.description) &&
        Objects.equals(this.type, recordColumn.type) &&
        Objects.equals(this.dataType, recordColumn.dataType) &&
        Objects.equals(this.isIndexed, recordColumn.isIndexed) &&
        Objects.equals(this.isSortable, recordColumn.isSortable) &&
        Objects.equals(this.width, recordColumn.width) &&
        Objects.equals(this.recordCount, recordColumn.recordCount) &&
        Objects.equals(this.precision, recordColumn.precision) &&
        Objects.equals(this.snapshot, recordColumn.snapshot) &&
        Objects.equals(this.deleteOnDataChange, recordColumn.deleteOnDataChange) &&
        Objects.equals(this.numberofNulls, recordColumn.numberofNulls);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(handle, nameEx, name, description, type, dataType, isIndexed, isSortable, width, recordCount, precision, snapshot, deleteOnDataChange, numberofNulls);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordColumn {\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    nameEx: ").append(toIndentedString(nameEx)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    isIndexed: ").append(toIndentedString(isIndexed)).append("\n");
    sb.append("    isSortable: ").append(toIndentedString(isSortable)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    recordCount: ").append(toIndentedString(recordCount)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    deleteOnDataChange: ").append(toIndentedString(deleteOnDataChange)).append("\n");
    sb.append("    numberofNulls: ").append(toIndentedString(numberofNulls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Handle");
    openapiFields.add("NameEx");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("Type");
    openapiFields.add("DataType");
    openapiFields.add("IsIndexed");
    openapiFields.add("IsSortable");
    openapiFields.add("Width");
    openapiFields.add("RecordCount");
    openapiFields.add("Precision");
    openapiFields.add("Snapshot");
    openapiFields.add("DeleteOnDataChange");
    openapiFields.add("NumberofNulls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecordColumn
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordColumn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordColumn is not found in the empty JSON string", RecordColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordColumn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("NameEx") != null && !jsonObj.get("NameEx").isJsonNull()) && !jsonObj.get("NameEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NameEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NameEx").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `DataType`
      if (jsonObj.get("DataType") != null && !jsonObj.get("DataType").isJsonNull()) {
        ColumnDataType.validateJsonElement(jsonObj.get("DataType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordColumn>() {
           @Override
           public void write(JsonWriter out, RecordColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordColumn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecordColumn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecordColumn
  * @throws IOException if the JSON string is invalid with respect to RecordColumn
  */
  public static RecordColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordColumn.class);
  }

 /**
  * Convert an instance of RecordColumn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

