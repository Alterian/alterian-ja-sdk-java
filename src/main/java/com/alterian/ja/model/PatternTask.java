/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.PatternTaskState;
import com.alterian.ja.model.PatternTaskType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class PatternTask {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_STARTED = "Started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public static final String SERIALIZED_NAME_FINISHED = "Finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private OffsetDateTime finished;

  public static final String SERIALIZED_NAME_TASK_TYPE = "TaskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private PatternTaskType taskType;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PatternTaskState state;

  public static final String SERIALIZED_NAME_LOG_TEXT = "LogText";
  @SerializedName(SERIALIZED_NAME_LOG_TEXT)
  private String logText;

  public static final String SERIALIZED_NAME_PATTERN_ID = "PatternId";
  @SerializedName(SERIALIZED_NAME_PATTERN_ID)
  private Integer patternId;

  public PatternTask() {
  }

  public PatternTask id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PatternTask created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * 
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public PatternTask started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

   /**
   * 
   * @return started
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public PatternTask finished(OffsetDateTime finished) {
    this.finished = finished;
    return this;
  }

   /**
   * 
   * @return finished
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFinished() {
    return finished;
  }

  public void setFinished(OffsetDateTime finished) {
    this.finished = finished;
  }


  public PatternTask taskType(PatternTaskType taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @javax.annotation.Nullable
  public PatternTaskType getTaskType() {
    return taskType;
  }

  public void setTaskType(PatternTaskType taskType) {
    this.taskType = taskType;
  }


  public PatternTask state(PatternTaskState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public PatternTaskState getState() {
    return state;
  }

  public void setState(PatternTaskState state) {
    this.state = state;
  }


  public PatternTask logText(String logText) {
    this.logText = logText;
    return this;
  }

   /**
   * 
   * @return logText
  **/
  @javax.annotation.Nullable
  public String getLogText() {
    return logText;
  }

  public void setLogText(String logText) {
    this.logText = logText;
  }


  public PatternTask patternId(Integer patternId) {
    this.patternId = patternId;
    return this;
  }

   /**
   * 
   * @return patternId
  **/
  @javax.annotation.Nullable
  public Integer getPatternId() {
    return patternId;
  }

  public void setPatternId(Integer patternId) {
    this.patternId = patternId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatternTask patternTask = (PatternTask) o;
    return Objects.equals(this.id, patternTask.id) &&
        Objects.equals(this.created, patternTask.created) &&
        Objects.equals(this.started, patternTask.started) &&
        Objects.equals(this.finished, patternTask.finished) &&
        Objects.equals(this.taskType, patternTask.taskType) &&
        Objects.equals(this.state, patternTask.state) &&
        Objects.equals(this.logText, patternTask.logText) &&
        Objects.equals(this.patternId, patternTask.patternId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, created, started, finished, taskType, state, logText, patternId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatternTask {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    logText: ").append(toIndentedString(logText)).append("\n");
    sb.append("    patternId: ").append(toIndentedString(patternId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Created");
    openapiFields.add("Started");
    openapiFields.add("Finished");
    openapiFields.add("TaskType");
    openapiFields.add("State");
    openapiFields.add("LogText");
    openapiFields.add("PatternId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PatternTask
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatternTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatternTask is not found in the empty JSON string", PatternTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatternTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatternTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TaskType`
      if (jsonObj.get("TaskType") != null && !jsonObj.get("TaskType").isJsonNull()) {
        PatternTaskType.validateJsonElement(jsonObj.get("TaskType"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        PatternTaskState.validateJsonElement(jsonObj.get("State"));
      }
      if ((jsonObj.get("LogText") != null && !jsonObj.get("LogText").isJsonNull()) && !jsonObj.get("LogText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatternTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatternTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatternTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatternTask.class));

       return (TypeAdapter<T>) new TypeAdapter<PatternTask>() {
           @Override
           public void write(JsonWriter out, PatternTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatternTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatternTask given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatternTask
  * @throws IOException if the JSON string is invalid with respect to PatternTask
  */
  public static PatternTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatternTask.class);
  }

 /**
  * Convert an instance of PatternTask to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

