/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMEditorType;
import com.alterian.ja.model.DMVariableType;
import com.alterian.ja.model.DMVariableValue;
import com.alterian.ja.model.EMDocument;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EMVariable {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SAMPLE_VALUE = "SampleValue";
  @SerializedName(SERIALIZED_NAME_SAMPLE_VALUE)
  private String sampleValue;

  public static final String SERIALIZED_NAME_USE_DEFAULT_FOR_SAMPLE = "UseDefaultForSample";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT_FOR_SAMPLE)
  private Boolean useDefaultForSample;

  public static final String SERIALIZED_NAME_USED_BY = "UsedBy";
  @SerializedName(SERIALIZED_NAME_USED_BY)
  private List<EMDocument> usedBy;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEFAULT_FIELD = "DefaultField";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FIELD)
  private Integer defaultField;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private DMVariableValue defaultValue;

  public static final String SERIALIZED_NAME_EDITOR_TYPE = "EditorType";
  @SerializedName(SERIALIZED_NAME_EDITOR_TYPE)
  private DMEditorType editorType;

  public static final String SERIALIZED_NAME_FORCE_MAP = "ForceMap";
  @SerializedName(SERIALIZED_NAME_FORCE_MAP)
  private Boolean forceMap;

  public static final String SERIALIZED_NAME_HIDDEN = "Hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_LOOKUP_COMBO = "LookupCombo";
  @SerializedName(SERIALIZED_NAME_LOOKUP_COMBO)
  private Integer lookupCombo;

  public static final String SERIALIZED_NAME_LOOKUP_I_D = "LookupID";
  @SerializedName(SERIALIZED_NAME_LOOKUP_I_D)
  private Integer lookupID;

  public static final String SERIALIZED_NAME_LOOKUP_RESULT = "LookupResult";
  @SerializedName(SERIALIZED_NAME_LOOKUP_RESULT)
  private Integer lookupResult;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARSE_NAME = "ParseName";
  @SerializedName(SERIALIZED_NAME_PARSE_NAME)
  private String parseName;

  public static final String SERIALIZED_NAME_READONLY = "Readonly";
  @SerializedName(SERIALIZED_NAME_READONLY)
  private Boolean readonly;

  public static final String SERIALIZED_NAME_REQUIRED = "Required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_ROW_ORDER = "RowOrder";
  @SerializedName(SERIALIZED_NAME_ROW_ORDER)
  private Integer rowOrder;

  public static final String SERIALIZED_NAME_SHARED = "Shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private Boolean shared;

  public static final String SERIALIZED_NAME_SYSTEM = "System";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_VARIABLE_TYPE = "VariableType";
  @SerializedName(SERIALIZED_NAME_VARIABLE_TYPE)
  private DMVariableType variableType;

  public EMVariable() {
  }

  public EMVariable description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EMVariable sampleValue(String sampleValue) {
    this.sampleValue = sampleValue;
    return this;
  }

   /**
   * 
   * @return sampleValue
  **/
  @javax.annotation.Nullable
  public String getSampleValue() {
    return sampleValue;
  }

  public void setSampleValue(String sampleValue) {
    this.sampleValue = sampleValue;
  }


  public EMVariable useDefaultForSample(Boolean useDefaultForSample) {
    this.useDefaultForSample = useDefaultForSample;
    return this;
  }

   /**
   * 
   * @return useDefaultForSample
  **/
  @javax.annotation.Nullable
  public Boolean getUseDefaultForSample() {
    return useDefaultForSample;
  }

  public void setUseDefaultForSample(Boolean useDefaultForSample) {
    this.useDefaultForSample = useDefaultForSample;
  }


  public EMVariable usedBy(List<EMDocument> usedBy) {
    this.usedBy = usedBy;
    return this;
  }

  public EMVariable addUsedByItem(EMDocument usedByItem) {
    if (this.usedBy == null) {
      this.usedBy = new ArrayList<>();
    }
    this.usedBy.add(usedByItem);
    return this;
  }

   /**
   * 
   * @return usedBy
  **/
  @javax.annotation.Nullable
  public List<EMDocument> getUsedBy() {
    return usedBy;
  }

  public void setUsedBy(List<EMDocument> usedBy) {
    this.usedBy = usedBy;
  }


  public EMVariable created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * 
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public EMVariable defaultField(Integer defaultField) {
    this.defaultField = defaultField;
    return this;
  }

   /**
   * 
   * @return defaultField
  **/
  @javax.annotation.Nullable
  public Integer getDefaultField() {
    return defaultField;
  }

  public void setDefaultField(Integer defaultField) {
    this.defaultField = defaultField;
  }


  public EMVariable defaultValue(DMVariableValue defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  public DMVariableValue getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(DMVariableValue defaultValue) {
    this.defaultValue = defaultValue;
  }


  public EMVariable editorType(DMEditorType editorType) {
    this.editorType = editorType;
    return this;
  }

   /**
   * Get editorType
   * @return editorType
  **/
  @javax.annotation.Nullable
  public DMEditorType getEditorType() {
    return editorType;
  }

  public void setEditorType(DMEditorType editorType) {
    this.editorType = editorType;
  }


  public EMVariable forceMap(Boolean forceMap) {
    this.forceMap = forceMap;
    return this;
  }

   /**
   * 
   * @return forceMap
  **/
  @javax.annotation.Nullable
  public Boolean getForceMap() {
    return forceMap;
  }

  public void setForceMap(Boolean forceMap) {
    this.forceMap = forceMap;
  }


  public EMVariable hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * 
   * @return hidden
  **/
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public EMVariable ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public EMVariable lookupCombo(Integer lookupCombo) {
    this.lookupCombo = lookupCombo;
    return this;
  }

   /**
   * 
   * @return lookupCombo
  **/
  @javax.annotation.Nullable
  public Integer getLookupCombo() {
    return lookupCombo;
  }

  public void setLookupCombo(Integer lookupCombo) {
    this.lookupCombo = lookupCombo;
  }


  public EMVariable lookupID(Integer lookupID) {
    this.lookupID = lookupID;
    return this;
  }

   /**
   * 
   * @return lookupID
  **/
  @javax.annotation.Nullable
  public Integer getLookupID() {
    return lookupID;
  }

  public void setLookupID(Integer lookupID) {
    this.lookupID = lookupID;
  }


  public EMVariable lookupResult(Integer lookupResult) {
    this.lookupResult = lookupResult;
    return this;
  }

   /**
   * 
   * @return lookupResult
  **/
  @javax.annotation.Nullable
  public Integer getLookupResult() {
    return lookupResult;
  }

  public void setLookupResult(Integer lookupResult) {
    this.lookupResult = lookupResult;
  }


  public EMVariable modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * 
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public EMVariable name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EMVariable parseName(String parseName) {
    this.parseName = parseName;
    return this;
  }

   /**
   * 
   * @return parseName
  **/
  @javax.annotation.Nullable
  public String getParseName() {
    return parseName;
  }

  public void setParseName(String parseName) {
    this.parseName = parseName;
  }


  public EMVariable readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

   /**
   * 
   * @return readonly
  **/
  @javax.annotation.Nullable
  public Boolean getReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }


  public EMVariable required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * 
   * @return required
  **/
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public EMVariable rowOrder(Integer rowOrder) {
    this.rowOrder = rowOrder;
    return this;
  }

   /**
   * 
   * @return rowOrder
  **/
  @javax.annotation.Nullable
  public Integer getRowOrder() {
    return rowOrder;
  }

  public void setRowOrder(Integer rowOrder) {
    this.rowOrder = rowOrder;
  }


  public EMVariable shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

   /**
   * 
   * @return shared
  **/
  @javax.annotation.Nullable
  public Boolean getShared() {
    return shared;
  }

  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public EMVariable system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * 
   * @return system
  **/
  @javax.annotation.Nullable
  public Boolean getSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }


  public EMVariable variableType(DMVariableType variableType) {
    this.variableType = variableType;
    return this;
  }

   /**
   * Get variableType
   * @return variableType
  **/
  @javax.annotation.Nullable
  public DMVariableType getVariableType() {
    return variableType;
  }

  public void setVariableType(DMVariableType variableType) {
    this.variableType = variableType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMVariable emVariable = (EMVariable) o;
    return Objects.equals(this.description, emVariable.description) &&
        Objects.equals(this.sampleValue, emVariable.sampleValue) &&
        Objects.equals(this.useDefaultForSample, emVariable.useDefaultForSample) &&
        Objects.equals(this.usedBy, emVariable.usedBy) &&
        Objects.equals(this.created, emVariable.created) &&
        Objects.equals(this.defaultField, emVariable.defaultField) &&
        Objects.equals(this.defaultValue, emVariable.defaultValue) &&
        Objects.equals(this.editorType, emVariable.editorType) &&
        Objects.equals(this.forceMap, emVariable.forceMap) &&
        Objects.equals(this.hidden, emVariable.hidden) &&
        Objects.equals(this.ID, emVariable.ID) &&
        Objects.equals(this.lookupCombo, emVariable.lookupCombo) &&
        Objects.equals(this.lookupID, emVariable.lookupID) &&
        Objects.equals(this.lookupResult, emVariable.lookupResult) &&
        Objects.equals(this.modified, emVariable.modified) &&
        Objects.equals(this.name, emVariable.name) &&
        Objects.equals(this.parseName, emVariable.parseName) &&
        Objects.equals(this.readonly, emVariable.readonly) &&
        Objects.equals(this.required, emVariable.required) &&
        Objects.equals(this.rowOrder, emVariable.rowOrder) &&
        Objects.equals(this.shared, emVariable.shared) &&
        Objects.equals(this.system, emVariable.system) &&
        Objects.equals(this.variableType, emVariable.variableType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, sampleValue, useDefaultForSample, usedBy, created, defaultField, defaultValue, editorType, forceMap, hidden, ID, lookupCombo, lookupID, lookupResult, modified, name, parseName, readonly, required, rowOrder, shared, system, variableType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMVariable {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sampleValue: ").append(toIndentedString(sampleValue)).append("\n");
    sb.append("    useDefaultForSample: ").append(toIndentedString(useDefaultForSample)).append("\n");
    sb.append("    usedBy: ").append(toIndentedString(usedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    defaultField: ").append(toIndentedString(defaultField)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    editorType: ").append(toIndentedString(editorType)).append("\n");
    sb.append("    forceMap: ").append(toIndentedString(forceMap)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    lookupCombo: ").append(toIndentedString(lookupCombo)).append("\n");
    sb.append("    lookupID: ").append(toIndentedString(lookupID)).append("\n");
    sb.append("    lookupResult: ").append(toIndentedString(lookupResult)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parseName: ").append(toIndentedString(parseName)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    rowOrder: ").append(toIndentedString(rowOrder)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    variableType: ").append(toIndentedString(variableType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("SampleValue");
    openapiFields.add("UseDefaultForSample");
    openapiFields.add("UsedBy");
    openapiFields.add("Created");
    openapiFields.add("DefaultField");
    openapiFields.add("DefaultValue");
    openapiFields.add("EditorType");
    openapiFields.add("ForceMap");
    openapiFields.add("Hidden");
    openapiFields.add("ID");
    openapiFields.add("LookupCombo");
    openapiFields.add("LookupID");
    openapiFields.add("LookupResult");
    openapiFields.add("Modified");
    openapiFields.add("Name");
    openapiFields.add("ParseName");
    openapiFields.add("Readonly");
    openapiFields.add("Required");
    openapiFields.add("RowOrder");
    openapiFields.add("Shared");
    openapiFields.add("System");
    openapiFields.add("VariableType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMVariable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMVariable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMVariable is not found in the empty JSON string", EMVariable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMVariable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMVariable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("SampleValue") != null && !jsonObj.get("SampleValue").isJsonNull()) && !jsonObj.get("SampleValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SampleValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SampleValue").toString()));
      }
      if (jsonObj.get("UsedBy") != null && !jsonObj.get("UsedBy").isJsonNull()) {
        JsonArray jsonArrayusedBy = jsonObj.getAsJsonArray("UsedBy");
        if (jsonArrayusedBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UsedBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UsedBy` to be an array in the JSON string but got `%s`", jsonObj.get("UsedBy").toString()));
          }

          // validate the optional field `UsedBy` (array)
          for (int i = 0; i < jsonArrayusedBy.size(); i++) {
            EMDocument.validateJsonElement(jsonArrayusedBy.get(i));
          };
        }
      }
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        DMVariableValue.validateJsonElement(jsonObj.get("DefaultValue"));
      }
      // validate the optional field `EditorType`
      if (jsonObj.get("EditorType") != null && !jsonObj.get("EditorType").isJsonNull()) {
        DMEditorType.validateJsonElement(jsonObj.get("EditorType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ParseName") != null && !jsonObj.get("ParseName").isJsonNull()) && !jsonObj.get("ParseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParseName").toString()));
      }
      // validate the optional field `VariableType`
      if (jsonObj.get("VariableType") != null && !jsonObj.get("VariableType").isJsonNull()) {
        DMVariableType.validateJsonElement(jsonObj.get("VariableType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMVariable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMVariable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMVariable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMVariable.class));

       return (TypeAdapter<T>) new TypeAdapter<EMVariable>() {
           @Override
           public void write(JsonWriter out, EMVariable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMVariable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMVariable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMVariable
  * @throws IOException if the JSON string is invalid with respect to EMVariable
  */
  public static EMVariable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMVariable.class);
  }

 /**
  * Convert an instance of EMVariable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

