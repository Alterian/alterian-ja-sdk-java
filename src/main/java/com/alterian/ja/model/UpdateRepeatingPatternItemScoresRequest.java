/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * UpdateRepeatingPatternItemScoresRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class UpdateRepeatingPatternItemScoresRequest {
  public static final String SERIALIZED_NAME_DECODE_ID = "DecodeId";
  @SerializedName(SERIALIZED_NAME_DECODE_ID)
  private Integer decodeId;

  public static final String SERIALIZED_NAME_DECODE_VERSION = "DecodeVersion";
  @SerializedName(SERIALIZED_NAME_DECODE_VERSION)
  private Integer decodeVersion;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<String> items;

  public static final String SERIALIZED_NAME_PATTERN_ID = "PatternId";
  @SerializedName(SERIALIZED_NAME_PATTERN_ID)
  private Integer patternId;

  public static final String SERIALIZED_NAME_REPLACE_EXISTING_SCORES = "ReplaceExistingScores";
  @SerializedName(SERIALIZED_NAME_REPLACE_EXISTING_SCORES)
  private Boolean replaceExistingScores;

  public static final String SERIALIZED_NAME_SCORES = "Scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private List<Double> scores;

  public UpdateRepeatingPatternItemScoresRequest() {
  }

  public UpdateRepeatingPatternItemScoresRequest decodeId(Integer decodeId) {
    this.decodeId = decodeId;
    return this;
  }

   /**
   * Optional. Only required if the scores are to be recorded against a transform
   * @return decodeId
  **/
  @javax.annotation.Nullable
  public Integer getDecodeId() {
    return decodeId;
  }

  public void setDecodeId(Integer decodeId) {
    this.decodeId = decodeId;
  }


  public UpdateRepeatingPatternItemScoresRequest decodeVersion(Integer decodeVersion) {
    this.decodeVersion = decodeVersion;
    return this;
  }

   /**
   * Optional. Only required if the scores are to be recorded against a transform
   * @return decodeVersion
  **/
  @javax.annotation.Nullable
  public Integer getDecodeVersion() {
    return decodeVersion;
  }

  public void setDecodeVersion(Integer decodeVersion) {
    this.decodeVersion = decodeVersion;
  }


  public UpdateRepeatingPatternItemScoresRequest items(List<String> items) {
    this.items = items;
    return this;
  }

  public UpdateRepeatingPatternItemScoresRequest addItemsItem(String itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of the sequence items to be re-scored
   * @return items
  **/
  @javax.annotation.Nullable
  public List<String> getItems() {
    return items;
  }

  public void setItems(List<String> items) {
    this.items = items;
  }


  public UpdateRepeatingPatternItemScoresRequest patternId(Integer patternId) {
    this.patternId = patternId;
    return this;
  }

   /**
   * Pattern Id
   * @return patternId
  **/
  @javax.annotation.Nullable
  public Integer getPatternId() {
    return patternId;
  }

  public void setPatternId(Integer patternId) {
    this.patternId = patternId;
  }


  public UpdateRepeatingPatternItemScoresRequest replaceExistingScores(Boolean replaceExistingScores) {
    this.replaceExistingScores = replaceExistingScores;
    return this;
  }

   /**
   * Defaults to False meaning that the update acts in a &#39;cursored&#39; mode - the UI can submit only the modified scores and any existing scores from the previous list version are preserved. When set to true then any existing scores are completely replaced
   * @return replaceExistingScores
  **/
  @javax.annotation.Nullable
  public Boolean getReplaceExistingScores() {
    return replaceExistingScores;
  }

  public void setReplaceExistingScores(Boolean replaceExistingScores) {
    this.replaceExistingScores = replaceExistingScores;
  }


  public UpdateRepeatingPatternItemScoresRequest scores(List<Double> scores) {
    this.scores = scores;
    return this;
  }

  public UpdateRepeatingPatternItemScoresRequest addScoresItem(Double scoresItem) {
    if (this.scores == null) {
      this.scores = new ArrayList<>();
    }
    this.scores.add(scoresItem);
    return this;
  }

   /**
   * List of the scores (must have a 1:1 relationship with Items)
   * @return scores
  **/
  @javax.annotation.Nullable
  public List<Double> getScores() {
    return scores;
  }

  public void setScores(List<Double> scores) {
    this.scores = scores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRepeatingPatternItemScoresRequest updateRepeatingPatternItemScoresRequest = (UpdateRepeatingPatternItemScoresRequest) o;
    return Objects.equals(this.decodeId, updateRepeatingPatternItemScoresRequest.decodeId) &&
        Objects.equals(this.decodeVersion, updateRepeatingPatternItemScoresRequest.decodeVersion) &&
        Objects.equals(this.items, updateRepeatingPatternItemScoresRequest.items) &&
        Objects.equals(this.patternId, updateRepeatingPatternItemScoresRequest.patternId) &&
        Objects.equals(this.replaceExistingScores, updateRepeatingPatternItemScoresRequest.replaceExistingScores) &&
        Objects.equals(this.scores, updateRepeatingPatternItemScoresRequest.scores);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(decodeId, decodeVersion, items, patternId, replaceExistingScores, scores);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRepeatingPatternItemScoresRequest {\n");
    sb.append("    decodeId: ").append(toIndentedString(decodeId)).append("\n");
    sb.append("    decodeVersion: ").append(toIndentedString(decodeVersion)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    patternId: ").append(toIndentedString(patternId)).append("\n");
    sb.append("    replaceExistingScores: ").append(toIndentedString(replaceExistingScores)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DecodeId");
    openapiFields.add("DecodeVersion");
    openapiFields.add("Items");
    openapiFields.add("PatternId");
    openapiFields.add("ReplaceExistingScores");
    openapiFields.add("Scores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateRepeatingPatternItemScoresRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRepeatingPatternItemScoresRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRepeatingPatternItemScoresRequest is not found in the empty JSON string", UpdateRepeatingPatternItemScoresRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRepeatingPatternItemScoresRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRepeatingPatternItemScoresRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull() && !jsonObj.get("Items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Scores") != null && !jsonObj.get("Scores").isJsonNull() && !jsonObj.get("Scores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Scores` to be an array in the JSON string but got `%s`", jsonObj.get("Scores").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRepeatingPatternItemScoresRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRepeatingPatternItemScoresRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRepeatingPatternItemScoresRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRepeatingPatternItemScoresRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRepeatingPatternItemScoresRequest>() {
           @Override
           public void write(JsonWriter out, UpdateRepeatingPatternItemScoresRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRepeatingPatternItemScoresRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateRepeatingPatternItemScoresRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateRepeatingPatternItemScoresRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateRepeatingPatternItemScoresRequest
  */
  public static UpdateRepeatingPatternItemScoresRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRepeatingPatternItemScoresRequest.class);
  }

 /**
  * Convert an instance of UpdateRepeatingPatternItemScoresRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

