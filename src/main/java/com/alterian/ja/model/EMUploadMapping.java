/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.EMClient;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * Provides an upload mapping into the EM system to a specific EM client and user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EMUploadMapping {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FOLDER_I_D = "FolderID";
  @SerializedName(SERIALIZED_NAME_FOLDER_I_D)
  private Integer folderID;

  public static final String SERIALIZED_NAME_EM_USER_I_D = "EMUserID";
  @SerializedName(SERIALIZED_NAME_EM_USER_I_D)
  private Integer emUserID;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_OWNER_I_D = "OwnerID";
  @SerializedName(SERIALIZED_NAME_OWNER_I_D)
  private Integer ownerID;

  public static final String SERIALIZED_NAME_EM_USER_NAME = "EMUserName";
  @SerializedName(SERIALIZED_NAME_EM_USER_NAME)
  private String emUserName;

  public static final String SERIALIZED_NAME_CAN_EDIT = "CanEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Integer canEdit;

  public static final String SERIALIZED_NAME_EM_CLIENT = "EMClient";
  @SerializedName(SERIALIZED_NAME_EM_CLIENT)
  private EMClient emClient;

  public static final String SERIALIZED_NAME_EM_CLIENT_I_D = "EMClientID";
  @SerializedName(SERIALIZED_NAME_EM_CLIENT_I_D)
  private Integer emClientID;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public EMUploadMapping() {
  }

  public EMUploadMapping ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Unique ID of this mapping
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public EMUploadMapping name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of this mapping
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EMUploadMapping folderID(Integer folderID) {
    this.folderID = folderID;
    return this;
  }

   /**
   * Folder in which this mapping is located
   * @return folderID
  **/
  @javax.annotation.Nullable
  public Integer getFolderID() {
    return folderID;
  }

  public void setFolderID(Integer folderID) {
    this.folderID = folderID;
  }


  public EMUploadMapping emUserID(Integer emUserID) {
    this.emUserID = emUserID;
    return this;
  }

   /**
   * EM User ID of this mapping
   * @return emUserID
  **/
  @javax.annotation.Nullable
  public Integer getEmUserID() {
    return emUserID;
  }

  public void setEmUserID(Integer emUserID) {
    this.emUserID = emUserID;
  }


  public EMUploadMapping created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Date that this mapping was created
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public EMUploadMapping modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Date that this mapping was last modified
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public EMUploadMapping ownerID(Integer ownerID) {
    this.ownerID = ownerID;
    return this;
  }

   /**
   * The owner\\creator of this EMMapping
   * @return ownerID
  **/
  @javax.annotation.Nullable
  public Integer getOwnerID() {
    return ownerID;
  }

  public void setOwnerID(Integer ownerID) {
    this.ownerID = ownerID;
  }


  public EMUploadMapping emUserName(String emUserName) {
    this.emUserName = emUserName;
    return this;
  }

   /**
   * A cache of the user name which maps to the EMUserID on the EM side.
   * @return emUserName
  **/
  @javax.annotation.Nullable
  public String getEmUserName() {
    return emUserName;
  }

  public void setEmUserName(String emUserName) {
    this.emUserName = emUserName;
  }


  public EMUploadMapping canEdit(Integer canEdit) {
    this.canEdit = canEdit;
    return this;
  }

   /**
   * Does the Mapping have edit permissions for this user - cannot set this value using this property
   * @return canEdit
  **/
  @javax.annotation.Nullable
  public Integer getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Integer canEdit) {
    this.canEdit = canEdit;
  }


  public EMUploadMapping emClient(EMClient emClient) {
    this.emClient = emClient;
    return this;
  }

   /**
   * Get emClient
   * @return emClient
  **/
  @javax.annotation.Nullable
  public EMClient getEmClient() {
    return emClient;
  }

  public void setEmClient(EMClient emClient) {
    this.emClient = emClient;
  }


  public EMUploadMapping emClientID(Integer emClientID) {
    this.emClientID = emClientID;
    return this;
  }

   /**
   * EM Client ID of this mapping
   * @return emClientID
  **/
  @javax.annotation.Nullable
  public Integer getEmClientID() {
    return emClientID;
  }

  public void setEmClientID(Integer emClientID) {
    this.emClientID = emClientID;
  }


  public EMUploadMapping isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Is mapping enabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMUploadMapping emUploadMapping = (EMUploadMapping) o;
    return Objects.equals(this.ID, emUploadMapping.ID) &&
        Objects.equals(this.name, emUploadMapping.name) &&
        Objects.equals(this.folderID, emUploadMapping.folderID) &&
        Objects.equals(this.emUserID, emUploadMapping.emUserID) &&
        Objects.equals(this.created, emUploadMapping.created) &&
        Objects.equals(this.modified, emUploadMapping.modified) &&
        Objects.equals(this.ownerID, emUploadMapping.ownerID) &&
        Objects.equals(this.emUserName, emUploadMapping.emUserName) &&
        Objects.equals(this.canEdit, emUploadMapping.canEdit) &&
        Objects.equals(this.emClient, emUploadMapping.emClient) &&
        Objects.equals(this.emClientID, emUploadMapping.emClientID) &&
        Objects.equals(this.isEnabled, emUploadMapping.isEnabled);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, folderID, emUserID, created, modified, ownerID, emUserName, canEdit, emClient, emClientID, isEnabled);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMUploadMapping {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    folderID: ").append(toIndentedString(folderID)).append("\n");
    sb.append("    emUserID: ").append(toIndentedString(emUserID)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    ownerID: ").append(toIndentedString(ownerID)).append("\n");
    sb.append("    emUserName: ").append(toIndentedString(emUserName)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    emClient: ").append(toIndentedString(emClient)).append("\n");
    sb.append("    emClientID: ").append(toIndentedString(emClientID)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("FolderID");
    openapiFields.add("EMUserID");
    openapiFields.add("Created");
    openapiFields.add("Modified");
    openapiFields.add("OwnerID");
    openapiFields.add("EMUserName");
    openapiFields.add("CanEdit");
    openapiFields.add("EMClient");
    openapiFields.add("EMClientID");
    openapiFields.add("IsEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMUploadMapping
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMUploadMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMUploadMapping is not found in the empty JSON string", EMUploadMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMUploadMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMUploadMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("EMUserName") != null && !jsonObj.get("EMUserName").isJsonNull()) && !jsonObj.get("EMUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EMUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EMUserName").toString()));
      }
      // validate the optional field `EMClient`
      if (jsonObj.get("EMClient") != null && !jsonObj.get("EMClient").isJsonNull()) {
        EMClient.validateJsonElement(jsonObj.get("EMClient"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMUploadMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMUploadMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMUploadMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMUploadMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<EMUploadMapping>() {
           @Override
           public void write(JsonWriter out, EMUploadMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMUploadMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMUploadMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMUploadMapping
  * @throws IOException if the JSON string is invalid with respect to EMUploadMapping
  */
  public static EMUploadMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMUploadMapping.class);
  }

 /**
  * Convert an instance of EMUploadMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

