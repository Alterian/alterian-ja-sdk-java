/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.APICursor;
import com.alterian.ja.model.ColumnMatchList;
import com.alterian.ja.model.EventStreamColumnTransform;
import com.alterian.ja.model.EventStreamPattern;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetEventStreamDiscreteValuesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetEventStreamDiscreteValuesRequest {
  public static final String SERIALIZED_NAME_COLUMN_TRANSFORMS = "ColumnTransforms";
  @SerializedName(SERIALIZED_NAME_COLUMN_TRANSFORMS)
  private List<EventStreamColumnTransform> columnTransforms;

  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "DataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private Integer dataSourceId;

  public static final String SERIALIZED_NAME_EVENT_DATE_TIME_LOWER = "EventDateTimeLower";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE_TIME_LOWER)
  private OffsetDateTime eventDateTimeLower;

  public static final String SERIALIZED_NAME_EVENT_DATE_TIME_UPPER = "EventDateTimeUpper";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE_TIME_UPPER)
  private OffsetDateTime eventDateTimeUpper;

  public static final String SERIALIZED_NAME_EVENT_STREAM_ID = "EventStreamId";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_ID)
  private Integer eventStreamId;

  public static final String SERIALIZED_NAME_EVENT_TYPES = "EventTypes";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  private List<String> eventTypes;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<ColumnMatchList> filters;

  public static final String SERIALIZED_NAME_INITIATIVES = "Initiatives";
  @SerializedName(SERIALIZED_NAME_INITIATIVES)
  private List<String> initiatives;

  public static final String SERIALIZED_NAME_IS_DATA_REFRESH_REQUIRED = "IsDataRefreshRequired";
  @SerializedName(SERIALIZED_NAME_IS_DATA_REFRESH_REQUIRED)
  private Boolean isDataRefreshRequired;

  public static final String SERIALIZED_NAME_PATTERN = "Pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private EventStreamPattern pattern;

  public static final String SERIALIZED_NAME_PRIMARY_DISCRETES_COLUMN_NAME = "PrimaryDiscretesColumnName";
  @SerializedName(SERIALIZED_NAME_PRIMARY_DISCRETES_COLUMN_NAME)
  private String primaryDiscretesColumnName;

  public static final String SERIALIZED_NAME_PRIMARY_DISCRETES_FILTER = "PrimaryDiscretesFilter";
  @SerializedName(SERIALIZED_NAME_PRIMARY_DISCRETES_FILTER)
  private String primaryDiscretesFilter;

  public static final String SERIALIZED_NAME_SECONDARY_DISCRETES_COLUMN_NAME = "SecondaryDiscretesColumnName";
  @SerializedName(SERIALIZED_NAME_SECONDARY_DISCRETES_COLUMN_NAME)
  private String secondaryDiscretesColumnName;

  public static final String SERIALIZED_NAME_SECONDARY_DISCRETES_FILTER = "SecondaryDiscretesFilter";
  @SerializedName(SERIALIZED_NAME_SECONDARY_DISCRETES_FILTER)
  private String secondaryDiscretesFilter;

  public static final String SERIALIZED_NAME_TABLE_NAME_EX = "TableNameEx";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME_EX)
  private String tableNameEx;

  public GetEventStreamDiscreteValuesRequest() {
  }

  public GetEventStreamDiscreteValuesRequest columnTransforms(List<EventStreamColumnTransform> columnTransforms) {
    this.columnTransforms = columnTransforms;
    return this;
  }

  public GetEventStreamDiscreteValuesRequest addColumnTransformsItem(EventStreamColumnTransform columnTransformsItem) {
    if (this.columnTransforms == null) {
      this.columnTransforms = new ArrayList<>();
    }
    this.columnTransforms.add(columnTransformsItem);
    return this;
  }

   /**
   * Applies the specified transforms to base the result on the transformed discrete values
   * @return columnTransforms
  **/
  @javax.annotation.Nullable
  public List<EventStreamColumnTransform> getColumnTransforms() {
    return columnTransforms;
  }

  public void setColumnTransforms(List<EventStreamColumnTransform> columnTransforms) {
    this.columnTransforms = columnTransforms;
  }


  public GetEventStreamDiscreteValuesRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetEventStreamDiscreteValuesRequest dataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

   /**
   * Id of the datasource to which table belongs.
   * @return dataSourceId
  **/
  @javax.annotation.Nullable
  public Integer getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public GetEventStreamDiscreteValuesRequest eventDateTimeLower(OffsetDateTime eventDateTimeLower) {
    this.eventDateTimeLower = eventDateTimeLower;
    return this;
  }

   /**
   * Optionally filter by EventDateTime
   * @return eventDateTimeLower
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEventDateTimeLower() {
    return eventDateTimeLower;
  }

  public void setEventDateTimeLower(OffsetDateTime eventDateTimeLower) {
    this.eventDateTimeLower = eventDateTimeLower;
  }


  public GetEventStreamDiscreteValuesRequest eventDateTimeUpper(OffsetDateTime eventDateTimeUpper) {
    this.eventDateTimeUpper = eventDateTimeUpper;
    return this;
  }

   /**
   * Optionally filter by EventDateTime
   * @return eventDateTimeUpper
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEventDateTimeUpper() {
    return eventDateTimeUpper;
  }

  public void setEventDateTimeUpper(OffsetDateTime eventDateTimeUpper) {
    this.eventDateTimeUpper = eventDateTimeUpper;
  }


  public GetEventStreamDiscreteValuesRequest eventStreamId(Integer eventStreamId) {
    this.eventStreamId = eventStreamId;
    return this;
  }

   /**
   * Optionally invoke using an Event Stream ID instead of DataSourceId/TableNameEx. In this mode ColumnTransforms will be defaulted to those published against the columns of the Event Stream but can still be overridden if required
   * @return eventStreamId
  **/
  @javax.annotation.Nullable
  public Integer getEventStreamId() {
    return eventStreamId;
  }

  public void setEventStreamId(Integer eventStreamId) {
    this.eventStreamId = eventStreamId;
  }


  public GetEventStreamDiscreteValuesRequest eventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
    return this;
  }

  public GetEventStreamDiscreteValuesRequest addEventTypesItem(String eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

   /**
   * List of event types to include (default to all)
   * @return eventTypes
  **/
  @javax.annotation.Nullable
  public List<String> getEventTypes() {
    return eventTypes;
  }

  public void setEventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
  }


  public GetEventStreamDiscreteValuesRequest filters(List<ColumnMatchList> filters) {
    this.filters = filters;
    return this;
  }

  public GetEventStreamDiscreteValuesRequest addFiltersItem(ColumnMatchList filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Additional columns to filter on
   * @return filters
  **/
  @javax.annotation.Nullable
  public List<ColumnMatchList> getFilters() {
    return filters;
  }

  public void setFilters(List<ColumnMatchList> filters) {
    this.filters = filters;
  }


  public GetEventStreamDiscreteValuesRequest initiatives(List<String> initiatives) {
    this.initiatives = initiatives;
    return this;
  }

  public GetEventStreamDiscreteValuesRequest addInitiativesItem(String initiativesItem) {
    if (this.initiatives == null) {
      this.initiatives = new ArrayList<>();
    }
    this.initiatives.add(initiativesItem);
    return this;
  }

   /**
   * List of initiatives to include (default to all)
   * @return initiatives
  **/
  @javax.annotation.Nullable
  public List<String> getInitiatives() {
    return initiatives;
  }

  public void setInitiatives(List<String> initiatives) {
    this.initiatives = initiatives;
  }


  public GetEventStreamDiscreteValuesRequest isDataRefreshRequired(Boolean isDataRefreshRequired) {
    this.isDataRefreshRequired = isDataRefreshRequired;
    return this;
  }

   /**
   * Indicate whether the request can be satisfied with an existing cached result or requires recreation with latest data (default false). Has no effect if PatternId is specified
   * @return isDataRefreshRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsDataRefreshRequired() {
    return isDataRefreshRequired;
  }

  public void setIsDataRefreshRequired(Boolean isDataRefreshRequired) {
    this.isDataRefreshRequired = isDataRefreshRequired;
  }


  public GetEventStreamDiscreteValuesRequest pattern(EventStreamPattern pattern) {
    this.pattern = pattern;
    return this;
  }

   /**
   * Get pattern
   * @return pattern
  **/
  @javax.annotation.Nullable
  public EventStreamPattern getPattern() {
    return pattern;
  }

  public void setPattern(EventStreamPattern pattern) {
    this.pattern = pattern;
  }


  public GetEventStreamDiscreteValuesRequest primaryDiscretesColumnName(String primaryDiscretesColumnName) {
    this.primaryDiscretesColumnName = primaryDiscretesColumnName;
    return this;
  }

   /**
   * Optionally set the column name that is the primary source of discrete values (defaults to Location)
   * @return primaryDiscretesColumnName
  **/
  @javax.annotation.Nullable
  public String getPrimaryDiscretesColumnName() {
    return primaryDiscretesColumnName;
  }

  public void setPrimaryDiscretesColumnName(String primaryDiscretesColumnName) {
    this.primaryDiscretesColumnName = primaryDiscretesColumnName;
  }


  public GetEventStreamDiscreteValuesRequest primaryDiscretesFilter(String primaryDiscretesFilter) {
    this.primaryDiscretesFilter = primaryDiscretesFilter;
    return this;
  }

   /**
   * Optionally set a literal value or NSQL wildcard filter to further restrict the number of primary discrete values considered (e.g. MyEvent or %AllTheseEvents or EventsBeginningWith*)
   * @return primaryDiscretesFilter
  **/
  @javax.annotation.Nullable
  public String getPrimaryDiscretesFilter() {
    return primaryDiscretesFilter;
  }

  public void setPrimaryDiscretesFilter(String primaryDiscretesFilter) {
    this.primaryDiscretesFilter = primaryDiscretesFilter;
  }


  public GetEventStreamDiscreteValuesRequest secondaryDiscretesColumnName(String secondaryDiscretesColumnName) {
    this.secondaryDiscretesColumnName = secondaryDiscretesColumnName;
    return this;
  }

   /**
   * Optionally set a secondary column name that can be used to further partition the discrete values e.g. Channel
   * @return secondaryDiscretesColumnName
  **/
  @javax.annotation.Nullable
  public String getSecondaryDiscretesColumnName() {
    return secondaryDiscretesColumnName;
  }

  public void setSecondaryDiscretesColumnName(String secondaryDiscretesColumnName) {
    this.secondaryDiscretesColumnName = secondaryDiscretesColumnName;
  }


  public GetEventStreamDiscreteValuesRequest secondaryDiscretesFilter(String secondaryDiscretesFilter) {
    this.secondaryDiscretesFilter = secondaryDiscretesFilter;
    return this;
  }

   /**
   * Optionally set a literal value or NSQL wildcard filter to further restrict the number of secondary discrete values considered (e.g. MyEvent or %AllTheseEvents or EventsBeginningWith*)
   * @return secondaryDiscretesFilter
  **/
  @javax.annotation.Nullable
  public String getSecondaryDiscretesFilter() {
    return secondaryDiscretesFilter;
  }

  public void setSecondaryDiscretesFilter(String secondaryDiscretesFilter) {
    this.secondaryDiscretesFilter = secondaryDiscretesFilter;
  }


  public GetEventStreamDiscreteValuesRequest tableNameEx(String tableNameEx) {
    this.tableNameEx = tableNameEx;
    return this;
  }

   /**
   * Event Stream table (standard two part name ex)
   * @return tableNameEx
  **/
  @javax.annotation.Nullable
  public String getTableNameEx() {
    return tableNameEx;
  }

  public void setTableNameEx(String tableNameEx) {
    this.tableNameEx = tableNameEx;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEventStreamDiscreteValuesRequest getEventStreamDiscreteValuesRequest = (GetEventStreamDiscreteValuesRequest) o;
    return Objects.equals(this.columnTransforms, getEventStreamDiscreteValuesRequest.columnTransforms) &&
        Objects.equals(this.cursor, getEventStreamDiscreteValuesRequest.cursor) &&
        Objects.equals(this.dataSourceId, getEventStreamDiscreteValuesRequest.dataSourceId) &&
        Objects.equals(this.eventDateTimeLower, getEventStreamDiscreteValuesRequest.eventDateTimeLower) &&
        Objects.equals(this.eventDateTimeUpper, getEventStreamDiscreteValuesRequest.eventDateTimeUpper) &&
        Objects.equals(this.eventStreamId, getEventStreamDiscreteValuesRequest.eventStreamId) &&
        Objects.equals(this.eventTypes, getEventStreamDiscreteValuesRequest.eventTypes) &&
        Objects.equals(this.filters, getEventStreamDiscreteValuesRequest.filters) &&
        Objects.equals(this.initiatives, getEventStreamDiscreteValuesRequest.initiatives) &&
        Objects.equals(this.isDataRefreshRequired, getEventStreamDiscreteValuesRequest.isDataRefreshRequired) &&
        Objects.equals(this.pattern, getEventStreamDiscreteValuesRequest.pattern) &&
        Objects.equals(this.primaryDiscretesColumnName, getEventStreamDiscreteValuesRequest.primaryDiscretesColumnName) &&
        Objects.equals(this.primaryDiscretesFilter, getEventStreamDiscreteValuesRequest.primaryDiscretesFilter) &&
        Objects.equals(this.secondaryDiscretesColumnName, getEventStreamDiscreteValuesRequest.secondaryDiscretesColumnName) &&
        Objects.equals(this.secondaryDiscretesFilter, getEventStreamDiscreteValuesRequest.secondaryDiscretesFilter) &&
        Objects.equals(this.tableNameEx, getEventStreamDiscreteValuesRequest.tableNameEx);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnTransforms, cursor, dataSourceId, eventDateTimeLower, eventDateTimeUpper, eventStreamId, eventTypes, filters, initiatives, isDataRefreshRequired, pattern, primaryDiscretesColumnName, primaryDiscretesFilter, secondaryDiscretesColumnName, secondaryDiscretesFilter, tableNameEx);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEventStreamDiscreteValuesRequest {\n");
    sb.append("    columnTransforms: ").append(toIndentedString(columnTransforms)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    eventDateTimeLower: ").append(toIndentedString(eventDateTimeLower)).append("\n");
    sb.append("    eventDateTimeUpper: ").append(toIndentedString(eventDateTimeUpper)).append("\n");
    sb.append("    eventStreamId: ").append(toIndentedString(eventStreamId)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    initiatives: ").append(toIndentedString(initiatives)).append("\n");
    sb.append("    isDataRefreshRequired: ").append(toIndentedString(isDataRefreshRequired)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    primaryDiscretesColumnName: ").append(toIndentedString(primaryDiscretesColumnName)).append("\n");
    sb.append("    primaryDiscretesFilter: ").append(toIndentedString(primaryDiscretesFilter)).append("\n");
    sb.append("    secondaryDiscretesColumnName: ").append(toIndentedString(secondaryDiscretesColumnName)).append("\n");
    sb.append("    secondaryDiscretesFilter: ").append(toIndentedString(secondaryDiscretesFilter)).append("\n");
    sb.append("    tableNameEx: ").append(toIndentedString(tableNameEx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ColumnTransforms");
    openapiFields.add("Cursor");
    openapiFields.add("DataSourceId");
    openapiFields.add("EventDateTimeLower");
    openapiFields.add("EventDateTimeUpper");
    openapiFields.add("EventStreamId");
    openapiFields.add("EventTypes");
    openapiFields.add("Filters");
    openapiFields.add("Initiatives");
    openapiFields.add("IsDataRefreshRequired");
    openapiFields.add("Pattern");
    openapiFields.add("PrimaryDiscretesColumnName");
    openapiFields.add("PrimaryDiscretesFilter");
    openapiFields.add("SecondaryDiscretesColumnName");
    openapiFields.add("SecondaryDiscretesFilter");
    openapiFields.add("TableNameEx");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetEventStreamDiscreteValuesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEventStreamDiscreteValuesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEventStreamDiscreteValuesRequest is not found in the empty JSON string", GetEventStreamDiscreteValuesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEventStreamDiscreteValuesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEventStreamDiscreteValuesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ColumnTransforms") != null && !jsonObj.get("ColumnTransforms").isJsonNull()) {
        JsonArray jsonArraycolumnTransforms = jsonObj.getAsJsonArray("ColumnTransforms");
        if (jsonArraycolumnTransforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ColumnTransforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ColumnTransforms` to be an array in the JSON string but got `%s`", jsonObj.get("ColumnTransforms").toString()));
          }

          // validate the optional field `ColumnTransforms` (array)
          for (int i = 0; i < jsonArraycolumnTransforms.size(); i++) {
            EventStreamColumnTransform.validateJsonElement(jsonArraycolumnTransforms.get(i));
          };
        }
      }
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("EventTypes") != null && !jsonObj.get("EventTypes").isJsonNull() && !jsonObj.get("EventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("EventTypes").toString()));
      }
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("Filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Filters` to be an array in the JSON string but got `%s`", jsonObj.get("Filters").toString()));
          }

          // validate the optional field `Filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            ColumnMatchList.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Initiatives") != null && !jsonObj.get("Initiatives").isJsonNull() && !jsonObj.get("Initiatives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Initiatives` to be an array in the JSON string but got `%s`", jsonObj.get("Initiatives").toString()));
      }
      // validate the optional field `Pattern`
      if (jsonObj.get("Pattern") != null && !jsonObj.get("Pattern").isJsonNull()) {
        EventStreamPattern.validateJsonElement(jsonObj.get("Pattern"));
      }
      if ((jsonObj.get("PrimaryDiscretesColumnName") != null && !jsonObj.get("PrimaryDiscretesColumnName").isJsonNull()) && !jsonObj.get("PrimaryDiscretesColumnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryDiscretesColumnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryDiscretesColumnName").toString()));
      }
      if ((jsonObj.get("PrimaryDiscretesFilter") != null && !jsonObj.get("PrimaryDiscretesFilter").isJsonNull()) && !jsonObj.get("PrimaryDiscretesFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryDiscretesFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryDiscretesFilter").toString()));
      }
      if ((jsonObj.get("SecondaryDiscretesColumnName") != null && !jsonObj.get("SecondaryDiscretesColumnName").isJsonNull()) && !jsonObj.get("SecondaryDiscretesColumnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondaryDiscretesColumnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondaryDiscretesColumnName").toString()));
      }
      if ((jsonObj.get("SecondaryDiscretesFilter") != null && !jsonObj.get("SecondaryDiscretesFilter").isJsonNull()) && !jsonObj.get("SecondaryDiscretesFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondaryDiscretesFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondaryDiscretesFilter").toString()));
      }
      if ((jsonObj.get("TableNameEx") != null && !jsonObj.get("TableNameEx").isJsonNull()) && !jsonObj.get("TableNameEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableNameEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableNameEx").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEventStreamDiscreteValuesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEventStreamDiscreteValuesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEventStreamDiscreteValuesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEventStreamDiscreteValuesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEventStreamDiscreteValuesRequest>() {
           @Override
           public void write(JsonWriter out, GetEventStreamDiscreteValuesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEventStreamDiscreteValuesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetEventStreamDiscreteValuesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetEventStreamDiscreteValuesRequest
  * @throws IOException if the JSON string is invalid with respect to GetEventStreamDiscreteValuesRequest
  */
  public static GetEventStreamDiscreteValuesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEventStreamDiscreteValuesRequest.class);
  }

 /**
  * Convert an instance of GetEventStreamDiscreteValuesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

