/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.APICursor;
import com.alterian.ja.model.ResourceType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetPermissionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetPermissionsRequest {
  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_IS_GROUP = "IsGroup";
  @SerializedName(SERIALIZED_NAME_IS_GROUP)
  private Boolean isGroup;

  public static final String SERIALIZED_NAME_ITEM_FOLDER = "ItemFolder";
  @SerializedName(SERIALIZED_NAME_ITEM_FOLDER)
  private Integer itemFolder;

  public static final String SERIALIZED_NAME_ITEM_I_D = "ItemID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private Integer itemID;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "ItemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private ResourceType itemType;

  public static final String SERIALIZED_NAME_SECURITY_I_D = "SecurityID";
  @SerializedName(SERIALIZED_NAME_SECURITY_I_D)
  private Integer securityID;

  public GetPermissionsRequest() {
  }

  public GetPermissionsRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetPermissionsRequest isGroup(Boolean isGroup) {
    this.isGroup = isGroup;
    return this;
  }

   /**
   * Is the security ID a group?
   * @return isGroup
  **/
  @javax.annotation.Nullable
  public Boolean getIsGroup() {
    return isGroup;
  }

  public void setIsGroup(Boolean isGroup) {
    this.isGroup = isGroup;
  }


  public GetPermissionsRequest itemFolder(Integer itemFolder) {
    this.itemFolder = itemFolder;
    return this;
  }

   /**
   * Folder ID in which this item is contained
   * @return itemFolder
  **/
  @javax.annotation.Nullable
  public Integer getItemFolder() {
    return itemFolder;
  }

  public void setItemFolder(Integer itemFolder) {
    this.itemFolder = itemFolder;
  }


  public GetPermissionsRequest itemID(Integer itemID) {
    this.itemID = itemID;
    return this;
  }

   /**
   * ID of the item on which security has been applied for securityID above
   * @return itemID
  **/
  @javax.annotation.Nullable
  public Integer getItemID() {
    return itemID;
  }

  public void setItemID(Integer itemID) {
    this.itemID = itemID;
  }


  public GetPermissionsRequest itemType(ResourceType itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * Get itemType
   * @return itemType
  **/
  @javax.annotation.Nullable
  public ResourceType getItemType() {
    return itemType;
  }

  public void setItemType(ResourceType itemType) {
    this.itemType = itemType;
  }


  public GetPermissionsRequest securityID(Integer securityID) {
    this.securityID = securityID;
    return this;
  }

   /**
   * ID of the user or group for which to get permissions
   * @return securityID
  **/
  @javax.annotation.Nullable
  public Integer getSecurityID() {
    return securityID;
  }

  public void setSecurityID(Integer securityID) {
    this.securityID = securityID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPermissionsRequest getPermissionsRequest = (GetPermissionsRequest) o;
    return Objects.equals(this.cursor, getPermissionsRequest.cursor) &&
        Objects.equals(this.isGroup, getPermissionsRequest.isGroup) &&
        Objects.equals(this.itemFolder, getPermissionsRequest.itemFolder) &&
        Objects.equals(this.itemID, getPermissionsRequest.itemID) &&
        Objects.equals(this.itemType, getPermissionsRequest.itemType) &&
        Objects.equals(this.securityID, getPermissionsRequest.securityID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cursor, isGroup, itemFolder, itemID, itemType, securityID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPermissionsRequest {\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    isGroup: ").append(toIndentedString(isGroup)).append("\n");
    sb.append("    itemFolder: ").append(toIndentedString(itemFolder)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    securityID: ").append(toIndentedString(securityID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cursor");
    openapiFields.add("IsGroup");
    openapiFields.add("ItemFolder");
    openapiFields.add("ItemID");
    openapiFields.add("ItemType");
    openapiFields.add("SecurityID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetPermissionsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPermissionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPermissionsRequest is not found in the empty JSON string", GetPermissionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPermissionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPermissionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
      // validate the optional field `ItemType`
      if (jsonObj.get("ItemType") != null && !jsonObj.get("ItemType").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("ItemType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPermissionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPermissionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPermissionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPermissionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPermissionsRequest>() {
           @Override
           public void write(JsonWriter out, GetPermissionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPermissionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetPermissionsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetPermissionsRequest
  * @throws IOException if the JSON string is invalid with respect to GetPermissionsRequest
  */
  public static GetPermissionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPermissionsRequest.class);
  }

 /**
  * Convert an instance of GetPermissionsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

