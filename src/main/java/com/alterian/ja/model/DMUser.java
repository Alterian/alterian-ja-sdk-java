/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMTimeZoneInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMUser {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_ADMIN = "Admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_SHOW_PEERS = "ShowPeers";
  @SerializedName(SERIALIZED_NAME_SHOW_PEERS)
  private Boolean showPeers;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ZIP = "Zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_TIME_OFFSET = "TimeOffset";
  @SerializedName(SERIALIZED_NAME_TIME_OFFSET)
  private Integer timeOffset;

  public static final String SERIALIZED_NAME_STARTUP_MODULE_I_D = "StartupModuleID";
  @SerializedName(SERIALIZED_NAME_STARTUP_MODULE_I_D)
  private Integer startupModuleID;

  public static final String SERIALIZED_NAME_MEMBER_OF = "MemberOf";
  @SerializedName(SERIALIZED_NAME_MEMBER_OF)
  private Object memberOf;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_USER_CULTURE = "UserCulture";
  @SerializedName(SERIALIZED_NAME_USER_CULTURE)
  private String userCulture;

  public static final String SERIALIZED_NAME_TIME_ZONE_INFO = "TimeZoneInfo";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_INFO)
  private DMTimeZoneInfo timeZoneInfo;

  public static final String SERIALIZED_NAME_TRANSLATION_I_D = "TranslationID";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_I_D)
  private Integer translationID;

  public DMUser() {
  }

  public DMUser ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public DMUser admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

   /**
   * 
   * @return admin
  **/
  @javax.annotation.Nullable
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public DMUser showPeers(Boolean showPeers) {
    this.showPeers = showPeers;
    return this;
  }

   /**
   * 
   * @return showPeers
  **/
  @javax.annotation.Nullable
  public Boolean getShowPeers() {
    return showPeers;
  }

  public void setShowPeers(Boolean showPeers) {
    this.showPeers = showPeers;
  }


  public DMUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * 
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public DMUser lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * 
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public DMUser title(String title) {
    this.title = title;
    return this;
  }

   /**
   * 
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DMUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * 
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public DMUser phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * 
   * @return phone
  **/
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public DMUser zip(String zip) {
    this.zip = zip;
    return this;
  }

   /**
   * 
   * @return zip
  **/
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }


  public DMUser timeOffset(Integer timeOffset) {
    this.timeOffset = timeOffset;
    return this;
  }

   /**
   * 
   * @return timeOffset
  **/
  @javax.annotation.Nullable
  public Integer getTimeOffset() {
    return timeOffset;
  }

  public void setTimeOffset(Integer timeOffset) {
    this.timeOffset = timeOffset;
  }


  public DMUser startupModuleID(Integer startupModuleID) {
    this.startupModuleID = startupModuleID;
    return this;
  }

   /**
   * 
   * @return startupModuleID
  **/
  @javax.annotation.Nullable
  public Integer getStartupModuleID() {
    return startupModuleID;
  }

  public void setStartupModuleID(Integer startupModuleID) {
    this.startupModuleID = startupModuleID;
  }


  public DMUser memberOf(Object memberOf) {
    this.memberOf = memberOf;
    return this;
  }

   /**
   * 
   * @return memberOf
  **/
  @javax.annotation.Nullable
  public Object getMemberOf() {
    return memberOf;
  }

  public void setMemberOf(Object memberOf) {
    this.memberOf = memberOf;
  }


  public DMUser created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * 
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public DMUser modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * 
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public DMUser userCulture(String userCulture) {
    this.userCulture = userCulture;
    return this;
  }

   /**
   * 
   * @return userCulture
  **/
  @javax.annotation.Nullable
  public String getUserCulture() {
    return userCulture;
  }

  public void setUserCulture(String userCulture) {
    this.userCulture = userCulture;
  }


  public DMUser timeZoneInfo(DMTimeZoneInfo timeZoneInfo) {
    this.timeZoneInfo = timeZoneInfo;
    return this;
  }

   /**
   * Get timeZoneInfo
   * @return timeZoneInfo
  **/
  @javax.annotation.Nullable
  public DMTimeZoneInfo getTimeZoneInfo() {
    return timeZoneInfo;
  }

  public void setTimeZoneInfo(DMTimeZoneInfo timeZoneInfo) {
    this.timeZoneInfo = timeZoneInfo;
  }


  public DMUser translationID(Integer translationID) {
    this.translationID = translationID;
    return this;
  }

   /**
   * 
   * @return translationID
  **/
  @javax.annotation.Nullable
  public Integer getTranslationID() {
    return translationID;
  }

  public void setTranslationID(Integer translationID) {
    this.translationID = translationID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMUser dmUser = (DMUser) o;
    return Objects.equals(this.ID, dmUser.ID) &&
        Objects.equals(this.admin, dmUser.admin) &&
        Objects.equals(this.showPeers, dmUser.showPeers) &&
        Objects.equals(this.firstName, dmUser.firstName) &&
        Objects.equals(this.lastName, dmUser.lastName) &&
        Objects.equals(this.title, dmUser.title) &&
        Objects.equals(this.email, dmUser.email) &&
        Objects.equals(this.phone, dmUser.phone) &&
        Objects.equals(this.zip, dmUser.zip) &&
        Objects.equals(this.timeOffset, dmUser.timeOffset) &&
        Objects.equals(this.startupModuleID, dmUser.startupModuleID) &&
        Objects.equals(this.memberOf, dmUser.memberOf) &&
        Objects.equals(this.created, dmUser.created) &&
        Objects.equals(this.modified, dmUser.modified) &&
        Objects.equals(this.userCulture, dmUser.userCulture) &&
        Objects.equals(this.timeZoneInfo, dmUser.timeZoneInfo) &&
        Objects.equals(this.translationID, dmUser.translationID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, admin, showPeers, firstName, lastName, title, email, phone, zip, timeOffset, startupModuleID, memberOf, created, modified, userCulture, timeZoneInfo, translationID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMUser {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    showPeers: ").append(toIndentedString(showPeers)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    timeOffset: ").append(toIndentedString(timeOffset)).append("\n");
    sb.append("    startupModuleID: ").append(toIndentedString(startupModuleID)).append("\n");
    sb.append("    memberOf: ").append(toIndentedString(memberOf)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    userCulture: ").append(toIndentedString(userCulture)).append("\n");
    sb.append("    timeZoneInfo: ").append(toIndentedString(timeZoneInfo)).append("\n");
    sb.append("    translationID: ").append(toIndentedString(translationID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Admin");
    openapiFields.add("ShowPeers");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("Title");
    openapiFields.add("Email");
    openapiFields.add("Phone");
    openapiFields.add("Zip");
    openapiFields.add("TimeOffset");
    openapiFields.add("StartupModuleID");
    openapiFields.add("MemberOf");
    openapiFields.add("Created");
    openapiFields.add("Modified");
    openapiFields.add("UserCulture");
    openapiFields.add("TimeZoneInfo");
    openapiFields.add("TranslationID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMUser
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMUser is not found in the empty JSON string", DMUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) && !jsonObj.get("Phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
      }
      if ((jsonObj.get("Zip") != null && !jsonObj.get("Zip").isJsonNull()) && !jsonObj.get("Zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Zip").toString()));
      }
      if ((jsonObj.get("UserCulture") != null && !jsonObj.get("UserCulture").isJsonNull()) && !jsonObj.get("UserCulture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserCulture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserCulture").toString()));
      }
      // validate the optional field `TimeZoneInfo`
      if (jsonObj.get("TimeZoneInfo") != null && !jsonObj.get("TimeZoneInfo").isJsonNull()) {
        DMTimeZoneInfo.validateJsonElement(jsonObj.get("TimeZoneInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMUser.class));

       return (TypeAdapter<T>) new TypeAdapter<DMUser>() {
           @Override
           public void write(JsonWriter out, DMUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMUser
  * @throws IOException if the JSON string is invalid with respect to DMUser
  */
  public static DMUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMUser.class);
  }

 /**
  * Convert an instance of DMUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

