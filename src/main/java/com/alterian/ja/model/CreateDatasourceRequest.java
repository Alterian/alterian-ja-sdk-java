/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DatasourceAttribute;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * CreateDatasourceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class CreateDatasourceRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<DatasourceAttribute> attributes;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "Project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_SYSTEM_DATA_LOCATION = "SystemDataLocation";
  @SerializedName(SERIALIZED_NAME_SYSTEM_DATA_LOCATION)
  private String systemDataLocation;

  public CreateDatasourceRequest() {
  }

  public CreateDatasourceRequest attributes(List<DatasourceAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public CreateDatasourceRequest addAttributesItem(DatasourceAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Optional additional attributes.  If not supplied, most datasource attributes will be populated with sensible defaults.
   * @return attributes
  **/
  @javax.annotation.Nullable
  public List<DatasourceAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<DatasourceAttribute> attributes) {
    this.attributes = attributes;
  }


  public CreateDatasourceRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the datasource
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateDatasourceRequest project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Name of the engine project
   * @return project
  **/
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public CreateDatasourceRequest server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Server on which the engine project is located
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public CreateDatasourceRequest systemDataLocation(String systemDataLocation) {
    this.systemDataLocation = systemDataLocation;
    return this;
  }

   /**
   * If this parameter is specified, all IMS system data (e.g. metrics, campaign data, etc.) will be stored in this location.  Please note that if the project already has system generated data, it will not move that data to the new location.
   * @return systemDataLocation
  **/
  @javax.annotation.Nullable
  public String getSystemDataLocation() {
    return systemDataLocation;
  }

  public void setSystemDataLocation(String systemDataLocation) {
    this.systemDataLocation = systemDataLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDatasourceRequest createDatasourceRequest = (CreateDatasourceRequest) o;
    return Objects.equals(this.attributes, createDatasourceRequest.attributes) &&
        Objects.equals(this.name, createDatasourceRequest.name) &&
        Objects.equals(this.project, createDatasourceRequest.project) &&
        Objects.equals(this.server, createDatasourceRequest.server) &&
        Objects.equals(this.systemDataLocation, createDatasourceRequest.systemDataLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, name, project, server, systemDataLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDatasourceRequest {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    systemDataLocation: ").append(toIndentedString(systemDataLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("Name");
    openapiFields.add("Project");
    openapiFields.add("Server");
    openapiFields.add("SystemDataLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateDatasourceRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDatasourceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDatasourceRequest is not found in the empty JSON string", CreateDatasourceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDatasourceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDatasourceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("Attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be an array in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
          }

          // validate the optional field `Attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            DatasourceAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Project") != null && !jsonObj.get("Project").isJsonNull()) && !jsonObj.get("Project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Project").toString()));
      }
      if ((jsonObj.get("Server") != null && !jsonObj.get("Server").isJsonNull()) && !jsonObj.get("Server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Server").toString()));
      }
      if ((jsonObj.get("SystemDataLocation") != null && !jsonObj.get("SystemDataLocation").isJsonNull()) && !jsonObj.get("SystemDataLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemDataLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemDataLocation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDatasourceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDatasourceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDatasourceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDatasourceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDatasourceRequest>() {
           @Override
           public void write(JsonWriter out, CreateDatasourceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDatasourceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateDatasourceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateDatasourceRequest
  * @throws IOException if the JSON string is invalid with respect to CreateDatasourceRequest
  */
  public static CreateDatasourceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDatasourceRequest.class);
  }

 /**
  * Convert an instance of CreateDatasourceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

