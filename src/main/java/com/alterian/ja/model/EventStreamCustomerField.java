/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EventStreamCustomerField {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_PRECISION = "Precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  public static final String SERIALIZED_NAME_IS_SANKEY = "IsSankey";
  @SerializedName(SERIALIZED_NAME_IS_SANKEY)
  private Boolean isSankey;

  public EventStreamCustomerField() {
  }

  public EventStreamCustomerField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Field name as it should appear in the UI and Engine repository
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventStreamCustomerField dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Allowed values: unicode, text, datetime, date, integer, int64, real
   * @return dataType
  **/
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public EventStreamCustomerField width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * Only required for unicode and text types
   * @return width
  **/
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  public EventStreamCustomerField precision(Integer precision) {
    this.precision = precision;
    return this;
  }

   /**
   * Only required for real data type
   * @return precision
  **/
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public EventStreamCustomerField isSankey(Boolean isSankey) {
    this.isSankey = isSankey;
    return this;
  }

   /**
   * Flag inidicating whether to display the customer field as a Sankey filter
   * @return isSankey
  **/
  @javax.annotation.Nullable
  public Boolean getIsSankey() {
    return isSankey;
  }

  public void setIsSankey(Boolean isSankey) {
    this.isSankey = isSankey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStreamCustomerField eventStreamCustomerField = (EventStreamCustomerField) o;
    return Objects.equals(this.name, eventStreamCustomerField.name) &&
        Objects.equals(this.dataType, eventStreamCustomerField.dataType) &&
        Objects.equals(this.width, eventStreamCustomerField.width) &&
        Objects.equals(this.precision, eventStreamCustomerField.precision) &&
        Objects.equals(this.isSankey, eventStreamCustomerField.isSankey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dataType, width, precision, isSankey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStreamCustomerField {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    isSankey: ").append(toIndentedString(isSankey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("DataType");
    openapiFields.add("Width");
    openapiFields.add("Precision");
    openapiFields.add("IsSankey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventStreamCustomerField
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStreamCustomerField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStreamCustomerField is not found in the empty JSON string", EventStreamCustomerField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStreamCustomerField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStreamCustomerField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("DataType") != null && !jsonObj.get("DataType").isJsonNull()) && !jsonObj.get("DataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStreamCustomerField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStreamCustomerField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStreamCustomerField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStreamCustomerField.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStreamCustomerField>() {
           @Override
           public void write(JsonWriter out, EventStreamCustomerField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStreamCustomerField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventStreamCustomerField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventStreamCustomerField
  * @throws IOException if the JSON string is invalid with respect to EventStreamCustomerField
  */
  public static EventStreamCustomerField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStreamCustomerField.class);
  }

 /**
  * Convert an instance of EventStreamCustomerField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

