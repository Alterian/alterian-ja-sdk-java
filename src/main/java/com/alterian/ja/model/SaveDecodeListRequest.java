/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * SaveDecodeListRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class SaveDecodeListRequest {
  public static final String SERIALIZED_NAME_COPY_VERSION = "CopyVersion";
  @SerializedName(SERIALIZED_NAME_COPY_VERSION)
  private Integer copyVersion;

  public static final String SERIALIZED_NAME_CREATE_COPY = "CreateCopy";
  @SerializedName(SERIALIZED_NAME_CREATE_COPY)
  private Boolean createCopy;

  public static final String SERIALIZED_NAME_DEFAULT_LABEL = "DefaultLabel";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LABEL)
  private String defaultLabel;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPLACE_EXISTING = "ReplaceExisting";
  @SerializedName(SERIALIZED_NAME_REPLACE_EXISTING)
  private Boolean replaceExisting;

  public static final String SERIALIZED_NAME_SOURCE_LABELS = "SourceLabels";
  @SerializedName(SERIALIZED_NAME_SOURCE_LABELS)
  private List<String> sourceLabels;

  public static final String SERIALIZED_NAME_TARGET_LABELS = "TargetLabels";
  @SerializedName(SERIALIZED_NAME_TARGET_LABELS)
  private List<String> targetLabels;

  public SaveDecodeListRequest() {
  }

  public SaveDecodeListRequest copyVersion(Integer copyVersion) {
    this.copyVersion = copyVersion;
    return this;
  }

   /**
   * When CreateCopy is true provides a version to copy from (or latest if set to NULL)
   * @return copyVersion
  **/
  @javax.annotation.Nullable
  public Integer getCopyVersion() {
    return copyVersion;
  }

  public void setCopyVersion(Integer copyVersion) {
    this.copyVersion = copyVersion;
  }


  public SaveDecodeListRequest createCopy(Boolean createCopy) {
    this.createCopy = createCopy;
    return this;
  }

   /**
   * When false allows rename for an existing list Id. When true provides &#39;Save As&#39; functionality for the specified source id (a new name must be supplied) - note that ReplaceExisting determines whether any saved labels are copied across from the source
   * @return createCopy
  **/
  @javax.annotation.Nullable
  public Boolean getCreateCopy() {
    return createCopy;
  }

  public void setCreateCopy(Boolean createCopy) {
    this.createCopy = createCopy;
  }


  public SaveDecodeListRequest defaultLabel(String defaultLabel) {
    this.defaultLabel = defaultLabel;
    return this;
  }

   /**
   * Optional default label to be applied for any non-matched source labels. Note that the distinction between NULL and empty string is significant - NULL means remove the current default, Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine)
   * @return defaultLabel
  **/
  @javax.annotation.Nullable
  public String getDefaultLabel() {
    return defaultLabel;
  }

  public void setDefaultLabel(String defaultLabel) {
    this.defaultLabel = defaultLabel;
  }


  public SaveDecodeListRequest id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Optional ID for use when updating an existing decode list
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SaveDecodeListRequest metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * JSON Blob used by the UI to store sampling settings / screen layout when editing the transform
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public SaveDecodeListRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Optional Name of the decode list (required for new lists)
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SaveDecodeListRequest replaceExisting(Boolean replaceExisting) {
    this.replaceExisting = replaceExisting;
    return this;
  }

   /**
   * Defaults to False meaning that the update acts in a &#39;cursored&#39; mode - the UI can submit only the deltas and any existing decodes from the previous list version are preserved. When set to true then any existing decodes are completely replaced
   * @return replaceExisting
  **/
  @javax.annotation.Nullable
  public Boolean getReplaceExisting() {
    return replaceExisting;
  }

  public void setReplaceExisting(Boolean replaceExisting) {
    this.replaceExisting = replaceExisting;
  }


  public SaveDecodeListRequest sourceLabels(List<String> sourceLabels) {
    this.sourceLabels = sourceLabels;
    return this;
  }

  public SaveDecodeListRequest addSourceLabelsItem(String sourceLabelsItem) {
    if (this.sourceLabels == null) {
      this.sourceLabels = new ArrayList<>();
    }
    this.sourceLabels.add(sourceLabelsItem);
    return this;
  }

   /**
   * Source labels to be decoded. To map from NULL use empty string or NULL
   * @return sourceLabels
  **/
  @javax.annotation.Nullable
  public List<String> getSourceLabels() {
    return sourceLabels;
  }

  public void setSourceLabels(List<String> sourceLabels) {
    this.sourceLabels = sourceLabels;
  }


  public SaveDecodeListRequest targetLabels(List<String> targetLabels) {
    this.targetLabels = targetLabels;
    return this;
  }

  public SaveDecodeListRequest addTargetLabelsItem(String targetLabelsItem) {
    if (this.targetLabels == null) {
      this.targetLabels = new ArrayList<>();
    }
    this.targetLabels.add(targetLabelsItem);
    return this;
  }

   /**
   * Decoded versions of the source labels. Note that the distinction between NULL and empty string is significant - NULL means remove any existing decode (default will still apply), Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine)
   * @return targetLabels
  **/
  @javax.annotation.Nullable
  public List<String> getTargetLabels() {
    return targetLabels;
  }

  public void setTargetLabels(List<String> targetLabels) {
    this.targetLabels = targetLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveDecodeListRequest saveDecodeListRequest = (SaveDecodeListRequest) o;
    return Objects.equals(this.copyVersion, saveDecodeListRequest.copyVersion) &&
        Objects.equals(this.createCopy, saveDecodeListRequest.createCopy) &&
        Objects.equals(this.defaultLabel, saveDecodeListRequest.defaultLabel) &&
        Objects.equals(this.id, saveDecodeListRequest.id) &&
        Objects.equals(this.metadata, saveDecodeListRequest.metadata) &&
        Objects.equals(this.name, saveDecodeListRequest.name) &&
        Objects.equals(this.replaceExisting, saveDecodeListRequest.replaceExisting) &&
        Objects.equals(this.sourceLabels, saveDecodeListRequest.sourceLabels) &&
        Objects.equals(this.targetLabels, saveDecodeListRequest.targetLabels);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyVersion, createCopy, defaultLabel, id, metadata, name, replaceExisting, sourceLabels, targetLabels);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveDecodeListRequest {\n");
    sb.append("    copyVersion: ").append(toIndentedString(copyVersion)).append("\n");
    sb.append("    createCopy: ").append(toIndentedString(createCopy)).append("\n");
    sb.append("    defaultLabel: ").append(toIndentedString(defaultLabel)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    replaceExisting: ").append(toIndentedString(replaceExisting)).append("\n");
    sb.append("    sourceLabels: ").append(toIndentedString(sourceLabels)).append("\n");
    sb.append("    targetLabels: ").append(toIndentedString(targetLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CopyVersion");
    openapiFields.add("CreateCopy");
    openapiFields.add("DefaultLabel");
    openapiFields.add("Id");
    openapiFields.add("Metadata");
    openapiFields.add("Name");
    openapiFields.add("ReplaceExisting");
    openapiFields.add("SourceLabels");
    openapiFields.add("TargetLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SaveDecodeListRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaveDecodeListRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveDecodeListRequest is not found in the empty JSON string", SaveDecodeListRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaveDecodeListRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveDecodeListRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DefaultLabel") != null && !jsonObj.get("DefaultLabel").isJsonNull()) && !jsonObj.get("DefaultLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultLabel").toString()));
      }
      if ((jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) && !jsonObj.get("Metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SourceLabels") != null && !jsonObj.get("SourceLabels").isJsonNull() && !jsonObj.get("SourceLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceLabels` to be an array in the JSON string but got `%s`", jsonObj.get("SourceLabels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TargetLabels") != null && !jsonObj.get("TargetLabels").isJsonNull() && !jsonObj.get("TargetLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetLabels` to be an array in the JSON string but got `%s`", jsonObj.get("TargetLabels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveDecodeListRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveDecodeListRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveDecodeListRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveDecodeListRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveDecodeListRequest>() {
           @Override
           public void write(JsonWriter out, SaveDecodeListRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveDecodeListRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaveDecodeListRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaveDecodeListRequest
  * @throws IOException if the JSON string is invalid with respect to SaveDecodeListRequest
  */
  public static SaveDecodeListRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveDecodeListRequest.class);
  }

 /**
  * Convert an instance of SaveDecodeListRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

