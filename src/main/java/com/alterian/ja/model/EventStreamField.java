/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.PublishedTransformSummary;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EventStreamField {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_TYPE = "DataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_INDEX_LEVEL = "IndexLevel";
  @SerializedName(SERIALIZED_NAME_INDEX_LEVEL)
  private Integer indexLevel;

  public static final String SERIALIZED_NAME_STORAGE_HINT = "StorageHint";
  @SerializedName(SERIALIZED_NAME_STORAGE_HINT)
  private String storageHint;

  public static final String SERIALIZED_NAME_IS_KEY = "IsKey";
  @SerializedName(SERIALIZED_NAME_IS_KEY)
  private Boolean isKey;

  public static final String SERIALIZED_NAME_KEY_NAME = "KeyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_IS_SYSTEM = "IsSystem";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM)
  private Boolean isSystem;

  public static final String SERIALIZED_NAME_PRECISION = "Precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  public static final String SERIALIZED_NAME_IS_SANKEY = "IsSankey";
  @SerializedName(SERIALIZED_NAME_IS_SANKEY)
  private Boolean isSankey;

  public static final String SERIALIZED_NAME_IS_DELETED = "IsDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_NUM_DISCRETES = "NumDiscretes";
  @SerializedName(SERIALIZED_NAME_NUM_DISCRETES)
  private Long numDiscretes;

  public static final String SERIALIZED_NAME_FIELD_TRANSFORM_LISTS = "FieldTransformLists";
  @SerializedName(SERIALIZED_NAME_FIELD_TRANSFORM_LISTS)
  private List<PublishedTransformSummary> fieldTransformLists;

  public static final String SERIALIZED_NAME_COLUMN_NAME = "ColumnName";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  private String columnName;

  public EventStreamField() {
  }

  public EventStreamField id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EventStreamField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventStreamField dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * 
   * @return dataType
  **/
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public EventStreamField width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * 
   * @return width
  **/
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  public EventStreamField indexLevel(Integer indexLevel) {
    this.indexLevel = indexLevel;
    return this;
  }

   /**
   * 
   * @return indexLevel
  **/
  @javax.annotation.Nullable
  public Integer getIndexLevel() {
    return indexLevel;
  }

  public void setIndexLevel(Integer indexLevel) {
    this.indexLevel = indexLevel;
  }


  public EventStreamField storageHint(String storageHint) {
    this.storageHint = storageHint;
    return this;
  }

   /**
   * 
   * @return storageHint
  **/
  @javax.annotation.Nullable
  public String getStorageHint() {
    return storageHint;
  }

  public void setStorageHint(String storageHint) {
    this.storageHint = storageHint;
  }


  public EventStreamField isKey(Boolean isKey) {
    this.isKey = isKey;
    return this;
  }

   /**
   * 
   * @return isKey
  **/
  @javax.annotation.Nullable
  public Boolean getIsKey() {
    return isKey;
  }

  public void setIsKey(Boolean isKey) {
    this.isKey = isKey;
  }


  public EventStreamField keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

   /**
   * 
   * @return keyName
  **/
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public EventStreamField isSystem(Boolean isSystem) {
    this.isSystem = isSystem;
    return this;
  }

   /**
   * 
   * @return isSystem
  **/
  @javax.annotation.Nullable
  public Boolean getIsSystem() {
    return isSystem;
  }

  public void setIsSystem(Boolean isSystem) {
    this.isSystem = isSystem;
  }


  public EventStreamField precision(Integer precision) {
    this.precision = precision;
    return this;
  }

   /**
   * 
   * @return precision
  **/
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public EventStreamField isSankey(Boolean isSankey) {
    this.isSankey = isSankey;
    return this;
  }

   /**
   * 
   * @return isSankey
  **/
  @javax.annotation.Nullable
  public Boolean getIsSankey() {
    return isSankey;
  }

  public void setIsSankey(Boolean isSankey) {
    this.isSankey = isSankey;
  }


  public EventStreamField isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * 
   * @return isDeleted
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public EventStreamField numDiscretes(Long numDiscretes) {
    this.numDiscretes = numDiscretes;
    return this;
  }

   /**
   * 
   * @return numDiscretes
  **/
  @javax.annotation.Nullable
  public Long getNumDiscretes() {
    return numDiscretes;
  }

  public void setNumDiscretes(Long numDiscretes) {
    this.numDiscretes = numDiscretes;
  }


  public EventStreamField fieldTransformLists(List<PublishedTransformSummary> fieldTransformLists) {
    this.fieldTransformLists = fieldTransformLists;
    return this;
  }

  public EventStreamField addFieldTransformListsItem(PublishedTransformSummary fieldTransformListsItem) {
    if (this.fieldTransformLists == null) {
      this.fieldTransformLists = new ArrayList<>();
    }
    this.fieldTransformLists.add(fieldTransformListsItem);
    return this;
  }

   /**
   * 
   * @return fieldTransformLists
  **/
  @javax.annotation.Nullable
  public List<PublishedTransformSummary> getFieldTransformLists() {
    return fieldTransformLists;
  }

  public void setFieldTransformLists(List<PublishedTransformSummary> fieldTransformLists) {
    this.fieldTransformLists = fieldTransformLists;
  }


  public EventStreamField columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

   /**
   * 
   * @return columnName
  **/
  @javax.annotation.Nullable
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStreamField eventStreamField = (EventStreamField) o;
    return Objects.equals(this.id, eventStreamField.id) &&
        Objects.equals(this.name, eventStreamField.name) &&
        Objects.equals(this.dataType, eventStreamField.dataType) &&
        Objects.equals(this.width, eventStreamField.width) &&
        Objects.equals(this.indexLevel, eventStreamField.indexLevel) &&
        Objects.equals(this.storageHint, eventStreamField.storageHint) &&
        Objects.equals(this.isKey, eventStreamField.isKey) &&
        Objects.equals(this.keyName, eventStreamField.keyName) &&
        Objects.equals(this.isSystem, eventStreamField.isSystem) &&
        Objects.equals(this.precision, eventStreamField.precision) &&
        Objects.equals(this.isSankey, eventStreamField.isSankey) &&
        Objects.equals(this.isDeleted, eventStreamField.isDeleted) &&
        Objects.equals(this.numDiscretes, eventStreamField.numDiscretes) &&
        Objects.equals(this.fieldTransformLists, eventStreamField.fieldTransformLists) &&
        Objects.equals(this.columnName, eventStreamField.columnName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, dataType, width, indexLevel, storageHint, isKey, keyName, isSystem, precision, isSankey, isDeleted, numDiscretes, fieldTransformLists, columnName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStreamField {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    indexLevel: ").append(toIndentedString(indexLevel)).append("\n");
    sb.append("    storageHint: ").append(toIndentedString(storageHint)).append("\n");
    sb.append("    isKey: ").append(toIndentedString(isKey)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    isSystem: ").append(toIndentedString(isSystem)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    isSankey: ").append(toIndentedString(isSankey)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    numDiscretes: ").append(toIndentedString(numDiscretes)).append("\n");
    sb.append("    fieldTransformLists: ").append(toIndentedString(fieldTransformLists)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("DataType");
    openapiFields.add("Width");
    openapiFields.add("IndexLevel");
    openapiFields.add("StorageHint");
    openapiFields.add("IsKey");
    openapiFields.add("KeyName");
    openapiFields.add("IsSystem");
    openapiFields.add("Precision");
    openapiFields.add("IsSankey");
    openapiFields.add("IsDeleted");
    openapiFields.add("NumDiscretes");
    openapiFields.add("FieldTransformLists");
    openapiFields.add("ColumnName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventStreamField
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStreamField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStreamField is not found in the empty JSON string", EventStreamField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStreamField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStreamField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("DataType") != null && !jsonObj.get("DataType").isJsonNull()) && !jsonObj.get("DataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataType").toString()));
      }
      if ((jsonObj.get("StorageHint") != null && !jsonObj.get("StorageHint").isJsonNull()) && !jsonObj.get("StorageHint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StorageHint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StorageHint").toString()));
      }
      if ((jsonObj.get("KeyName") != null && !jsonObj.get("KeyName").isJsonNull()) && !jsonObj.get("KeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeyName").toString()));
      }
      if (jsonObj.get("FieldTransformLists") != null && !jsonObj.get("FieldTransformLists").isJsonNull()) {
        JsonArray jsonArrayfieldTransformLists = jsonObj.getAsJsonArray("FieldTransformLists");
        if (jsonArrayfieldTransformLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FieldTransformLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FieldTransformLists` to be an array in the JSON string but got `%s`", jsonObj.get("FieldTransformLists").toString()));
          }

          // validate the optional field `FieldTransformLists` (array)
          for (int i = 0; i < jsonArrayfieldTransformLists.size(); i++) {
            PublishedTransformSummary.validateJsonElement(jsonArrayfieldTransformLists.get(i));
          };
        }
      }
      if ((jsonObj.get("ColumnName") != null && !jsonObj.get("ColumnName").isJsonNull()) && !jsonObj.get("ColumnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColumnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColumnName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStreamField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStreamField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStreamField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStreamField.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStreamField>() {
           @Override
           public void write(JsonWriter out, EventStreamField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStreamField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventStreamField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventStreamField
  * @throws IOException if the JSON string is invalid with respect to EventStreamField
  */
  public static EventStreamField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStreamField.class);
  }

 /**
  * Convert an instance of EventStreamField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

