/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.APICursor;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetDatasourceColumnsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetDatasourceColumnsRequest {
  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_INCLUDE_DISABLED = "IncludeDisabled";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DISABLED)
  private Boolean includeDisabled;

  public static final String SERIALIZED_NAME_INCLUDE_INVISIBLE = "IncludeInvisible";
  @SerializedName(SERIALIZED_NAME_INCLUDE_INVISIBLE)
  private Boolean includeInvisible;

  public static final String SERIALIZED_NAME_MINIMAL_RESULTS = "MinimalResults";
  @SerializedName(SERIALIZED_NAME_MINIMAL_RESULTS)
  private Boolean minimalResults;

  public static final String SERIALIZED_NAME_NAME_FILTER = "NameFilter";
  @SerializedName(SERIALIZED_NAME_NAME_FILTER)
  private String nameFilter;

  public static final String SERIALIZED_NAME_TABLE_I_D = "TableID";
  @SerializedName(SERIALIZED_NAME_TABLE_I_D)
  private Integer tableID;

  public GetDatasourceColumnsRequest() {
  }

  public GetDatasourceColumnsRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetDatasourceColumnsRequest includeDisabled(Boolean includeDisabled) {
    this.includeDisabled = includeDisabled;
    return this;
  }

   /**
   * Should disabled columns be included in the output?Default false
   * @return includeDisabled
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeDisabled() {
    return includeDisabled;
  }

  public void setIncludeDisabled(Boolean includeDisabled) {
    this.includeDisabled = includeDisabled;
  }


  public GetDatasourceColumnsRequest includeInvisible(Boolean includeInvisible) {
    this.includeInvisible = includeInvisible;
    return this;
  }

   /**
   * Should invisible columns be included in the output? Default false
   * @return includeInvisible
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeInvisible() {
    return includeInvisible;
  }

  public void setIncludeInvisible(Boolean includeInvisible) {
    this.includeInvisible = includeInvisible;
  }


  public GetDatasourceColumnsRequest minimalResults(Boolean minimalResults) {
    this.minimalResults = minimalResults;
    return this;
  }

   /**
   * Exclude attributes, etc. from the results
   * @return minimalResults
  **/
  @javax.annotation.Nullable
  public Boolean getMinimalResults() {
    return minimalResults;
  }

  public void setMinimalResults(Boolean minimalResults) {
    this.minimalResults = minimalResults;
  }


  public GetDatasourceColumnsRequest nameFilter(String nameFilter) {
    this.nameFilter = nameFilter;
    return this;
  }

   /**
   * Optionally filter on the name
   * @return nameFilter
  **/
  @javax.annotation.Nullable
  public String getNameFilter() {
    return nameFilter;
  }

  public void setNameFilter(String nameFilter) {
    this.nameFilter = nameFilter;
  }


  public GetDatasourceColumnsRequest tableID(Integer tableID) {
    this.tableID = tableID;
    return this;
  }

   /**
   * Supply a table ID to filter the result to just the columns within this table. Ignore this parameter to fetch all columns, which can be very slow.
   * @return tableID
  **/
  @javax.annotation.Nullable
  public Integer getTableID() {
    return tableID;
  }

  public void setTableID(Integer tableID) {
    this.tableID = tableID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDatasourceColumnsRequest getDatasourceColumnsRequest = (GetDatasourceColumnsRequest) o;
    return Objects.equals(this.cursor, getDatasourceColumnsRequest.cursor) &&
        Objects.equals(this.includeDisabled, getDatasourceColumnsRequest.includeDisabled) &&
        Objects.equals(this.includeInvisible, getDatasourceColumnsRequest.includeInvisible) &&
        Objects.equals(this.minimalResults, getDatasourceColumnsRequest.minimalResults) &&
        Objects.equals(this.nameFilter, getDatasourceColumnsRequest.nameFilter) &&
        Objects.equals(this.tableID, getDatasourceColumnsRequest.tableID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cursor, includeDisabled, includeInvisible, minimalResults, nameFilter, tableID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDatasourceColumnsRequest {\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    includeDisabled: ").append(toIndentedString(includeDisabled)).append("\n");
    sb.append("    includeInvisible: ").append(toIndentedString(includeInvisible)).append("\n");
    sb.append("    minimalResults: ").append(toIndentedString(minimalResults)).append("\n");
    sb.append("    nameFilter: ").append(toIndentedString(nameFilter)).append("\n");
    sb.append("    tableID: ").append(toIndentedString(tableID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cursor");
    openapiFields.add("IncludeDisabled");
    openapiFields.add("IncludeInvisible");
    openapiFields.add("MinimalResults");
    openapiFields.add("NameFilter");
    openapiFields.add("TableID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetDatasourceColumnsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDatasourceColumnsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDatasourceColumnsRequest is not found in the empty JSON string", GetDatasourceColumnsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDatasourceColumnsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDatasourceColumnsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
      if ((jsonObj.get("NameFilter") != null && !jsonObj.get("NameFilter").isJsonNull()) && !jsonObj.get("NameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NameFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDatasourceColumnsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDatasourceColumnsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDatasourceColumnsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDatasourceColumnsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDatasourceColumnsRequest>() {
           @Override
           public void write(JsonWriter out, GetDatasourceColumnsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDatasourceColumnsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetDatasourceColumnsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetDatasourceColumnsRequest
  * @throws IOException if the JSON string is invalid with respect to GetDatasourceColumnsRequest
  */
  public static GetDatasourceColumnsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDatasourceColumnsRequest.class);
  }

 /**
  * Convert an instance of GetDatasourceColumnsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

