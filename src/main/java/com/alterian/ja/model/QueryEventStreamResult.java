/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ColumnPublishedTransformSummary;
import com.alterian.ja.model.EventStreamTransition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class QueryEventStreamResult {
  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<String> events;

  public static final String SERIALIZED_NAME_SECONDARY_EVENTS = "SecondaryEvents";
  @SerializedName(SERIALIZED_NAME_SECONDARY_EVENTS)
  private List<String> secondaryEvents;

  public static final String SERIALIZED_NAME_TRANSITIONS = "Transitions";
  @SerializedName(SERIALIZED_NAME_TRANSITIONS)
  private List<EventStreamTransition> transitions;

  public static final String SERIALIZED_NAME_TRANSFORMS = "Transforms";
  @SerializedName(SERIALIZED_NAME_TRANSFORMS)
  private List<ColumnPublishedTransformSummary> transforms;

  public QueryEventStreamResult() {
  }

  public QueryEventStreamResult events(List<String> events) {
    this.events = events;
    return this;
  }

  public QueryEventStreamResult addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * 
   * @return events
  **/
  @javax.annotation.Nullable
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(List<String> events) {
    this.events = events;
  }


  public QueryEventStreamResult secondaryEvents(List<String> secondaryEvents) {
    this.secondaryEvents = secondaryEvents;
    return this;
  }

  public QueryEventStreamResult addSecondaryEventsItem(String secondaryEventsItem) {
    if (this.secondaryEvents == null) {
      this.secondaryEvents = new ArrayList<>();
    }
    this.secondaryEvents.add(secondaryEventsItem);
    return this;
  }

   /**
   * 
   * @return secondaryEvents
  **/
  @javax.annotation.Nullable
  public List<String> getSecondaryEvents() {
    return secondaryEvents;
  }

  public void setSecondaryEvents(List<String> secondaryEvents) {
    this.secondaryEvents = secondaryEvents;
  }


  public QueryEventStreamResult transitions(List<EventStreamTransition> transitions) {
    this.transitions = transitions;
    return this;
  }

  public QueryEventStreamResult addTransitionsItem(EventStreamTransition transitionsItem) {
    if (this.transitions == null) {
      this.transitions = new ArrayList<>();
    }
    this.transitions.add(transitionsItem);
    return this;
  }

   /**
   * 
   * @return transitions
  **/
  @javax.annotation.Nullable
  public List<EventStreamTransition> getTransitions() {
    return transitions;
  }

  public void setTransitions(List<EventStreamTransition> transitions) {
    this.transitions = transitions;
  }


  public QueryEventStreamResult transforms(List<ColumnPublishedTransformSummary> transforms) {
    this.transforms = transforms;
    return this;
  }

  public QueryEventStreamResult addTransformsItem(ColumnPublishedTransformSummary transformsItem) {
    if (this.transforms == null) {
      this.transforms = new ArrayList<>();
    }
    this.transforms.add(transformsItem);
    return this;
  }

   /**
   * Indicates the transforms that were used in the Sankey
   * @return transforms
  **/
  @javax.annotation.Nullable
  public List<ColumnPublishedTransformSummary> getTransforms() {
    return transforms;
  }

  public void setTransforms(List<ColumnPublishedTransformSummary> transforms) {
    this.transforms = transforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryEventStreamResult queryEventStreamResult = (QueryEventStreamResult) o;
    return Objects.equals(this.events, queryEventStreamResult.events) &&
        Objects.equals(this.secondaryEvents, queryEventStreamResult.secondaryEvents) &&
        Objects.equals(this.transitions, queryEventStreamResult.transitions) &&
        Objects.equals(this.transforms, queryEventStreamResult.transforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, secondaryEvents, transitions, transforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryEventStreamResult {\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    secondaryEvents: ").append(toIndentedString(secondaryEvents)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("    transforms: ").append(toIndentedString(transforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Events");
    openapiFields.add("SecondaryEvents");
    openapiFields.add("Transitions");
    openapiFields.add("Transforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QueryEventStreamResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryEventStreamResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryEventStreamResult is not found in the empty JSON string", QueryEventStreamResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryEventStreamResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryEventStreamResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Events") != null && !jsonObj.get("Events").isJsonNull() && !jsonObj.get("Events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Events` to be an array in the JSON string but got `%s`", jsonObj.get("Events").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SecondaryEvents") != null && !jsonObj.get("SecondaryEvents").isJsonNull() && !jsonObj.get("SecondaryEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondaryEvents` to be an array in the JSON string but got `%s`", jsonObj.get("SecondaryEvents").toString()));
      }
      if (jsonObj.get("Transitions") != null && !jsonObj.get("Transitions").isJsonNull()) {
        JsonArray jsonArraytransitions = jsonObj.getAsJsonArray("Transitions");
        if (jsonArraytransitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Transitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Transitions` to be an array in the JSON string but got `%s`", jsonObj.get("Transitions").toString()));
          }

          // validate the optional field `Transitions` (array)
          for (int i = 0; i < jsonArraytransitions.size(); i++) {
            EventStreamTransition.validateJsonElement(jsonArraytransitions.get(i));
          };
        }
      }
      if (jsonObj.get("Transforms") != null && !jsonObj.get("Transforms").isJsonNull()) {
        JsonArray jsonArraytransforms = jsonObj.getAsJsonArray("Transforms");
        if (jsonArraytransforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Transforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Transforms` to be an array in the JSON string but got `%s`", jsonObj.get("Transforms").toString()));
          }

          // validate the optional field `Transforms` (array)
          for (int i = 0; i < jsonArraytransforms.size(); i++) {
            ColumnPublishedTransformSummary.validateJsonElement(jsonArraytransforms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryEventStreamResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryEventStreamResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryEventStreamResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryEventStreamResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryEventStreamResult>() {
           @Override
           public void write(JsonWriter out, QueryEventStreamResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryEventStreamResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryEventStreamResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryEventStreamResult
  * @throws IOException if the JSON string is invalid with respect to QueryEventStreamResult
  */
  public static QueryEventStreamResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryEventStreamResult.class);
  }

 /**
  * Convert an instance of QueryEventStreamResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

