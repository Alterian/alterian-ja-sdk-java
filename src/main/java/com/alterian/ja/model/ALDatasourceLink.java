/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ALDatasourceLinkJoin;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ALDatasourceLink {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_TABLE_I_D = "TableID";
  @SerializedName(SERIALIZED_NAME_TABLE_I_D)
  private Integer tableID;

  public static final String SERIALIZED_NAME_REFERENCED_TABLE_I_D = "ReferencedTableID";
  @SerializedName(SERIALIZED_NAME_REFERENCED_TABLE_I_D)
  private Integer referencedTableID;

  public static final String SERIALIZED_NAME_JOINS = "Joins";
  @SerializedName(SERIALIZED_NAME_JOINS)
  private List<ALDatasourceLinkJoin> joins;

  public ALDatasourceLink() {
  }

  public ALDatasourceLink ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public ALDatasourceLink tableID(Integer tableID) {
    this.tableID = tableID;
    return this;
  }

   /**
   * 
   * @return tableID
  **/
  @javax.annotation.Nullable
  public Integer getTableID() {
    return tableID;
  }

  public void setTableID(Integer tableID) {
    this.tableID = tableID;
  }


  public ALDatasourceLink referencedTableID(Integer referencedTableID) {
    this.referencedTableID = referencedTableID;
    return this;
  }

   /**
   * 
   * @return referencedTableID
  **/
  @javax.annotation.Nullable
  public Integer getReferencedTableID() {
    return referencedTableID;
  }

  public void setReferencedTableID(Integer referencedTableID) {
    this.referencedTableID = referencedTableID;
  }


  public ALDatasourceLink joins(List<ALDatasourceLinkJoin> joins) {
    this.joins = joins;
    return this;
  }

  public ALDatasourceLink addJoinsItem(ALDatasourceLinkJoin joinsItem) {
    if (this.joins == null) {
      this.joins = new ArrayList<>();
    }
    this.joins.add(joinsItem);
    return this;
  }

   /**
   * 
   * @return joins
  **/
  @javax.annotation.Nullable
  public List<ALDatasourceLinkJoin> getJoins() {
    return joins;
  }

  public void setJoins(List<ALDatasourceLinkJoin> joins) {
    this.joins = joins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ALDatasourceLink alDatasourceLink = (ALDatasourceLink) o;
    return Objects.equals(this.ID, alDatasourceLink.ID) &&
        Objects.equals(this.tableID, alDatasourceLink.tableID) &&
        Objects.equals(this.referencedTableID, alDatasourceLink.referencedTableID) &&
        Objects.equals(this.joins, alDatasourceLink.joins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, tableID, referencedTableID, joins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ALDatasourceLink {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    tableID: ").append(toIndentedString(tableID)).append("\n");
    sb.append("    referencedTableID: ").append(toIndentedString(referencedTableID)).append("\n");
    sb.append("    joins: ").append(toIndentedString(joins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("TableID");
    openapiFields.add("ReferencedTableID");
    openapiFields.add("Joins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ALDatasourceLink
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ALDatasourceLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ALDatasourceLink is not found in the empty JSON string", ALDatasourceLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ALDatasourceLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ALDatasourceLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Joins") != null && !jsonObj.get("Joins").isJsonNull()) {
        JsonArray jsonArrayjoins = jsonObj.getAsJsonArray("Joins");
        if (jsonArrayjoins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Joins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Joins` to be an array in the JSON string but got `%s`", jsonObj.get("Joins").toString()));
          }

          // validate the optional field `Joins` (array)
          for (int i = 0; i < jsonArrayjoins.size(); i++) {
            ALDatasourceLinkJoin.validateJsonElement(jsonArrayjoins.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ALDatasourceLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ALDatasourceLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ALDatasourceLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ALDatasourceLink.class));

       return (TypeAdapter<T>) new TypeAdapter<ALDatasourceLink>() {
           @Override
           public void write(JsonWriter out, ALDatasourceLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ALDatasourceLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ALDatasourceLink given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ALDatasourceLink
  * @throws IOException if the JSON string is invalid with respect to ALDatasourceLink
  */
  public static ALDatasourceLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ALDatasourceLink.class);
  }

 /**
  * Convert an instance of ALDatasourceLink to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

