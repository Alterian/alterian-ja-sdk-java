/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMOmnitureSettings {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INTEGRATION_NUM = "IntegrationNum";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_NUM)
  private String integrationNum;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_REPORT_SUITE = "ReportSuite";
  @SerializedName(SERIALIZED_NAME_REPORT_SUITE)
  private String reportSuite;

  public static final String SERIALIZED_NAME_REMARKETING_SEG_PATH = "RemarketingSegPath";
  @SerializedName(SERIALIZED_NAME_REMARKETING_SEG_PATH)
  private String remarketingSegPath;

  public static final String SERIALIZED_NAME_REMARKETING_SEG = "RemarketingSeg";
  @SerializedName(SERIALIZED_NAME_REMARKETING_SEG)
  private String remarketingSeg;

  public static final String SERIALIZED_NAME_EMAIL_ADDR = "EmailAddr";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDR)
  private String emailAddr;

  public DMOmnitureSettings() {
  }

  public DMOmnitureSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * 
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DMOmnitureSettings integrationNum(String integrationNum) {
    this.integrationNum = integrationNum;
    return this;
  }

   /**
   * 
   * @return integrationNum
  **/
  @javax.annotation.Nullable
  public String getIntegrationNum() {
    return integrationNum;
  }

  public void setIntegrationNum(String integrationNum) {
    this.integrationNum = integrationNum;
  }


  public DMOmnitureSettings companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * 
   * @return companyName
  **/
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public DMOmnitureSettings reportSuite(String reportSuite) {
    this.reportSuite = reportSuite;
    return this;
  }

   /**
   * 
   * @return reportSuite
  **/
  @javax.annotation.Nullable
  public String getReportSuite() {
    return reportSuite;
  }

  public void setReportSuite(String reportSuite) {
    this.reportSuite = reportSuite;
  }


  public DMOmnitureSettings remarketingSegPath(String remarketingSegPath) {
    this.remarketingSegPath = remarketingSegPath;
    return this;
  }

   /**
   * 
   * @return remarketingSegPath
  **/
  @javax.annotation.Nullable
  public String getRemarketingSegPath() {
    return remarketingSegPath;
  }

  public void setRemarketingSegPath(String remarketingSegPath) {
    this.remarketingSegPath = remarketingSegPath;
  }


  public DMOmnitureSettings remarketingSeg(String remarketingSeg) {
    this.remarketingSeg = remarketingSeg;
    return this;
  }

   /**
   * 
   * @return remarketingSeg
  **/
  @javax.annotation.Nullable
  public String getRemarketingSeg() {
    return remarketingSeg;
  }

  public void setRemarketingSeg(String remarketingSeg) {
    this.remarketingSeg = remarketingSeg;
  }


  public DMOmnitureSettings emailAddr(String emailAddr) {
    this.emailAddr = emailAddr;
    return this;
  }

   /**
   * 
   * @return emailAddr
  **/
  @javax.annotation.Nullable
  public String getEmailAddr() {
    return emailAddr;
  }

  public void setEmailAddr(String emailAddr) {
    this.emailAddr = emailAddr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMOmnitureSettings dmOmnitureSettings = (DMOmnitureSettings) o;
    return Objects.equals(this.enabled, dmOmnitureSettings.enabled) &&
        Objects.equals(this.integrationNum, dmOmnitureSettings.integrationNum) &&
        Objects.equals(this.companyName, dmOmnitureSettings.companyName) &&
        Objects.equals(this.reportSuite, dmOmnitureSettings.reportSuite) &&
        Objects.equals(this.remarketingSegPath, dmOmnitureSettings.remarketingSegPath) &&
        Objects.equals(this.remarketingSeg, dmOmnitureSettings.remarketingSeg) &&
        Objects.equals(this.emailAddr, dmOmnitureSettings.emailAddr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, integrationNum, companyName, reportSuite, remarketingSegPath, remarketingSeg, emailAddr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMOmnitureSettings {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    integrationNum: ").append(toIndentedString(integrationNum)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    reportSuite: ").append(toIndentedString(reportSuite)).append("\n");
    sb.append("    remarketingSegPath: ").append(toIndentedString(remarketingSegPath)).append("\n");
    sb.append("    remarketingSeg: ").append(toIndentedString(remarketingSeg)).append("\n");
    sb.append("    emailAddr: ").append(toIndentedString(emailAddr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("IntegrationNum");
    openapiFields.add("CompanyName");
    openapiFields.add("ReportSuite");
    openapiFields.add("RemarketingSegPath");
    openapiFields.add("RemarketingSeg");
    openapiFields.add("EmailAddr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMOmnitureSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMOmnitureSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMOmnitureSettings is not found in the empty JSON string", DMOmnitureSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMOmnitureSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMOmnitureSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IntegrationNum") != null && !jsonObj.get("IntegrationNum").isJsonNull()) && !jsonObj.get("IntegrationNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntegrationNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntegrationNum").toString()));
      }
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("ReportSuite") != null && !jsonObj.get("ReportSuite").isJsonNull()) && !jsonObj.get("ReportSuite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportSuite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportSuite").toString()));
      }
      if ((jsonObj.get("RemarketingSegPath") != null && !jsonObj.get("RemarketingSegPath").isJsonNull()) && !jsonObj.get("RemarketingSegPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemarketingSegPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RemarketingSegPath").toString()));
      }
      if ((jsonObj.get("RemarketingSeg") != null && !jsonObj.get("RemarketingSeg").isJsonNull()) && !jsonObj.get("RemarketingSeg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemarketingSeg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RemarketingSeg").toString()));
      }
      if ((jsonObj.get("EmailAddr") != null && !jsonObj.get("EmailAddr").isJsonNull()) && !jsonObj.get("EmailAddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMOmnitureSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMOmnitureSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMOmnitureSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMOmnitureSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DMOmnitureSettings>() {
           @Override
           public void write(JsonWriter out, DMOmnitureSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMOmnitureSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMOmnitureSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMOmnitureSettings
  * @throws IOException if the JSON string is invalid with respect to DMOmnitureSettings
  */
  public static DMOmnitureSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMOmnitureSettings.class);
  }

 /**
  * Convert an instance of DMOmnitureSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

