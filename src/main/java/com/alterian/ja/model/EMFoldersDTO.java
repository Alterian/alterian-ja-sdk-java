/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.EMFolderDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EMFoldersDTO {
  public static final String SERIALIZED_NAME_EM_FOLDERS_D_T_O_LIST = "EMFoldersDTOList";
  @SerializedName(SERIALIZED_NAME_EM_FOLDERS_D_T_O_LIST)
  private List<EMFolderDTO> emFoldersDTOList;

  public static final String SERIALIZED_NAME_HIERARCHY_CATEGORY_IDS = "HierarchyCategoryIds";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_CATEGORY_IDS)
  private String hierarchyCategoryIds;

  public EMFoldersDTO() {
  }

  public EMFoldersDTO emFoldersDTOList(List<EMFolderDTO> emFoldersDTOList) {
    this.emFoldersDTOList = emFoldersDTOList;
    return this;
  }

  public EMFoldersDTO addEmFoldersDTOListItem(EMFolderDTO emFoldersDTOListItem) {
    if (this.emFoldersDTOList == null) {
      this.emFoldersDTOList = new ArrayList<>();
    }
    this.emFoldersDTOList.add(emFoldersDTOListItem);
    return this;
  }

   /**
   * 
   * @return emFoldersDTOList
  **/
  @javax.annotation.Nullable
  public List<EMFolderDTO> getEmFoldersDTOList() {
    return emFoldersDTOList;
  }

  public void setEmFoldersDTOList(List<EMFolderDTO> emFoldersDTOList) {
    this.emFoldersDTOList = emFoldersDTOList;
  }


  public EMFoldersDTO hierarchyCategoryIds(String hierarchyCategoryIds) {
    this.hierarchyCategoryIds = hierarchyCategoryIds;
    return this;
  }

   /**
   * 
   * @return hierarchyCategoryIds
  **/
  @javax.annotation.Nullable
  public String getHierarchyCategoryIds() {
    return hierarchyCategoryIds;
  }

  public void setHierarchyCategoryIds(String hierarchyCategoryIds) {
    this.hierarchyCategoryIds = hierarchyCategoryIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMFoldersDTO emFoldersDTO = (EMFoldersDTO) o;
    return Objects.equals(this.emFoldersDTOList, emFoldersDTO.emFoldersDTOList) &&
        Objects.equals(this.hierarchyCategoryIds, emFoldersDTO.hierarchyCategoryIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emFoldersDTOList, hierarchyCategoryIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMFoldersDTO {\n");
    sb.append("    emFoldersDTOList: ").append(toIndentedString(emFoldersDTOList)).append("\n");
    sb.append("    hierarchyCategoryIds: ").append(toIndentedString(hierarchyCategoryIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EMFoldersDTOList");
    openapiFields.add("HierarchyCategoryIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMFoldersDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMFoldersDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMFoldersDTO is not found in the empty JSON string", EMFoldersDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMFoldersDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMFoldersDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("EMFoldersDTOList") != null && !jsonObj.get("EMFoldersDTOList").isJsonNull()) {
        JsonArray jsonArrayemFoldersDTOList = jsonObj.getAsJsonArray("EMFoldersDTOList");
        if (jsonArrayemFoldersDTOList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EMFoldersDTOList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EMFoldersDTOList` to be an array in the JSON string but got `%s`", jsonObj.get("EMFoldersDTOList").toString()));
          }

          // validate the optional field `EMFoldersDTOList` (array)
          for (int i = 0; i < jsonArrayemFoldersDTOList.size(); i++) {
            EMFolderDTO.validateJsonElement(jsonArrayemFoldersDTOList.get(i));
          };
        }
      }
      if ((jsonObj.get("HierarchyCategoryIds") != null && !jsonObj.get("HierarchyCategoryIds").isJsonNull()) && !jsonObj.get("HierarchyCategoryIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HierarchyCategoryIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HierarchyCategoryIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMFoldersDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMFoldersDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMFoldersDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMFoldersDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<EMFoldersDTO>() {
           @Override
           public void write(JsonWriter out, EMFoldersDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMFoldersDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMFoldersDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMFoldersDTO
  * @throws IOException if the JSON string is invalid with respect to EMFoldersDTO
  */
  public static EMFoldersDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMFoldersDTO.class);
  }

 /**
  * Convert an instance of EMFoldersDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

