/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * DeleteUserReassignAssetsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DeleteUserReassignAssetsRequest {
  public static final String SERIALIZED_NAME_DELETED_USER_NAME = "DeletedUserName";
  @SerializedName(SERIALIZED_NAME_DELETED_USER_NAME)
  private String deletedUserName;

  public static final String SERIALIZED_NAME_DELETE_LOGIN = "DeleteLogin";
  @SerializedName(SERIALIZED_NAME_DELETE_LOGIN)
  private Boolean deleteLogin;

  public static final String SERIALIZED_NAME_REASSIGNED_USER_NAME = "ReassignedUserName";
  @SerializedName(SERIALIZED_NAME_REASSIGNED_USER_NAME)
  private String reassignedUserName;

  public DeleteUserReassignAssetsRequest() {
  }

  public DeleteUserReassignAssetsRequest deletedUserName(String deletedUserName) {
    this.deletedUserName = deletedUserName;
    return this;
  }

   /**
   * Name of the user to delete
   * @return deletedUserName
  **/
  @javax.annotation.Nullable
  public String getDeletedUserName() {
    return deletedUserName;
  }

  public void setDeletedUserName(String deletedUserName) {
    this.deletedUserName = deletedUserName;
  }


  public DeleteUserReassignAssetsRequest deleteLogin(Boolean deleteLogin) {
    this.deleteLogin = deleteLogin;
    return this;
  }

   /**
   * flag to indicate whether associated login should be deleted
   * @return deleteLogin
  **/
  @javax.annotation.Nullable
  public Boolean getDeleteLogin() {
    return deleteLogin;
  }

  public void setDeleteLogin(Boolean deleteLogin) {
    this.deleteLogin = deleteLogin;
  }


  public DeleteUserReassignAssetsRequest reassignedUserName(String reassignedUserName) {
    this.reassignedUserName = reassignedUserName;
    return this;
  }

   /**
   * Name of the user to reassign assets to
   * @return reassignedUserName
  **/
  @javax.annotation.Nullable
  public String getReassignedUserName() {
    return reassignedUserName;
  }

  public void setReassignedUserName(String reassignedUserName) {
    this.reassignedUserName = reassignedUserName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest = (DeleteUserReassignAssetsRequest) o;
    return Objects.equals(this.deletedUserName, deleteUserReassignAssetsRequest.deletedUserName) &&
        Objects.equals(this.deleteLogin, deleteUserReassignAssetsRequest.deleteLogin) &&
        Objects.equals(this.reassignedUserName, deleteUserReassignAssetsRequest.reassignedUserName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletedUserName, deleteLogin, reassignedUserName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteUserReassignAssetsRequest {\n");
    sb.append("    deletedUserName: ").append(toIndentedString(deletedUserName)).append("\n");
    sb.append("    deleteLogin: ").append(toIndentedString(deleteLogin)).append("\n");
    sb.append("    reassignedUserName: ").append(toIndentedString(reassignedUserName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeletedUserName");
    openapiFields.add("DeleteLogin");
    openapiFields.add("ReassignedUserName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DeleteUserReassignAssetsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteUserReassignAssetsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteUserReassignAssetsRequest is not found in the empty JSON string", DeleteUserReassignAssetsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteUserReassignAssetsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteUserReassignAssetsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeletedUserName") != null && !jsonObj.get("DeletedUserName").isJsonNull()) && !jsonObj.get("DeletedUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeletedUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeletedUserName").toString()));
      }
      if ((jsonObj.get("ReassignedUserName") != null && !jsonObj.get("ReassignedUserName").isJsonNull()) && !jsonObj.get("ReassignedUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReassignedUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReassignedUserName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteUserReassignAssetsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteUserReassignAssetsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteUserReassignAssetsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteUserReassignAssetsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteUserReassignAssetsRequest>() {
           @Override
           public void write(JsonWriter out, DeleteUserReassignAssetsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteUserReassignAssetsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeleteUserReassignAssetsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeleteUserReassignAssetsRequest
  * @throws IOException if the JSON string is invalid with respect to DeleteUserReassignAssetsRequest
  */
  public static DeleteUserReassignAssetsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteUserReassignAssetsRequest.class);
  }

 /**
  * Convert an instance of DeleteUserReassignAssetsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

