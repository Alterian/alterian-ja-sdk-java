/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMInboundAddress;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * Bundled object containing Id of default sender email address together with the list of addresses, as defined in Email Manager.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class InboundAddresses {
  public static final String SERIALIZED_NAME_DEFAULT_INBOUND_ADDRESS_ID = "DefaultInboundAddressId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INBOUND_ADDRESS_ID)
  private Integer defaultInboundAddressId;

  public static final String SERIALIZED_NAME_INBOUND_ADDRESS_LIST = "InboundAddressList";
  @SerializedName(SERIALIZED_NAME_INBOUND_ADDRESS_LIST)
  private List<DMInboundAddress> inboundAddressList;

  public InboundAddresses() {
  }

  public InboundAddresses defaultInboundAddressId(Integer defaultInboundAddressId) {
    this.defaultInboundAddressId = defaultInboundAddressId;
    return this;
  }

   /**
   * 
   * @return defaultInboundAddressId
  **/
  @javax.annotation.Nullable
  public Integer getDefaultInboundAddressId() {
    return defaultInboundAddressId;
  }

  public void setDefaultInboundAddressId(Integer defaultInboundAddressId) {
    this.defaultInboundAddressId = defaultInboundAddressId;
  }


  public InboundAddresses inboundAddressList(List<DMInboundAddress> inboundAddressList) {
    this.inboundAddressList = inboundAddressList;
    return this;
  }

  public InboundAddresses addInboundAddressListItem(DMInboundAddress inboundAddressListItem) {
    if (this.inboundAddressList == null) {
      this.inboundAddressList = new ArrayList<>();
    }
    this.inboundAddressList.add(inboundAddressListItem);
    return this;
  }

   /**
   * 
   * @return inboundAddressList
  **/
  @javax.annotation.Nullable
  public List<DMInboundAddress> getInboundAddressList() {
    return inboundAddressList;
  }

  public void setInboundAddressList(List<DMInboundAddress> inboundAddressList) {
    this.inboundAddressList = inboundAddressList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundAddresses inboundAddresses = (InboundAddresses) o;
    return Objects.equals(this.defaultInboundAddressId, inboundAddresses.defaultInboundAddressId) &&
        Objects.equals(this.inboundAddressList, inboundAddresses.inboundAddressList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultInboundAddressId, inboundAddressList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundAddresses {\n");
    sb.append("    defaultInboundAddressId: ").append(toIndentedString(defaultInboundAddressId)).append("\n");
    sb.append("    inboundAddressList: ").append(toIndentedString(inboundAddressList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultInboundAddressId");
    openapiFields.add("InboundAddressList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InboundAddresses
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundAddresses.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundAddresses is not found in the empty JSON string", InboundAddresses.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundAddresses.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundAddresses` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("InboundAddressList") != null && !jsonObj.get("InboundAddressList").isJsonNull()) {
        JsonArray jsonArrayinboundAddressList = jsonObj.getAsJsonArray("InboundAddressList");
        if (jsonArrayinboundAddressList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("InboundAddressList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `InboundAddressList` to be an array in the JSON string but got `%s`", jsonObj.get("InboundAddressList").toString()));
          }

          // validate the optional field `InboundAddressList` (array)
          for (int i = 0; i < jsonArrayinboundAddressList.size(); i++) {
            DMInboundAddress.validateJsonElement(jsonArrayinboundAddressList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundAddresses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundAddresses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundAddresses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundAddresses.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundAddresses>() {
           @Override
           public void write(JsonWriter out, InboundAddresses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundAddresses read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InboundAddresses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InboundAddresses
  * @throws IOException if the JSON string is invalid with respect to InboundAddresses
  */
  public static InboundAddresses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundAddresses.class);
  }

 /**
  * Convert an instance of InboundAddresses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

