/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class SequencePredictorPredictionOptions {
  public static final String SERIALIZED_NAME_PREDICTION_NAME = "PredictionName";
  @SerializedName(SERIALIZED_NAME_PREDICTION_NAME)
  private String predictionName;

  public static final String SERIALIZED_NAME_PREDICTION_SEED_OUTPUT_OPTION = "PredictionSeedOutputOption";
  @SerializedName(SERIALIZED_NAME_PREDICTION_SEED_OUTPUT_OPTION)
  private Integer predictionSeedOutputOption;

  public static final String SERIALIZED_NAME_PREDICTION_SELECTION_MODE = "PredictionSelectionMode";
  @SerializedName(SERIALIZED_NAME_PREDICTION_SELECTION_MODE)
  private Integer predictionSelectionMode;

  public static final String SERIALIZED_NAME_NUMBER_OF_PREDICTIONS = "NumberOfPredictions";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PREDICTIONS)
  private Integer numberOfPredictions;

  public static final String SERIALIZED_NAME_IS_DATA_DEBUG_REQUIRED = "IsDataDebugRequired";
  @SerializedName(SERIALIZED_NAME_IS_DATA_DEBUG_REQUIRED)
  private Boolean isDataDebugRequired;

  public SequencePredictorPredictionOptions() {
  }

  public SequencePredictorPredictionOptions predictionName(String predictionName) {
    this.predictionName = predictionName;
    return this;
  }

   /**
   * Name for the generated prediction
   * @return predictionName
  **/
  @javax.annotation.Nullable
  public String getPredictionName() {
    return predictionName;
  }

  public void setPredictionName(String predictionName) {
    this.predictionName = predictionName;
  }


  public SequencePredictorPredictionOptions predictionSeedOutputOption(Integer predictionSeedOutputOption) {
    this.predictionSeedOutputOption = predictionSeedOutputOption;
    return this;
  }

   /**
   * Indicates what proportion of the prediction seed to include in the prediction that is output             0 - None 1- All
   * @return predictionSeedOutputOption
  **/
  @javax.annotation.Nullable
  public Integer getPredictionSeedOutputOption() {
    return predictionSeedOutputOption;
  }

  public void setPredictionSeedOutputOption(Integer predictionSeedOutputOption) {
    this.predictionSeedOutputOption = predictionSeedOutputOption;
  }


  public SequencePredictorPredictionOptions predictionSelectionMode(Integer predictionSelectionMode) {
    this.predictionSelectionMode = predictionSelectionMode;
    return this;
  }

   /**
   * Whether to always select the most probable next step or to select randomised distribution around the most probable step             0&#x3D;Maximum probability , 1&#x3D;Randomized maximum probability (&#39;Fuzzy&#39; predictions - yields a more realistic looking range of outputs)
   * @return predictionSelectionMode
  **/
  @javax.annotation.Nullable
  public Integer getPredictionSelectionMode() {
    return predictionSelectionMode;
  }

  public void setPredictionSelectionMode(Integer predictionSelectionMode) {
    this.predictionSelectionMode = predictionSelectionMode;
  }


  public SequencePredictorPredictionOptions numberOfPredictions(Integer numberOfPredictions) {
    this.numberOfPredictions = numberOfPredictions;
    return this;
  }

   /**
   * Number of events to predict
   * @return numberOfPredictions
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfPredictions() {
    return numberOfPredictions;
  }

  public void setNumberOfPredictions(Integer numberOfPredictions) {
    this.numberOfPredictions = numberOfPredictions;
  }


  public SequencePredictorPredictionOptions isDataDebugRequired(Boolean isDataDebugRequired) {
    this.isDataDebugRequired = isDataDebugRequired;
    return this;
  }

   /**
   * Turn this on to leave intermediate tables in place for the purposes of debugging a model                          For &#39;fuzzy mode&#39; predictons this will also cause some extra columns for &#39;Most Likely Event&#39; and &#39;Most Likely Event Probability&#39; to be added to the output for comparison
   * @return isDataDebugRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsDataDebugRequired() {
    return isDataDebugRequired;
  }

  public void setIsDataDebugRequired(Boolean isDataDebugRequired) {
    this.isDataDebugRequired = isDataDebugRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SequencePredictorPredictionOptions sequencePredictorPredictionOptions = (SequencePredictorPredictionOptions) o;
    return Objects.equals(this.predictionName, sequencePredictorPredictionOptions.predictionName) &&
        Objects.equals(this.predictionSeedOutputOption, sequencePredictorPredictionOptions.predictionSeedOutputOption) &&
        Objects.equals(this.predictionSelectionMode, sequencePredictorPredictionOptions.predictionSelectionMode) &&
        Objects.equals(this.numberOfPredictions, sequencePredictorPredictionOptions.numberOfPredictions) &&
        Objects.equals(this.isDataDebugRequired, sequencePredictorPredictionOptions.isDataDebugRequired);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(predictionName, predictionSeedOutputOption, predictionSelectionMode, numberOfPredictions, isDataDebugRequired);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SequencePredictorPredictionOptions {\n");
    sb.append("    predictionName: ").append(toIndentedString(predictionName)).append("\n");
    sb.append("    predictionSeedOutputOption: ").append(toIndentedString(predictionSeedOutputOption)).append("\n");
    sb.append("    predictionSelectionMode: ").append(toIndentedString(predictionSelectionMode)).append("\n");
    sb.append("    numberOfPredictions: ").append(toIndentedString(numberOfPredictions)).append("\n");
    sb.append("    isDataDebugRequired: ").append(toIndentedString(isDataDebugRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PredictionName");
    openapiFields.add("PredictionSeedOutputOption");
    openapiFields.add("PredictionSelectionMode");
    openapiFields.add("NumberOfPredictions");
    openapiFields.add("IsDataDebugRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SequencePredictorPredictionOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SequencePredictorPredictionOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SequencePredictorPredictionOptions is not found in the empty JSON string", SequencePredictorPredictionOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SequencePredictorPredictionOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SequencePredictorPredictionOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PredictionName") != null && !jsonObj.get("PredictionName").isJsonNull()) && !jsonObj.get("PredictionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PredictionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PredictionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SequencePredictorPredictionOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SequencePredictorPredictionOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SequencePredictorPredictionOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SequencePredictorPredictionOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<SequencePredictorPredictionOptions>() {
           @Override
           public void write(JsonWriter out, SequencePredictorPredictionOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SequencePredictorPredictionOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SequencePredictorPredictionOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SequencePredictorPredictionOptions
  * @throws IOException if the JSON string is invalid with respect to SequencePredictorPredictionOptions
  */
  public static SequencePredictorPredictionOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SequencePredictorPredictionOptions.class);
  }

 /**
  * Convert an instance of SequencePredictorPredictionOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

