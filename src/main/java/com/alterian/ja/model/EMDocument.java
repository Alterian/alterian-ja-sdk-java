/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMUser;
import com.alterian.ja.model.EMDocumentActivityType;
import com.alterian.ja.model.EMDocumentType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EMDocument {
  public static final String SERIALIZED_NAME_CREATED_BY = "CreatedBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private DMUser createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FOLDER_I_D = "FolderID";
  @SerializedName(SERIALIZED_NAME_FOLDER_I_D)
  private Integer folderID;

  public static final String SERIALIZED_NAME_FOLDER_PATH = "FolderPath";
  @SerializedName(SERIALIZED_NAME_FOLDER_PATH)
  private String folderPath;

  public static final String SERIALIZED_NAME_HAS_THUMBNAIL = "HasThumbnail";
  @SerializedName(SERIALIZED_NAME_HAS_THUMBNAIL)
  private Boolean hasThumbnail;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_BY = "LastActivityBy";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_BY)
  private DMUser lastActivityBy;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_DATE = "LastActivityDate";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_DATE)
  private OffsetDateTime lastActivityDate;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_TYPE = "LastActivityType";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_TYPE)
  private EMDocumentActivityType lastActivityType;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "LastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private DMUser lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private OffsetDateTime lastModifiedDate;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_I_D = "SourceID";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_D)
  private Integer sourceID;

  public static final String SERIALIZED_NAME_THUMBNAIL_PATH = "ThumbnailPath";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_PATH)
  private String thumbnailPath;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EMDocumentType type;

  public EMDocument() {
  }

  public EMDocument createdBy(DMUser createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public DMUser getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(DMUser createdBy) {
    this.createdBy = createdBy;
  }


  public EMDocument createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * 
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public EMDocument description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EMDocument folderID(Integer folderID) {
    this.folderID = folderID;
    return this;
  }

   /**
   * 
   * @return folderID
  **/
  @javax.annotation.Nullable
  public Integer getFolderID() {
    return folderID;
  }

  public void setFolderID(Integer folderID) {
    this.folderID = folderID;
  }


  public EMDocument folderPath(String folderPath) {
    this.folderPath = folderPath;
    return this;
  }

   /**
   * 
   * @return folderPath
  **/
  @javax.annotation.Nullable
  public String getFolderPath() {
    return folderPath;
  }

  public void setFolderPath(String folderPath) {
    this.folderPath = folderPath;
  }


  public EMDocument hasThumbnail(Boolean hasThumbnail) {
    this.hasThumbnail = hasThumbnail;
    return this;
  }

   /**
   * 
   * @return hasThumbnail
  **/
  @javax.annotation.Nullable
  public Boolean getHasThumbnail() {
    return hasThumbnail;
  }

  public void setHasThumbnail(Boolean hasThumbnail) {
    this.hasThumbnail = hasThumbnail;
  }


  public EMDocument ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public EMDocument lastActivityBy(DMUser lastActivityBy) {
    this.lastActivityBy = lastActivityBy;
    return this;
  }

   /**
   * Get lastActivityBy
   * @return lastActivityBy
  **/
  @javax.annotation.Nullable
  public DMUser getLastActivityBy() {
    return lastActivityBy;
  }

  public void setLastActivityBy(DMUser lastActivityBy) {
    this.lastActivityBy = lastActivityBy;
  }


  public EMDocument lastActivityDate(OffsetDateTime lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
    return this;
  }

   /**
   * 
   * @return lastActivityDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastActivityDate() {
    return lastActivityDate;
  }

  public void setLastActivityDate(OffsetDateTime lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
  }


  public EMDocument lastActivityType(EMDocumentActivityType lastActivityType) {
    this.lastActivityType = lastActivityType;
    return this;
  }

   /**
   * Get lastActivityType
   * @return lastActivityType
  **/
  @javax.annotation.Nullable
  public EMDocumentActivityType getLastActivityType() {
    return lastActivityType;
  }

  public void setLastActivityType(EMDocumentActivityType lastActivityType) {
    this.lastActivityType = lastActivityType;
  }


  public EMDocument lastModifiedBy(DMUser lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

   /**
   * Get lastModifiedBy
   * @return lastModifiedBy
  **/
  @javax.annotation.Nullable
  public DMUser getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(DMUser lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public EMDocument lastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * 
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public EMDocument name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EMDocument sourceID(Integer sourceID) {
    this.sourceID = sourceID;
    return this;
  }

   /**
   * 
   * @return sourceID
  **/
  @javax.annotation.Nullable
  public Integer getSourceID() {
    return sourceID;
  }

  public void setSourceID(Integer sourceID) {
    this.sourceID = sourceID;
  }


  public EMDocument thumbnailPath(String thumbnailPath) {
    this.thumbnailPath = thumbnailPath;
    return this;
  }

   /**
   * 
   * @return thumbnailPath
  **/
  @javax.annotation.Nullable
  public String getThumbnailPath() {
    return thumbnailPath;
  }

  public void setThumbnailPath(String thumbnailPath) {
    this.thumbnailPath = thumbnailPath;
  }


  public EMDocument type(EMDocumentType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public EMDocumentType getType() {
    return type;
  }

  public void setType(EMDocumentType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMDocument emDocument = (EMDocument) o;
    return Objects.equals(this.createdBy, emDocument.createdBy) &&
        Objects.equals(this.createdDate, emDocument.createdDate) &&
        Objects.equals(this.description, emDocument.description) &&
        Objects.equals(this.folderID, emDocument.folderID) &&
        Objects.equals(this.folderPath, emDocument.folderPath) &&
        Objects.equals(this.hasThumbnail, emDocument.hasThumbnail) &&
        Objects.equals(this.ID, emDocument.ID) &&
        Objects.equals(this.lastActivityBy, emDocument.lastActivityBy) &&
        Objects.equals(this.lastActivityDate, emDocument.lastActivityDate) &&
        Objects.equals(this.lastActivityType, emDocument.lastActivityType) &&
        Objects.equals(this.lastModifiedBy, emDocument.lastModifiedBy) &&
        Objects.equals(this.lastModifiedDate, emDocument.lastModifiedDate) &&
        Objects.equals(this.name, emDocument.name) &&
        Objects.equals(this.sourceID, emDocument.sourceID) &&
        Objects.equals(this.thumbnailPath, emDocument.thumbnailPath) &&
        Objects.equals(this.type, emDocument.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBy, createdDate, description, folderID, folderPath, hasThumbnail, ID, lastActivityBy, lastActivityDate, lastActivityType, lastModifiedBy, lastModifiedDate, name, sourceID, thumbnailPath, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMDocument {\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    folderID: ").append(toIndentedString(folderID)).append("\n");
    sb.append("    folderPath: ").append(toIndentedString(folderPath)).append("\n");
    sb.append("    hasThumbnail: ").append(toIndentedString(hasThumbnail)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    lastActivityBy: ").append(toIndentedString(lastActivityBy)).append("\n");
    sb.append("    lastActivityDate: ").append(toIndentedString(lastActivityDate)).append("\n");
    sb.append("    lastActivityType: ").append(toIndentedString(lastActivityType)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceID: ").append(toIndentedString(sourceID)).append("\n");
    sb.append("    thumbnailPath: ").append(toIndentedString(thumbnailPath)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedBy");
    openapiFields.add("CreatedDate");
    openapiFields.add("Description");
    openapiFields.add("FolderID");
    openapiFields.add("FolderPath");
    openapiFields.add("HasThumbnail");
    openapiFields.add("ID");
    openapiFields.add("LastActivityBy");
    openapiFields.add("LastActivityDate");
    openapiFields.add("LastActivityType");
    openapiFields.add("LastModifiedBy");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("Name");
    openapiFields.add("SourceID");
    openapiFields.add("ThumbnailPath");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMDocument
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMDocument is not found in the empty JSON string", EMDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CreatedBy`
      if (jsonObj.get("CreatedBy") != null && !jsonObj.get("CreatedBy").isJsonNull()) {
        DMUser.validateJsonElement(jsonObj.get("CreatedBy"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("FolderPath") != null && !jsonObj.get("FolderPath").isJsonNull()) && !jsonObj.get("FolderPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FolderPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FolderPath").toString()));
      }
      // validate the optional field `LastActivityBy`
      if (jsonObj.get("LastActivityBy") != null && !jsonObj.get("LastActivityBy").isJsonNull()) {
        DMUser.validateJsonElement(jsonObj.get("LastActivityBy"));
      }
      // validate the optional field `LastActivityType`
      if (jsonObj.get("LastActivityType") != null && !jsonObj.get("LastActivityType").isJsonNull()) {
        EMDocumentActivityType.validateJsonElement(jsonObj.get("LastActivityType"));
      }
      // validate the optional field `LastModifiedBy`
      if (jsonObj.get("LastModifiedBy") != null && !jsonObj.get("LastModifiedBy").isJsonNull()) {
        DMUser.validateJsonElement(jsonObj.get("LastModifiedBy"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ThumbnailPath") != null && !jsonObj.get("ThumbnailPath").isJsonNull()) && !jsonObj.get("ThumbnailPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbnailPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThumbnailPath").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        EMDocumentType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<EMDocument>() {
           @Override
           public void write(JsonWriter out, EMDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMDocument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMDocument
  * @throws IOException if the JSON string is invalid with respect to EMDocument
  */
  public static EMDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMDocument.class);
  }

 /**
  * Convert an instance of EMDocument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

