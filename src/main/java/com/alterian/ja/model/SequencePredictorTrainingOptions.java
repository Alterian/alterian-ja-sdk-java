/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class SequencePredictorTrainingOptions {
  public static final String SERIALIZED_NAME_MODEL_NAME = "ModelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_TRAINING_RATIO = "TrainingRatio";
  @SerializedName(SERIALIZED_NAME_TRAINING_RATIO)
  private Double trainingRatio;

  public static final String SERIALIZED_NAME_ENCODING_PAD_MODE = "EncodingPadMode";
  @SerializedName(SERIALIZED_NAME_ENCODING_PAD_MODE)
  private Integer encodingPadMode;

  public static final String SERIALIZED_NAME_RANDOM_SEED = "RandomSeed";
  @SerializedName(SERIALIZED_NAME_RANDOM_SEED)
  private Integer randomSeed;

  public static final String SERIALIZED_NAME_EMBEDDING_LAYER_SIZE = "EmbeddingLayerSize";
  @SerializedName(SERIALIZED_NAME_EMBEDDING_LAYER_SIZE)
  private Integer embeddingLayerSize;

  public static final String SERIALIZED_NAME_LSTM_LAYER_SIZE = "LstmLayerSize";
  @SerializedName(SERIALIZED_NAME_LSTM_LAYER_SIZE)
  private Integer lstmLayerSize;

  public static final String SERIALIZED_NAME_NUMBER_OF_EPOCHS = "NumberOfEpochs";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EPOCHS)
  private Integer numberOfEpochs;

  public static final String SERIALIZED_NAME_BATCH_SIZE = "BatchSize";
  @SerializedName(SERIALIZED_NAME_BATCH_SIZE)
  private Integer batchSize;

  public static final String SERIALIZED_NAME_CATEGORICAL_FEATURES = "CategoricalFeatures";
  @SerializedName(SERIALIZED_NAME_CATEGORICAL_FEATURES)
  private List<String> categoricalFeatures;

  public static final String SERIALIZED_NAME_IS_DATA_DEBUG_REQUIRED = "IsDataDebugRequired";
  @SerializedName(SERIALIZED_NAME_IS_DATA_DEBUG_REQUIRED)
  private Boolean isDataDebugRequired;

  public static final String SERIALIZED_NAME_IS_COMBINE_CATEGORIES_REQUIRED = "IsCombineCategoriesRequired";
  @SerializedName(SERIALIZED_NAME_IS_COMBINE_CATEGORIES_REQUIRED)
  private Boolean isCombineCategoriesRequired;

  public SequencePredictorTrainingOptions() {
  }

  public SequencePredictorTrainingOptions modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

   /**
   * Name for the generated model
   * @return modelName
  **/
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public SequencePredictorTrainingOptions trainingRatio(Double trainingRatio) {
    this.trainingRatio = trainingRatio;
    return this;
  }

   /**
   * Percentage ratio of training examples to test examples
   * @return trainingRatio
  **/
  @javax.annotation.Nullable
  public Double getTrainingRatio() {
    return trainingRatio;
  }

  public void setTrainingRatio(Double trainingRatio) {
    this.trainingRatio = trainingRatio;
  }


  public SequencePredictorTrainingOptions encodingPadMode(Integer encodingPadMode) {
    this.encodingPadMode = encodingPadMode;
    return this;
  }

   /**
   * For shorter sequences, choose whether to pad with nulls on the left or right             1&#x3D;left padding,2&#x3D;right padding
   * @return encodingPadMode
  **/
  @javax.annotation.Nullable
  public Integer getEncodingPadMode() {
    return encodingPadMode;
  }

  public void setEncodingPadMode(Integer encodingPadMode) {
    this.encodingPadMode = encodingPadMode;
  }


  public SequencePredictorTrainingOptions randomSeed(Integer randomSeed) {
    this.randomSeed = randomSeed;
    return this;
  }

   /**
   * Specify a random seed to initialise the random number generator with
   * @return randomSeed
  **/
  @javax.annotation.Nullable
  public Integer getRandomSeed() {
    return randomSeed;
  }

  public void setRandomSeed(Integer randomSeed) {
    this.randomSeed = randomSeed;
  }


  public SequencePredictorTrainingOptions embeddingLayerSize(Integer embeddingLayerSize) {
    this.embeddingLayerSize = embeddingLayerSize;
    return this;
  }

   /**
   * Defines the number of output nodes the embedding layer has - defaults to dictionary size (number of distinct event names + 2)
   * @return embeddingLayerSize
  **/
  @javax.annotation.Nullable
  public Integer getEmbeddingLayerSize() {
    return embeddingLayerSize;
  }

  public void setEmbeddingLayerSize(Integer embeddingLayerSize) {
    this.embeddingLayerSize = embeddingLayerSize;
  }


  public SequencePredictorTrainingOptions lstmLayerSize(Integer lstmLayerSize) {
    this.lstmLayerSize = lstmLayerSize;
    return this;
  }

   /**
   * Defines the number of units used in the LSTM layer (long short term memory)
   * @return lstmLayerSize
  **/
  @javax.annotation.Nullable
  public Integer getLstmLayerSize() {
    return lstmLayerSize;
  }

  public void setLstmLayerSize(Integer lstmLayerSize) {
    this.lstmLayerSize = lstmLayerSize;
  }


  public SequencePredictorTrainingOptions numberOfEpochs(Integer numberOfEpochs) {
    this.numberOfEpochs = numberOfEpochs;
    return this;
  }

   /**
   * Number of epochs that training will attempt (an epoch is an iteration of all training samples through the training process)
   * @return numberOfEpochs
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfEpochs() {
    return numberOfEpochs;
  }

  public void setNumberOfEpochs(Integer numberOfEpochs) {
    this.numberOfEpochs = numberOfEpochs;
  }


  public SequencePredictorTrainingOptions batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

   /**
   * Number of training samples to include in a single model update                          The batch size influences the performance of training at the expense of accuracy. A lower batch size may produce a more accurate model, but will training more slowly, a large batch size has the opposite affect
   * @return batchSize
  **/
  @javax.annotation.Nullable
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }


  public SequencePredictorTrainingOptions categoricalFeatures(List<String> categoricalFeatures) {
    this.categoricalFeatures = categoricalFeatures;
    return this;
  }

  public SequencePredictorTrainingOptions addCategoricalFeaturesItem(String categoricalFeaturesItem) {
    if (this.categoricalFeatures == null) {
      this.categoricalFeatures = new ArrayList<>();
    }
    this.categoricalFeatures.add(categoricalFeaturesItem);
    return this;
  }

   /**
   * Column names of any additional categorical features on the event stream table that are to be used in training e.g. Initiative (Location is implied)
   * @return categoricalFeatures
  **/
  @javax.annotation.Nullable
  public List<String> getCategoricalFeatures() {
    return categoricalFeatures;
  }

  public void setCategoricalFeatures(List<String> categoricalFeatures) {
    this.categoricalFeatures = categoricalFeatures;
  }


  public SequencePredictorTrainingOptions isDataDebugRequired(Boolean isDataDebugRequired) {
    this.isDataDebugRequired = isDataDebugRequired;
    return this;
  }

   /**
   * Turn this on to leave intermediate tables in place for the purposes of debugging a model
   * @return isDataDebugRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsDataDebugRequired() {
    return isDataDebugRequired;
  }

  public void setIsDataDebugRequired(Boolean isDataDebugRequired) {
    this.isDataDebugRequired = isDataDebugRequired;
  }


  public SequencePredictorTrainingOptions isCombineCategoriesRequired(Boolean isCombineCategoriesRequired) {
    this.isCombineCategoriesRequired = isCombineCategoriesRequired;
    return this;
  }

   /**
   * Turn this on to combine categorical features into a single composite state and avoid generating mutually exclusive combinations
   * @return isCombineCategoriesRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsCombineCategoriesRequired() {
    return isCombineCategoriesRequired;
  }

  public void setIsCombineCategoriesRequired(Boolean isCombineCategoriesRequired) {
    this.isCombineCategoriesRequired = isCombineCategoriesRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SequencePredictorTrainingOptions sequencePredictorTrainingOptions = (SequencePredictorTrainingOptions) o;
    return Objects.equals(this.modelName, sequencePredictorTrainingOptions.modelName) &&
        Objects.equals(this.trainingRatio, sequencePredictorTrainingOptions.trainingRatio) &&
        Objects.equals(this.encodingPadMode, sequencePredictorTrainingOptions.encodingPadMode) &&
        Objects.equals(this.randomSeed, sequencePredictorTrainingOptions.randomSeed) &&
        Objects.equals(this.embeddingLayerSize, sequencePredictorTrainingOptions.embeddingLayerSize) &&
        Objects.equals(this.lstmLayerSize, sequencePredictorTrainingOptions.lstmLayerSize) &&
        Objects.equals(this.numberOfEpochs, sequencePredictorTrainingOptions.numberOfEpochs) &&
        Objects.equals(this.batchSize, sequencePredictorTrainingOptions.batchSize) &&
        Objects.equals(this.categoricalFeatures, sequencePredictorTrainingOptions.categoricalFeatures) &&
        Objects.equals(this.isDataDebugRequired, sequencePredictorTrainingOptions.isDataDebugRequired) &&
        Objects.equals(this.isCombineCategoriesRequired, sequencePredictorTrainingOptions.isCombineCategoriesRequired);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelName, trainingRatio, encodingPadMode, randomSeed, embeddingLayerSize, lstmLayerSize, numberOfEpochs, batchSize, categoricalFeatures, isDataDebugRequired, isCombineCategoriesRequired);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SequencePredictorTrainingOptions {\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    trainingRatio: ").append(toIndentedString(trainingRatio)).append("\n");
    sb.append("    encodingPadMode: ").append(toIndentedString(encodingPadMode)).append("\n");
    sb.append("    randomSeed: ").append(toIndentedString(randomSeed)).append("\n");
    sb.append("    embeddingLayerSize: ").append(toIndentedString(embeddingLayerSize)).append("\n");
    sb.append("    lstmLayerSize: ").append(toIndentedString(lstmLayerSize)).append("\n");
    sb.append("    numberOfEpochs: ").append(toIndentedString(numberOfEpochs)).append("\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    categoricalFeatures: ").append(toIndentedString(categoricalFeatures)).append("\n");
    sb.append("    isDataDebugRequired: ").append(toIndentedString(isDataDebugRequired)).append("\n");
    sb.append("    isCombineCategoriesRequired: ").append(toIndentedString(isCombineCategoriesRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ModelName");
    openapiFields.add("TrainingRatio");
    openapiFields.add("EncodingPadMode");
    openapiFields.add("RandomSeed");
    openapiFields.add("EmbeddingLayerSize");
    openapiFields.add("LstmLayerSize");
    openapiFields.add("NumberOfEpochs");
    openapiFields.add("BatchSize");
    openapiFields.add("CategoricalFeatures");
    openapiFields.add("IsDataDebugRequired");
    openapiFields.add("IsCombineCategoriesRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SequencePredictorTrainingOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SequencePredictorTrainingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SequencePredictorTrainingOptions is not found in the empty JSON string", SequencePredictorTrainingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SequencePredictorTrainingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SequencePredictorTrainingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ModelName") != null && !jsonObj.get("ModelName").isJsonNull()) && !jsonObj.get("ModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoricalFeatures") != null && !jsonObj.get("CategoricalFeatures").isJsonNull() && !jsonObj.get("CategoricalFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoricalFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("CategoricalFeatures").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SequencePredictorTrainingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SequencePredictorTrainingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SequencePredictorTrainingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SequencePredictorTrainingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<SequencePredictorTrainingOptions>() {
           @Override
           public void write(JsonWriter out, SequencePredictorTrainingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SequencePredictorTrainingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SequencePredictorTrainingOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SequencePredictorTrainingOptions
  * @throws IOException if the JSON string is invalid with respect to SequencePredictorTrainingOptions
  */
  public static SequencePredictorTrainingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SequencePredictorTrainingOptions.class);
  }

 /**
  * Convert an instance of SequencePredictorTrainingOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

