/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.EventStreamField;
import com.alterian.ja.model.EventStreamKey;
import com.alterian.ja.model.EventStreamModel;
import com.alterian.ja.model.Pattern;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EventStream {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "DataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private Integer dataSourceId;

  public static final String SERIALIZED_NAME_TABLE = "Table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_NUM_ROWS = "NumRows";
  @SerializedName(SERIALIZED_NAME_NUM_ROWS)
  private Long numRows;

  public static final String SERIALIZED_NAME_IS_F_I_F_O = "IsFIFO";
  @SerializedName(SERIALIZED_NAME_IS_F_I_F_O)
  private Boolean isFIFO;

  public static final String SERIALIZED_NAME_KEYS = "Keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List<EventStreamKey> keys;

  public static final String SERIALIZED_NAME_MODELS = "Models";
  @SerializedName(SERIALIZED_NAME_MODELS)
  private List<EventStreamModel> models;

  public static final String SERIALIZED_NAME_DD_E_QUEUE_NAME = "DDEQueueName";
  @SerializedName(SERIALIZED_NAME_DD_E_QUEUE_NAME)
  private String ddEQueueName;

  public static final String SERIALIZED_NAME_DD_E_SITE_ID = "DDESiteId";
  @SerializedName(SERIALIZED_NAME_DD_E_SITE_ID)
  private Integer ddESiteId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_QUEUE_LOCK_ID = "QueueLockId";
  @SerializedName(SERIALIZED_NAME_QUEUE_LOCK_ID)
  private UUID queueLockId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DD_E_CLIENT = "DDEClient";
  @SerializedName(SERIALIZED_NAME_DD_E_CLIENT)
  private String ddEClient;

  public static final String SERIALIZED_NAME_DD_E_TARGET = "DDETarget";
  @SerializedName(SERIALIZED_NAME_DD_E_TARGET)
  private String ddETarget;

  public static final String SERIALIZED_NAME_FIELDS = "Fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<EventStreamField> fields;

  public static final String SERIALIZED_NAME_PATTERNS = "Patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  private List<Pattern> patterns;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_QUEUE_U_R_L = "QueueURL";
  @SerializedName(SERIALIZED_NAME_QUEUE_U_R_L)
  private String queueURL;

  public EventStream() {
  }

  public EventStream id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EventStream groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * 
   * @return groupId
  **/
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public EventStream name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventStream dataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

   /**
   * 
   * @return dataSourceId
  **/
  @javax.annotation.Nullable
  public Integer getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public EventStream table(String table) {
    this.table = table;
    return this;
  }

   /**
   * Returns back the full name of the table which stored the event stream information (includes the database name)
   * @return table
  **/
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public EventStream numRows(Long numRows) {
    this.numRows = numRows;
    return this;
  }

   /**
   * 
   * @return numRows
  **/
  @javax.annotation.Nullable
  public Long getNumRows() {
    return numRows;
  }

  public void setNumRows(Long numRows) {
    this.numRows = numRows;
  }


  public EventStream isFIFO(Boolean isFIFO) {
    this.isFIFO = isFIFO;
    return this;
  }

   /**
   * 
   * @return isFIFO
  **/
  @javax.annotation.Nullable
  public Boolean getIsFIFO() {
    return isFIFO;
  }

  public void setIsFIFO(Boolean isFIFO) {
    this.isFIFO = isFIFO;
  }


  public EventStream keys(List<EventStreamKey> keys) {
    this.keys = keys;
    return this;
  }

  public EventStream addKeysItem(EventStreamKey keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

   /**
   * 
   * @return keys
  **/
  @javax.annotation.Nullable
  public List<EventStreamKey> getKeys() {
    return keys;
  }

  public void setKeys(List<EventStreamKey> keys) {
    this.keys = keys;
  }


  public EventStream models(List<EventStreamModel> models) {
    this.models = models;
    return this;
  }

  public EventStream addModelsItem(EventStreamModel modelsItem) {
    if (this.models == null) {
      this.models = new ArrayList<>();
    }
    this.models.add(modelsItem);
    return this;
  }

   /**
   * 
   * @return models
  **/
  @javax.annotation.Nullable
  public List<EventStreamModel> getModels() {
    return models;
  }

  public void setModels(List<EventStreamModel> models) {
    this.models = models;
  }


  public EventStream ddEQueueName(String ddEQueueName) {
    this.ddEQueueName = ddEQueueName;
    return this;
  }

   /**
   * 
   * @return ddEQueueName
  **/
  @javax.annotation.Nullable
  public String getDdEQueueName() {
    return ddEQueueName;
  }

  public void setDdEQueueName(String ddEQueueName) {
    this.ddEQueueName = ddEQueueName;
  }


  public EventStream ddESiteId(Integer ddESiteId) {
    this.ddESiteId = ddESiteId;
    return this;
  }

   /**
   * 
   * @return ddESiteId
  **/
  @javax.annotation.Nullable
  public Integer getDdESiteId() {
    return ddESiteId;
  }

  public void setDdESiteId(Integer ddESiteId) {
    this.ddESiteId = ddESiteId;
  }


  public EventStream creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * 
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public EventStream queueLockId(UUID queueLockId) {
    this.queueLockId = queueLockId;
    return this;
  }

   /**
   * 
   * @return queueLockId
  **/
  @javax.annotation.Nullable
  public UUID getQueueLockId() {
    return queueLockId;
  }

  public void setQueueLockId(UUID queueLockId) {
    this.queueLockId = queueLockId;
  }


  public EventStream databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

   /**
   * 
   * @return databaseName
  **/
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public EventStream ddEClient(String ddEClient) {
    this.ddEClient = ddEClient;
    return this;
  }

   /**
   * 
   * @return ddEClient
  **/
  @javax.annotation.Nullable
  public String getDdEClient() {
    return ddEClient;
  }

  public void setDdEClient(String ddEClient) {
    this.ddEClient = ddEClient;
  }


  public EventStream ddETarget(String ddETarget) {
    this.ddETarget = ddETarget;
    return this;
  }

   /**
   * 
   * @return ddETarget
  **/
  @javax.annotation.Nullable
  public String getDdETarget() {
    return ddETarget;
  }

  public void setDdETarget(String ddETarget) {
    this.ddETarget = ddETarget;
  }


  public EventStream fields(List<EventStreamField> fields) {
    this.fields = fields;
    return this;
  }

  public EventStream addFieldsItem(EventStreamField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * 
   * @return fields
  **/
  @javax.annotation.Nullable
  public List<EventStreamField> getFields() {
    return fields;
  }

  public void setFields(List<EventStreamField> fields) {
    this.fields = fields;
  }


  public EventStream patterns(List<Pattern> patterns) {
    this.patterns = patterns;
    return this;
  }

  public EventStream addPatternsItem(Pattern patternsItem) {
    if (this.patterns == null) {
      this.patterns = new ArrayList<>();
    }
    this.patterns.add(patternsItem);
    return this;
  }

   /**
   * 
   * @return patterns
  **/
  @javax.annotation.Nullable
  public List<Pattern> getPatterns() {
    return patterns;
  }

  public void setPatterns(List<Pattern> patterns) {
    this.patterns = patterns;
  }


  public EventStream status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Quick status on the stream.  Currently 0 &#x3D; created, -1 means there is a problem and 1 means the stream is pulling data
   * @return status
  **/
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public EventStream queueURL(String queueURL) {
    this.queueURL = queueURL;
    return this;
  }

   /**
   * URL for the queue, based upon your DDE instance details
   * @return queueURL
  **/
  @javax.annotation.Nullable
  public String getQueueURL() {
    return queueURL;
  }

  public void setQueueURL(String queueURL) {
    this.queueURL = queueURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStream eventStream = (EventStream) o;
    return Objects.equals(this.id, eventStream.id) &&
        Objects.equals(this.groupId, eventStream.groupId) &&
        Objects.equals(this.name, eventStream.name) &&
        Objects.equals(this.dataSourceId, eventStream.dataSourceId) &&
        Objects.equals(this.table, eventStream.table) &&
        Objects.equals(this.numRows, eventStream.numRows) &&
        Objects.equals(this.isFIFO, eventStream.isFIFO) &&
        Objects.equals(this.keys, eventStream.keys) &&
        Objects.equals(this.models, eventStream.models) &&
        Objects.equals(this.ddEQueueName, eventStream.ddEQueueName) &&
        Objects.equals(this.ddESiteId, eventStream.ddESiteId) &&
        Objects.equals(this.creationDate, eventStream.creationDate) &&
        Objects.equals(this.queueLockId, eventStream.queueLockId) &&
        Objects.equals(this.databaseName, eventStream.databaseName) &&
        Objects.equals(this.ddEClient, eventStream.ddEClient) &&
        Objects.equals(this.ddETarget, eventStream.ddETarget) &&
        Objects.equals(this.fields, eventStream.fields) &&
        Objects.equals(this.patterns, eventStream.patterns) &&
        Objects.equals(this.status, eventStream.status) &&
        Objects.equals(this.queueURL, eventStream.queueURL);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, groupId, name, dataSourceId, table, numRows, isFIFO, keys, models, ddEQueueName, ddESiteId, creationDate, queueLockId, databaseName, ddEClient, ddETarget, fields, patterns, status, queueURL);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStream {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    numRows: ").append(toIndentedString(numRows)).append("\n");
    sb.append("    isFIFO: ").append(toIndentedString(isFIFO)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    models: ").append(toIndentedString(models)).append("\n");
    sb.append("    ddEQueueName: ").append(toIndentedString(ddEQueueName)).append("\n");
    sb.append("    ddESiteId: ").append(toIndentedString(ddESiteId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    queueLockId: ").append(toIndentedString(queueLockId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    ddEClient: ").append(toIndentedString(ddEClient)).append("\n");
    sb.append("    ddETarget: ").append(toIndentedString(ddETarget)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    queueURL: ").append(toIndentedString(queueURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("GroupId");
    openapiFields.add("Name");
    openapiFields.add("DataSourceId");
    openapiFields.add("Table");
    openapiFields.add("NumRows");
    openapiFields.add("IsFIFO");
    openapiFields.add("Keys");
    openapiFields.add("Models");
    openapiFields.add("DDEQueueName");
    openapiFields.add("DDESiteId");
    openapiFields.add("CreationDate");
    openapiFields.add("QueueLockId");
    openapiFields.add("DatabaseName");
    openapiFields.add("DDEClient");
    openapiFields.add("DDETarget");
    openapiFields.add("Fields");
    openapiFields.add("Patterns");
    openapiFields.add("Status");
    openapiFields.add("QueueURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventStream
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStream is not found in the empty JSON string", EventStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Table") != null && !jsonObj.get("Table").isJsonNull()) && !jsonObj.get("Table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Table").toString()));
      }
      if (jsonObj.get("Keys") != null && !jsonObj.get("Keys").isJsonNull()) {
        JsonArray jsonArraykeys = jsonObj.getAsJsonArray("Keys");
        if (jsonArraykeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Keys` to be an array in the JSON string but got `%s`", jsonObj.get("Keys").toString()));
          }

          // validate the optional field `Keys` (array)
          for (int i = 0; i < jsonArraykeys.size(); i++) {
            EventStreamKey.validateJsonElement(jsonArraykeys.get(i));
          };
        }
      }
      if (jsonObj.get("Models") != null && !jsonObj.get("Models").isJsonNull()) {
        JsonArray jsonArraymodels = jsonObj.getAsJsonArray("Models");
        if (jsonArraymodels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Models").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Models` to be an array in the JSON string but got `%s`", jsonObj.get("Models").toString()));
          }

          // validate the optional field `Models` (array)
          for (int i = 0; i < jsonArraymodels.size(); i++) {
            EventStreamModel.validateJsonElement(jsonArraymodels.get(i));
          };
        }
      }
      if ((jsonObj.get("DDEQueueName") != null && !jsonObj.get("DDEQueueName").isJsonNull()) && !jsonObj.get("DDEQueueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DDEQueueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DDEQueueName").toString()));
      }
      if ((jsonObj.get("QueueLockId") != null && !jsonObj.get("QueueLockId").isJsonNull()) && !jsonObj.get("QueueLockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueueLockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueueLockId").toString()));
      }
      if ((jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) && !jsonObj.get("DatabaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DatabaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DatabaseName").toString()));
      }
      if ((jsonObj.get("DDEClient") != null && !jsonObj.get("DDEClient").isJsonNull()) && !jsonObj.get("DDEClient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DDEClient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DDEClient").toString()));
      }
      if ((jsonObj.get("DDETarget") != null && !jsonObj.get("DDETarget").isJsonNull()) && !jsonObj.get("DDETarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DDETarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DDETarget").toString()));
      }
      if (jsonObj.get("Fields") != null && !jsonObj.get("Fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("Fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Fields` to be an array in the JSON string but got `%s`", jsonObj.get("Fields").toString()));
          }

          // validate the optional field `Fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            EventStreamField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if (jsonObj.get("Patterns") != null && !jsonObj.get("Patterns").isJsonNull()) {
        JsonArray jsonArraypatterns = jsonObj.getAsJsonArray("Patterns");
        if (jsonArraypatterns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Patterns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Patterns` to be an array in the JSON string but got `%s`", jsonObj.get("Patterns").toString()));
          }

          // validate the optional field `Patterns` (array)
          for (int i = 0; i < jsonArraypatterns.size(); i++) {
            Pattern.validateJsonElement(jsonArraypatterns.get(i));
          };
        }
      }
      if ((jsonObj.get("QueueURL") != null && !jsonObj.get("QueueURL").isJsonNull()) && !jsonObj.get("QueueURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueueURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueueURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStream.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStream>() {
           @Override
           public void write(JsonWriter out, EventStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventStream given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventStream
  * @throws IOException if the JSON string is invalid with respect to EventStream
  */
  public static EventStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStream.class);
  }

 /**
  * Convert an instance of EventStream to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

