/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * AUTHUpdateLoginRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class AUTHUpdateLoginRequest {
  public static final String SERIALIZED_NAME_EXTERNAL_AUTHENTICATION = "ExternalAuthentication";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_AUTHENTICATION)
  private Boolean externalAuthentication;

  public static final String SERIALIZED_NAME_LOGIN_ID = "LoginId";
  @SerializedName(SERIALIZED_NAME_LOGIN_ID)
  private UUID loginId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEW_PASSWORD = "NewPassword";
  @SerializedName(SERIALIZED_NAME_NEW_PASSWORD)
  private String newPassword;

  public static final String SERIALIZED_NAME_SITE_ID = "SiteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public AUTHUpdateLoginRequest() {
  }

  public AUTHUpdateLoginRequest externalAuthentication(Boolean externalAuthentication) {
    this.externalAuthentication = externalAuthentication;
    return this;
  }

   /**
   * True if you want this login to use external authentication [NT, SAML]
   * @return externalAuthentication
  **/
  @javax.annotation.Nullable
  public Boolean getExternalAuthentication() {
    return externalAuthentication;
  }

  public void setExternalAuthentication(Boolean externalAuthentication) {
    this.externalAuthentication = externalAuthentication;
  }


  public AUTHUpdateLoginRequest loginId(UUID loginId) {
    this.loginId = loginId;
    return this;
  }

   /**
   * Id of the login
   * @return loginId
  **/
  @javax.annotation.Nullable
  public UUID getLoginId() {
    return loginId;
  }

  public void setLoginId(UUID loginId) {
    this.loginId = loginId;
  }


  public AUTHUpdateLoginRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Login name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AUTHUpdateLoginRequest newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

   /**
   * If you want to change the password, provide it here.  If ExternalAuth is true, this is ignored.  It must pass the password complexity rules.
   * @return newPassword
  **/
  @javax.annotation.Nullable
  public String getNewPassword() {
    return newPassword;
  }

  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public AUTHUpdateLoginRequest siteId(Integer siteId) {
    this.siteId = siteId;
    return this;
  }

   /**
   * Id of the CM Site (typically 1)
   * @return siteId
  **/
  @javax.annotation.Nullable
  public Integer getSiteId() {
    return siteId;
  }

  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public AUTHUpdateLoginRequest userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * User Id to associate with the login.  Pass NULL to disassociate the login with a user.
   * @return userId
  **/
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AUTHUpdateLoginRequest auTHUpdateLoginRequest = (AUTHUpdateLoginRequest) o;
    return Objects.equals(this.externalAuthentication, auTHUpdateLoginRequest.externalAuthentication) &&
        Objects.equals(this.loginId, auTHUpdateLoginRequest.loginId) &&
        Objects.equals(this.name, auTHUpdateLoginRequest.name) &&
        Objects.equals(this.newPassword, auTHUpdateLoginRequest.newPassword) &&
        Objects.equals(this.siteId, auTHUpdateLoginRequest.siteId) &&
        Objects.equals(this.userId, auTHUpdateLoginRequest.userId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalAuthentication, loginId, name, newPassword, siteId, userId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AUTHUpdateLoginRequest {\n");
    sb.append("    externalAuthentication: ").append(toIndentedString(externalAuthentication)).append("\n");
    sb.append("    loginId: ").append(toIndentedString(loginId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExternalAuthentication");
    openapiFields.add("LoginId");
    openapiFields.add("Name");
    openapiFields.add("NewPassword");
    openapiFields.add("SiteId");
    openapiFields.add("UserId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AUTHUpdateLoginRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AUTHUpdateLoginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AUTHUpdateLoginRequest is not found in the empty JSON string", AUTHUpdateLoginRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AUTHUpdateLoginRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AUTHUpdateLoginRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LoginId") != null && !jsonObj.get("LoginId").isJsonNull()) && !jsonObj.get("LoginId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoginId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoginId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NewPassword") != null && !jsonObj.get("NewPassword").isJsonNull()) && !jsonObj.get("NewPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewPassword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AUTHUpdateLoginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AUTHUpdateLoginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AUTHUpdateLoginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AUTHUpdateLoginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AUTHUpdateLoginRequest>() {
           @Override
           public void write(JsonWriter out, AUTHUpdateLoginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AUTHUpdateLoginRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AUTHUpdateLoginRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AUTHUpdateLoginRequest
  * @throws IOException if the JSON string is invalid with respect to AUTHUpdateLoginRequest
  */
  public static AUTHUpdateLoginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AUTHUpdateLoginRequest.class);
  }

 /**
  * Convert an instance of AUTHUpdateLoginRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

