/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class EventStreamModel {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_QUEUE_ID = "QueueId";
  @SerializedName(SERIALIZED_NAME_QUEUE_ID)
  private Integer queueId;

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "DatasourceId";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private Integer datasourceId;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STARTED = "Started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public static final String SERIALIZED_NAME_COMPLETED = "Completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private OffsetDateTime completed;

  public static final String SERIALIZED_NAME_TRAINING_OPTIONS = "TrainingOptions";
  @SerializedName(SERIALIZED_NAME_TRAINING_OPTIONS)
  private String trainingOptions;

  public static final String SERIALIZED_NAME_ENGINE_MODEL_NAME = "EngineModelName";
  @SerializedName(SERIALIZED_NAME_ENGINE_MODEL_NAME)
  private String engineModelName;

  public static final String SERIALIZED_NAME_ENGINE_MODEL_CONFIG = "EngineModelConfig";
  @SerializedName(SERIALIZED_NAME_ENGINE_MODEL_CONFIG)
  private String engineModelConfig;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEST_ACCURACY = "TestAccuracy";
  @SerializedName(SERIALIZED_NAME_TEST_ACCURACY)
  private Double testAccuracy;

  public static final String SERIALIZED_NAME_TESTL_LOSS = "TestlLoss";
  @SerializedName(SERIALIZED_NAME_TESTL_LOSS)
  private Double testlLoss;

  public EventStreamModel() {
  }

  public EventStreamModel id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EventStreamModel queueId(Integer queueId) {
    this.queueId = queueId;
    return this;
  }

   /**
   * 
   * @return queueId
  **/
  @javax.annotation.Nullable
  public Integer getQueueId() {
    return queueId;
  }

  public void setQueueId(Integer queueId) {
    this.queueId = queueId;
  }


  public EventStreamModel datasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

   /**
   * 
   * @return datasourceId
  **/
  @javax.annotation.Nullable
  public Integer getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
  }


  public EventStreamModel userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * 
   * @return userId
  **/
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public EventStreamModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventStreamModel started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

   /**
   * 
   * @return started
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public EventStreamModel completed(OffsetDateTime completed) {
    this.completed = completed;
    return this;
  }

   /**
   * 
   * @return completed
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCompleted() {
    return completed;
  }

  public void setCompleted(OffsetDateTime completed) {
    this.completed = completed;
  }


  public EventStreamModel trainingOptions(String trainingOptions) {
    this.trainingOptions = trainingOptions;
    return this;
  }

   /**
   * 
   * @return trainingOptions
  **/
  @javax.annotation.Nullable
  public String getTrainingOptions() {
    return trainingOptions;
  }

  public void setTrainingOptions(String trainingOptions) {
    this.trainingOptions = trainingOptions;
  }


  public EventStreamModel engineModelName(String engineModelName) {
    this.engineModelName = engineModelName;
    return this;
  }

   /**
   * 
   * @return engineModelName
  **/
  @javax.annotation.Nullable
  public String getEngineModelName() {
    return engineModelName;
  }

  public void setEngineModelName(String engineModelName) {
    this.engineModelName = engineModelName;
  }


  public EventStreamModel engineModelConfig(String engineModelConfig) {
    this.engineModelConfig = engineModelConfig;
    return this;
  }

   /**
   * 
   * @return engineModelConfig
  **/
  @javax.annotation.Nullable
  public String getEngineModelConfig() {
    return engineModelConfig;
  }

  public void setEngineModelConfig(String engineModelConfig) {
    this.engineModelConfig = engineModelConfig;
  }


  public EventStreamModel status(String status) {
    this.status = status;
    return this;
  }

   /**
   * 
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public EventStreamModel testAccuracy(Double testAccuracy) {
    this.testAccuracy = testAccuracy;
    return this;
  }

   /**
   * Final test accuracy stat
   * @return testAccuracy
  **/
  @javax.annotation.Nullable
  public Double getTestAccuracy() {
    return testAccuracy;
  }

  public void setTestAccuracy(Double testAccuracy) {
    this.testAccuracy = testAccuracy;
  }


  public EventStreamModel testlLoss(Double testlLoss) {
    this.testlLoss = testlLoss;
    return this;
  }

   /**
   * Final test loss stat
   * @return testlLoss
  **/
  @javax.annotation.Nullable
  public Double getTestlLoss() {
    return testlLoss;
  }

  public void setTestlLoss(Double testlLoss) {
    this.testlLoss = testlLoss;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStreamModel eventStreamModel = (EventStreamModel) o;
    return Objects.equals(this.id, eventStreamModel.id) &&
        Objects.equals(this.queueId, eventStreamModel.queueId) &&
        Objects.equals(this.datasourceId, eventStreamModel.datasourceId) &&
        Objects.equals(this.userId, eventStreamModel.userId) &&
        Objects.equals(this.name, eventStreamModel.name) &&
        Objects.equals(this.started, eventStreamModel.started) &&
        Objects.equals(this.completed, eventStreamModel.completed) &&
        Objects.equals(this.trainingOptions, eventStreamModel.trainingOptions) &&
        Objects.equals(this.engineModelName, eventStreamModel.engineModelName) &&
        Objects.equals(this.engineModelConfig, eventStreamModel.engineModelConfig) &&
        Objects.equals(this.status, eventStreamModel.status) &&
        Objects.equals(this.testAccuracy, eventStreamModel.testAccuracy) &&
        Objects.equals(this.testlLoss, eventStreamModel.testlLoss);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, queueId, datasourceId, userId, name, started, completed, trainingOptions, engineModelName, engineModelConfig, status, testAccuracy, testlLoss);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStreamModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    trainingOptions: ").append(toIndentedString(trainingOptions)).append("\n");
    sb.append("    engineModelName: ").append(toIndentedString(engineModelName)).append("\n");
    sb.append("    engineModelConfig: ").append(toIndentedString(engineModelConfig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    testAccuracy: ").append(toIndentedString(testAccuracy)).append("\n");
    sb.append("    testlLoss: ").append(toIndentedString(testlLoss)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("QueueId");
    openapiFields.add("DatasourceId");
    openapiFields.add("UserId");
    openapiFields.add("Name");
    openapiFields.add("Started");
    openapiFields.add("Completed");
    openapiFields.add("TrainingOptions");
    openapiFields.add("EngineModelName");
    openapiFields.add("EngineModelConfig");
    openapiFields.add("Status");
    openapiFields.add("TestAccuracy");
    openapiFields.add("TestlLoss");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventStreamModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStreamModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStreamModel is not found in the empty JSON string", EventStreamModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStreamModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStreamModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("TrainingOptions") != null && !jsonObj.get("TrainingOptions").isJsonNull()) && !jsonObj.get("TrainingOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrainingOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrainingOptions").toString()));
      }
      if ((jsonObj.get("EngineModelName") != null && !jsonObj.get("EngineModelName").isJsonNull()) && !jsonObj.get("EngineModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EngineModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EngineModelName").toString()));
      }
      if ((jsonObj.get("EngineModelConfig") != null && !jsonObj.get("EngineModelConfig").isJsonNull()) && !jsonObj.get("EngineModelConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EngineModelConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EngineModelConfig").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStreamModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStreamModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStreamModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStreamModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStreamModel>() {
           @Override
           public void write(JsonWriter out, EventStreamModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStreamModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventStreamModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventStreamModel
  * @throws IOException if the JSON string is invalid with respect to EventStreamModel
  */
  public static EventStreamModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStreamModel.class);
  }

 /**
  * Convert an instance of EventStreamModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

