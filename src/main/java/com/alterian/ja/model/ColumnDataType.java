/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Metadata about the type of data stored in the column. Used by the UI to properly format the values (e.g. Decimal point, Thousands Separataor, Currenc Symbol) based on configured culture settings
 */
@JsonAdapter(ColumnDataType.Adapter.class)
public enum ColumnDataType {
  
  /**
   * No data type metadata available
   */
  None(0),
  
  /**
   * The data in the column constitutes Percentages
   */
  Percentage(1),
  
  /**
   * The data in the column constitutes Currency values
   */
  Currency(2),
  
  NUMBER_unknown_default_open_api(11184809);

  private Integer value;

  ColumnDataType(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ColumnDataType fromValue(Integer value) {
    for (ColumnDataType b : ColumnDataType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return NUMBER_unknown_default_open_api;
  }

  public static class Adapter extends TypeAdapter<ColumnDataType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ColumnDataType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ColumnDataType read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return ColumnDataType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    ColumnDataType.fromValue(value);
  }
}

