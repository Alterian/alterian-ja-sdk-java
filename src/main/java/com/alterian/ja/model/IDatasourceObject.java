/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DatasourceAttribute;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class IDatasourceObject {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_EX = "NameEx";
  @SerializedName(SERIALIZED_NAME_NAME_EX)
  private String nameEx;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_VISIBLE = "Visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_ACCESS_VIEW = "AccessView";
  @SerializedName(SERIALIZED_NAME_ACCESS_VIEW)
  private Boolean accessView;

  public static final String SERIALIZED_NAME_ACCESS_MODIFY = "AccessModify";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODIFY)
  private Boolean accessModify;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<DatasourceAttribute> attributes;

  public static final String SERIALIZED_NAME_FULL_NATIVE_NAME = "FullNativeName";
  @SerializedName(SERIALIZED_NAME_FULL_NATIVE_NAME)
  private String fullNativeName;

  public IDatasourceObject() {
  }

  public IDatasourceObject ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Unique ID of the datasource
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public IDatasourceObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the datasource [must be unique]
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IDatasourceObject nameEx(String nameEx) {
    this.nameEx = nameEx;
    return this;
  }

   /**
   * NameEX
   * @return nameEx
  **/
  @javax.annotation.Nullable
  public String getNameEx() {
    return nameEx;
  }

  public void setNameEx(String nameEx) {
    this.nameEx = nameEx;
  }


  public IDatasourceObject enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether or not this datasource is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public IDatasourceObject visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Whether or not this datasource is visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public IDatasourceObject accessView(Boolean accessView) {
    this.accessView = accessView;
    return this;
  }

   /**
   * Can the user view this datasource
   * @return accessView
  **/
  @javax.annotation.Nullable
  public Boolean getAccessView() {
    return accessView;
  }

  public void setAccessView(Boolean accessView) {
    this.accessView = accessView;
  }


  public IDatasourceObject accessModify(Boolean accessModify) {
    this.accessModify = accessModify;
    return this;
  }

   /**
   * Not currently used
   * @return accessModify
  **/
  @javax.annotation.Nullable
  public Boolean getAccessModify() {
    return accessModify;
  }

  public void setAccessModify(Boolean accessModify) {
    this.accessModify = accessModify;
  }


  public IDatasourceObject attributes(List<DatasourceAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public IDatasourceObject addAttributesItem(DatasourceAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Attributes for this datasource.  @see(DatasourceAttribute)
   * @return attributes
  **/
  @javax.annotation.Nullable
  public List<DatasourceAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<DatasourceAttribute> attributes) {
    this.attributes = attributes;
  }


  public IDatasourceObject fullNativeName(String fullNativeName) {
    this.fullNativeName = fullNativeName;
    return this;
  }

   /**
   * The entire native name of this item -- usually includes database and table
   * @return fullNativeName
  **/
  @javax.annotation.Nullable
  public String getFullNativeName() {
    return fullNativeName;
  }

  public void setFullNativeName(String fullNativeName) {
    this.fullNativeName = fullNativeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IDatasourceObject idatasourceObject = (IDatasourceObject) o;
    return Objects.equals(this.ID, idatasourceObject.ID) &&
        Objects.equals(this.name, idatasourceObject.name) &&
        Objects.equals(this.nameEx, idatasourceObject.nameEx) &&
        Objects.equals(this.enabled, idatasourceObject.enabled) &&
        Objects.equals(this.visible, idatasourceObject.visible) &&
        Objects.equals(this.accessView, idatasourceObject.accessView) &&
        Objects.equals(this.accessModify, idatasourceObject.accessModify) &&
        Objects.equals(this.attributes, idatasourceObject.attributes) &&
        Objects.equals(this.fullNativeName, idatasourceObject.fullNativeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, nameEx, enabled, visible, accessView, accessModify, attributes, fullNativeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IDatasourceObject {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameEx: ").append(toIndentedString(nameEx)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    accessView: ").append(toIndentedString(accessView)).append("\n");
    sb.append("    accessModify: ").append(toIndentedString(accessModify)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    fullNativeName: ").append(toIndentedString(fullNativeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("NameEx");
    openapiFields.add("Enabled");
    openapiFields.add("Visible");
    openapiFields.add("AccessView");
    openapiFields.add("AccessModify");
    openapiFields.add("Attributes");
    openapiFields.add("FullNativeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IDatasourceObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IDatasourceObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IDatasourceObject is not found in the empty JSON string", IDatasourceObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IDatasourceObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IDatasourceObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NameEx") != null && !jsonObj.get("NameEx").isJsonNull()) && !jsonObj.get("NameEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NameEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NameEx").toString()));
      }
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("Attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be an array in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
          }

          // validate the optional field `Attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            DatasourceAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("FullNativeName") != null && !jsonObj.get("FullNativeName").isJsonNull()) && !jsonObj.get("FullNativeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullNativeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullNativeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IDatasourceObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IDatasourceObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IDatasourceObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IDatasourceObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IDatasourceObject>() {
           @Override
           public void write(JsonWriter out, IDatasourceObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IDatasourceObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IDatasourceObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IDatasourceObject
  * @throws IOException if the JSON string is invalid with respect to IDatasourceObject
  */
  public static IDatasourceObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IDatasourceObject.class);
  }

 /**
  * Convert an instance of IDatasourceObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

