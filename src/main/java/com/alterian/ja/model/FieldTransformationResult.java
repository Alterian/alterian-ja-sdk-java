/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DiscreteValueData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class FieldTransformationResult {
  public static final String SERIALIZED_NAME_TRANSFORMATION_COUNTS = "TransformationCounts";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION_COUNTS)
  private List<Long> transformationCounts;

  public static final String SERIALIZED_NAME_SOURCE_VALUES = "SourceValues";
  @SerializedName(SERIALIZED_NAME_SOURCE_VALUES)
  private DiscreteValueData sourceValues;

  public static final String SERIALIZED_NAME_TRANSFORMED_VALUES = "TransformedValues";
  @SerializedName(SERIALIZED_NAME_TRANSFORMED_VALUES)
  private DiscreteValueData transformedValues;

  public FieldTransformationResult() {
  }

  public FieldTransformationResult transformationCounts(List<Long> transformationCounts) {
    this.transformationCounts = transformationCounts;
    return this;
  }

  public FieldTransformationResult addTransformationCountsItem(Long transformationCountsItem) {
    if (this.transformationCounts == null) {
      this.transformationCounts = new ArrayList<>();
    }
    this.transformationCounts.add(transformationCountsItem);
    return this;
  }

   /**
   * 
   * @return transformationCounts
  **/
  @javax.annotation.Nullable
  public List<Long> getTransformationCounts() {
    return transformationCounts;
  }

  public void setTransformationCounts(List<Long> transformationCounts) {
    this.transformationCounts = transformationCounts;
  }


  public FieldTransformationResult sourceValues(DiscreteValueData sourceValues) {
    this.sourceValues = sourceValues;
    return this;
  }

   /**
   * Get sourceValues
   * @return sourceValues
  **/
  @javax.annotation.Nullable
  public DiscreteValueData getSourceValues() {
    return sourceValues;
  }

  public void setSourceValues(DiscreteValueData sourceValues) {
    this.sourceValues = sourceValues;
  }


  public FieldTransformationResult transformedValues(DiscreteValueData transformedValues) {
    this.transformedValues = transformedValues;
    return this;
  }

   /**
   * Get transformedValues
   * @return transformedValues
  **/
  @javax.annotation.Nullable
  public DiscreteValueData getTransformedValues() {
    return transformedValues;
  }

  public void setTransformedValues(DiscreteValueData transformedValues) {
    this.transformedValues = transformedValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldTransformationResult fieldTransformationResult = (FieldTransformationResult) o;
    return Objects.equals(this.transformationCounts, fieldTransformationResult.transformationCounts) &&
        Objects.equals(this.sourceValues, fieldTransformationResult.sourceValues) &&
        Objects.equals(this.transformedValues, fieldTransformationResult.transformedValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transformationCounts, sourceValues, transformedValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldTransformationResult {\n");
    sb.append("    transformationCounts: ").append(toIndentedString(transformationCounts)).append("\n");
    sb.append("    sourceValues: ").append(toIndentedString(sourceValues)).append("\n");
    sb.append("    transformedValues: ").append(toIndentedString(transformedValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TransformationCounts");
    openapiFields.add("SourceValues");
    openapiFields.add("TransformedValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FieldTransformationResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldTransformationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldTransformationResult is not found in the empty JSON string", FieldTransformationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldTransformationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldTransformationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("TransformationCounts") != null && !jsonObj.get("TransformationCounts").isJsonNull() && !jsonObj.get("TransformationCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransformationCounts` to be an array in the JSON string but got `%s`", jsonObj.get("TransformationCounts").toString()));
      }
      // validate the optional field `SourceValues`
      if (jsonObj.get("SourceValues") != null && !jsonObj.get("SourceValues").isJsonNull()) {
        DiscreteValueData.validateJsonElement(jsonObj.get("SourceValues"));
      }
      // validate the optional field `TransformedValues`
      if (jsonObj.get("TransformedValues") != null && !jsonObj.get("TransformedValues").isJsonNull()) {
        DiscreteValueData.validateJsonElement(jsonObj.get("TransformedValues"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldTransformationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldTransformationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldTransformationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldTransformationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldTransformationResult>() {
           @Override
           public void write(JsonWriter out, FieldTransformationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldTransformationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FieldTransformationResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FieldTransformationResult
  * @throws IOException if the JSON string is invalid with respect to FieldTransformationResult
  */
  public static FieldTransformationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldTransformationResult.class);
  }

 /**
  * Convert an instance of FieldTransformationResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

