/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.Rule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * Definition of a initiative
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Initiative {
  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BUSINESS_GOAL_I_D = "BusinessGoalID";
  @SerializedName(SERIALIZED_NAME_BUSINESS_GOAL_I_D)
  private Integer businessGoalID;

  public static final String SERIALIZED_NAME_IS_DELETED = "IsDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_IS_GROWTH_GOOD = "IsGrowthGood";
  @SerializedName(SERIALIZED_NAME_IS_GROWTH_GOOD)
  private Boolean isGrowthGood;

  public static final String SERIALIZED_NAME_RULES = "Rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<Rule> rules;

  public Initiative() {
  }

  public Initiative count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * Count
   * @return count
  **/
  @javax.annotation.Nullable
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public Initiative ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Initiative ID
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public Initiative name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the initiative goal
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Initiative description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A longer description of what the objective of the goal is
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Initiative businessGoalID(Integer businessGoalID) {
    this.businessGoalID = businessGoalID;
    return this;
  }

   /**
   * Business Goal ID
   * @return businessGoalID
  **/
  @javax.annotation.Nullable
  public Integer getBusinessGoalID() {
    return businessGoalID;
  }

  public void setBusinessGoalID(Integer businessGoalID) {
    this.businessGoalID = businessGoalID;
  }


  public Initiative isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * IsDeleted
   * @return isDeleted
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public Initiative isGrowthGood(Boolean isGrowthGood) {
    this.isGrowthGood = isGrowthGood;
    return this;
  }

   /**
   * IsGrowthGood. True growth is good, false growth is negative. Defaults to false if not specified.
   * @return isGrowthGood
  **/
  @javax.annotation.Nullable
  public Boolean getIsGrowthGood() {
    return isGrowthGood;
  }

  public void setIsGrowthGood(Boolean isGrowthGood) {
    this.isGrowthGood = isGrowthGood;
  }


  public Initiative rules(List<Rule> rules) {
    this.rules = rules;
    return this;
  }

  public Initiative addRulesItem(Rule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * DDE Rule
   * @return rules
  **/
  @javax.annotation.Nullable
  public List<Rule> getRules() {
    return rules;
  }

  public void setRules(List<Rule> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Initiative initiative = (Initiative) o;
    return Objects.equals(this.count, initiative.count) &&
        Objects.equals(this.ID, initiative.ID) &&
        Objects.equals(this.name, initiative.name) &&
        Objects.equals(this.description, initiative.description) &&
        Objects.equals(this.businessGoalID, initiative.businessGoalID) &&
        Objects.equals(this.isDeleted, initiative.isDeleted) &&
        Objects.equals(this.isGrowthGood, initiative.isGrowthGood) &&
        Objects.equals(this.rules, initiative.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, ID, name, description, businessGoalID, isDeleted, isGrowthGood, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Initiative {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    businessGoalID: ").append(toIndentedString(businessGoalID)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    isGrowthGood: ").append(toIndentedString(isGrowthGood)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Count");
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("BusinessGoalID");
    openapiFields.add("IsDeleted");
    openapiFields.add("IsGrowthGood");
    openapiFields.add("Rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Initiative
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Initiative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Initiative is not found in the empty JSON string", Initiative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Initiative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Initiative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("Rules") != null && !jsonObj.get("Rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("Rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Rules` to be an array in the JSON string but got `%s`", jsonObj.get("Rules").toString()));
          }

          // validate the optional field `Rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            Rule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Initiative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Initiative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Initiative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Initiative.class));

       return (TypeAdapter<T>) new TypeAdapter<Initiative>() {
           @Override
           public void write(JsonWriter out, Initiative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Initiative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Initiative given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Initiative
  * @throws IOException if the JSON string is invalid with respect to Initiative
  */
  public static Initiative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Initiative.class);
  }

 /**
  * Convert an instance of Initiative to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

