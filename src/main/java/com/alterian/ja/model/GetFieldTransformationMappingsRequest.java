/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.APICursor;
import com.alterian.ja.model.FieldTransformationSampleSettings;
import com.alterian.ja.model.MatchOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetFieldTransformationMappingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetFieldTransformationMappingsRequest {
  public static final String SERIALIZED_NAME_COLUMN_NAME_EX = "ColumnNameEx";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME_EX)
  private String columnNameEx;

  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "DataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private Integer dataSourceId;

  public static final String SERIALIZED_NAME_IS_DATA_REFRESH_REQUIRED = "IsDataRefreshRequired";
  @SerializedName(SERIALIZED_NAME_IS_DATA_REFRESH_REQUIRED)
  private Boolean isDataRefreshRequired;

  public static final String SERIALIZED_NAME_JS_O_N_COMPARE_TRANSFORMS = "JSONCompareTransforms";
  @SerializedName(SERIALIZED_NAME_JS_O_N_COMPARE_TRANSFORMS)
  private String jsONCompareTransforms;

  public static final String SERIALIZED_NAME_JS_O_N_TRANSFORMS = "JSONTransforms";
  @SerializedName(SERIALIZED_NAME_JS_O_N_TRANSFORMS)
  private String jsONTransforms;

  public static final String SERIALIZED_NAME_POST_FILTER = "PostFilter";
  @SerializedName(SERIALIZED_NAME_POST_FILTER)
  private String postFilter;

  public static final String SERIALIZED_NAME_SAMPLE_SETTINGS = "SampleSettings";
  @SerializedName(SERIALIZED_NAME_SAMPLE_SETTINGS)
  private FieldTransformationSampleSettings sampleSettings;

  public static final String SERIALIZED_NAME_SOURCE_FILTER = "SourceFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILTER)
  private String sourceFilter;

  public static final String SERIALIZED_NAME_SOURCE_POST_MATCH = "SourcePostMatch";
  @SerializedName(SERIALIZED_NAME_SOURCE_POST_MATCH)
  private MatchOptions sourcePostMatch;

  public GetFieldTransformationMappingsRequest() {
  }

  public GetFieldTransformationMappingsRequest columnNameEx(String columnNameEx) {
    this.columnNameEx = columnNameEx;
    return this;
  }

   /**
   * Source column to which transforms should be applied
   * @return columnNameEx
  **/
  @javax.annotation.Nullable
  public String getColumnNameEx() {
    return columnNameEx;
  }

  public void setColumnNameEx(String columnNameEx) {
    this.columnNameEx = columnNameEx;
  }


  public GetFieldTransformationMappingsRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetFieldTransformationMappingsRequest dataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

   /**
   * Id of the datasource to which column belongs.
   * @return dataSourceId
  **/
  @javax.annotation.Nullable
  public Integer getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(Integer dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public GetFieldTransformationMappingsRequest isDataRefreshRequired(Boolean isDataRefreshRequired) {
    this.isDataRefreshRequired = isDataRefreshRequired;
    return this;
  }

   /**
   * Indicate whether the request can be satisfied with an existing cached result or requires recreation with latest data (default false)
   * @return isDataRefreshRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsDataRefreshRequired() {
    return isDataRefreshRequired;
  }

  public void setIsDataRefreshRequired(Boolean isDataRefreshRequired) {
    this.isDataRefreshRequired = isDataRefreshRequired;
  }


  public GetFieldTransformationMappingsRequest jsONCompareTransforms(String jsONCompareTransforms) {
    this.jsONCompareTransforms = jsONCompareTransforms;
    return this;
  }

   /**
   * Optional JSON array of transforms to produce a revised starting set of values from the column
   * @return jsONCompareTransforms
  **/
  @javax.annotation.Nullable
  public String getJsONCompareTransforms() {
    return jsONCompareTransforms;
  }

  public void setJsONCompareTransforms(String jsONCompareTransforms) {
    this.jsONCompareTransforms = jsONCompareTransforms;
  }


  public GetFieldTransformationMappingsRequest jsONTransforms(String jsONTransforms) {
    this.jsONTransforms = jsONTransforms;
    return this;
  }

   /**
   * JSON array of transform to be applied e.g. [{{\\\&quot;FrequencyReplace\\\&quot;:{{\\\&quot;@minimum\\\&quot;:8035,\\\&quot;@replacement\\\&quot;:\\\&quot;My Replacement\\\&quot;}}}}]. Note that attributes must be prefixed with @
   * @return jsONTransforms
  **/
  @javax.annotation.Nullable
  public String getJsONTransforms() {
    return jsONTransforms;
  }

  public void setJsONTransforms(String jsONTransforms) {
    this.jsONTransforms = jsONTransforms;
  }


  public GetFieldTransformationMappingsRequest postFilter(String postFilter) {
    this.postFilter = postFilter;
    return this;
  }

   /**
   * Optional string to filter the post transform values by
   * @return postFilter
  **/
  @javax.annotation.Nullable
  public String getPostFilter() {
    return postFilter;
  }

  public void setPostFilter(String postFilter) {
    this.postFilter = postFilter;
  }


  public GetFieldTransformationMappingsRequest sampleSettings(FieldTransformationSampleSettings sampleSettings) {
    this.sampleSettings = sampleSettings;
    return this;
  }

   /**
   * Get sampleSettings
   * @return sampleSettings
  **/
  @javax.annotation.Nullable
  public FieldTransformationSampleSettings getSampleSettings() {
    return sampleSettings;
  }

  public void setSampleSettings(FieldTransformationSampleSettings sampleSettings) {
    this.sampleSettings = sampleSettings;
  }


  public GetFieldTransformationMappingsRequest sourceFilter(String sourceFilter) {
    this.sourceFilter = sourceFilter;
    return this;
  }

   /**
   * Optional string to filter the source values by
   * @return sourceFilter
  **/
  @javax.annotation.Nullable
  public String getSourceFilter() {
    return sourceFilter;
  }

  public void setSourceFilter(String sourceFilter) {
    this.sourceFilter = sourceFilter;
  }


  public GetFieldTransformationMappingsRequest sourcePostMatch(MatchOptions sourcePostMatch) {
    this.sourcePostMatch = sourcePostMatch;
    return this;
  }

   /**
   * Get sourcePostMatch
   * @return sourcePostMatch
  **/
  @javax.annotation.Nullable
  public MatchOptions getSourcePostMatch() {
    return sourcePostMatch;
  }

  public void setSourcePostMatch(MatchOptions sourcePostMatch) {
    this.sourcePostMatch = sourcePostMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFieldTransformationMappingsRequest getFieldTransformationMappingsRequest = (GetFieldTransformationMappingsRequest) o;
    return Objects.equals(this.columnNameEx, getFieldTransformationMappingsRequest.columnNameEx) &&
        Objects.equals(this.cursor, getFieldTransformationMappingsRequest.cursor) &&
        Objects.equals(this.dataSourceId, getFieldTransformationMappingsRequest.dataSourceId) &&
        Objects.equals(this.isDataRefreshRequired, getFieldTransformationMappingsRequest.isDataRefreshRequired) &&
        Objects.equals(this.jsONCompareTransforms, getFieldTransformationMappingsRequest.jsONCompareTransforms) &&
        Objects.equals(this.jsONTransforms, getFieldTransformationMappingsRequest.jsONTransforms) &&
        Objects.equals(this.postFilter, getFieldTransformationMappingsRequest.postFilter) &&
        Objects.equals(this.sampleSettings, getFieldTransformationMappingsRequest.sampleSettings) &&
        Objects.equals(this.sourceFilter, getFieldTransformationMappingsRequest.sourceFilter) &&
        Objects.equals(this.sourcePostMatch, getFieldTransformationMappingsRequest.sourcePostMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnNameEx, cursor, dataSourceId, isDataRefreshRequired, jsONCompareTransforms, jsONTransforms, postFilter, sampleSettings, sourceFilter, sourcePostMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFieldTransformationMappingsRequest {\n");
    sb.append("    columnNameEx: ").append(toIndentedString(columnNameEx)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    isDataRefreshRequired: ").append(toIndentedString(isDataRefreshRequired)).append("\n");
    sb.append("    jsONCompareTransforms: ").append(toIndentedString(jsONCompareTransforms)).append("\n");
    sb.append("    jsONTransforms: ").append(toIndentedString(jsONTransforms)).append("\n");
    sb.append("    postFilter: ").append(toIndentedString(postFilter)).append("\n");
    sb.append("    sampleSettings: ").append(toIndentedString(sampleSettings)).append("\n");
    sb.append("    sourceFilter: ").append(toIndentedString(sourceFilter)).append("\n");
    sb.append("    sourcePostMatch: ").append(toIndentedString(sourcePostMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ColumnNameEx");
    openapiFields.add("Cursor");
    openapiFields.add("DataSourceId");
    openapiFields.add("IsDataRefreshRequired");
    openapiFields.add("JSONCompareTransforms");
    openapiFields.add("JSONTransforms");
    openapiFields.add("PostFilter");
    openapiFields.add("SampleSettings");
    openapiFields.add("SourceFilter");
    openapiFields.add("SourcePostMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetFieldTransformationMappingsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFieldTransformationMappingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFieldTransformationMappingsRequest is not found in the empty JSON string", GetFieldTransformationMappingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFieldTransformationMappingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFieldTransformationMappingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ColumnNameEx") != null && !jsonObj.get("ColumnNameEx").isJsonNull()) && !jsonObj.get("ColumnNameEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColumnNameEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColumnNameEx").toString()));
      }
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
      if ((jsonObj.get("JSONCompareTransforms") != null && !jsonObj.get("JSONCompareTransforms").isJsonNull()) && !jsonObj.get("JSONCompareTransforms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JSONCompareTransforms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JSONCompareTransforms").toString()));
      }
      if ((jsonObj.get("JSONTransforms") != null && !jsonObj.get("JSONTransforms").isJsonNull()) && !jsonObj.get("JSONTransforms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JSONTransforms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JSONTransforms").toString()));
      }
      if ((jsonObj.get("PostFilter") != null && !jsonObj.get("PostFilter").isJsonNull()) && !jsonObj.get("PostFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PostFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PostFilter").toString()));
      }
      // validate the optional field `SampleSettings`
      if (jsonObj.get("SampleSettings") != null && !jsonObj.get("SampleSettings").isJsonNull()) {
        FieldTransformationSampleSettings.validateJsonElement(jsonObj.get("SampleSettings"));
      }
      if ((jsonObj.get("SourceFilter") != null && !jsonObj.get("SourceFilter").isJsonNull()) && !jsonObj.get("SourceFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceFilter").toString()));
      }
      // validate the optional field `SourcePostMatch`
      if (jsonObj.get("SourcePostMatch") != null && !jsonObj.get("SourcePostMatch").isJsonNull()) {
        MatchOptions.validateJsonElement(jsonObj.get("SourcePostMatch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFieldTransformationMappingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFieldTransformationMappingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFieldTransformationMappingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFieldTransformationMappingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFieldTransformationMappingsRequest>() {
           @Override
           public void write(JsonWriter out, GetFieldTransformationMappingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFieldTransformationMappingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetFieldTransformationMappingsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetFieldTransformationMappingsRequest
  * @throws IOException if the JSON string is invalid with respect to GetFieldTransformationMappingsRequest
  */
  public static GetFieldTransformationMappingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFieldTransformationMappingsRequest.class);
  }

 /**
  * Convert an instance of GetFieldTransformationMappingsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

