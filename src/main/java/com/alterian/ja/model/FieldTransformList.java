/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ColumnPublishedTransform;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class FieldTransformList {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_JS_O_N_TRANSFORMS = "JSONTransforms";
  @SerializedName(SERIALIZED_NAME_JS_O_N_TRANSFORMS)
  private String jsONTransforms;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_PUBLISHED_VERSIONS = "PublishedVersions";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_VERSIONS)
  private List<ColumnPublishedTransform> publishedVersions;

  public FieldTransformList() {
  }

  public FieldTransformList name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FieldTransformList id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public FieldTransformList version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * 
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public FieldTransformList jsONTransforms(String jsONTransforms) {
    this.jsONTransforms = jsONTransforms;
    return this;
  }

   /**
   * 
   * @return jsONTransforms
  **/
  @javax.annotation.Nullable
  public String getJsONTransforms() {
    return jsONTransforms;
  }

  public void setJsONTransforms(String jsONTransforms) {
    this.jsONTransforms = jsONTransforms;
  }


  public FieldTransformList metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * 
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public FieldTransformList publishedVersions(List<ColumnPublishedTransform> publishedVersions) {
    this.publishedVersions = publishedVersions;
    return this;
  }

  public FieldTransformList addPublishedVersionsItem(ColumnPublishedTransform publishedVersionsItem) {
    if (this.publishedVersions == null) {
      this.publishedVersions = new ArrayList<>();
    }
    this.publishedVersions.add(publishedVersionsItem);
    return this;
  }

   /**
   * 
   * @return publishedVersions
  **/
  @javax.annotation.Nullable
  public List<ColumnPublishedTransform> getPublishedVersions() {
    return publishedVersions;
  }

  public void setPublishedVersions(List<ColumnPublishedTransform> publishedVersions) {
    this.publishedVersions = publishedVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldTransformList fieldTransformList = (FieldTransformList) o;
    return Objects.equals(this.name, fieldTransformList.name) &&
        Objects.equals(this.id, fieldTransformList.id) &&
        Objects.equals(this.version, fieldTransformList.version) &&
        Objects.equals(this.jsONTransforms, fieldTransformList.jsONTransforms) &&
        Objects.equals(this.metadata, fieldTransformList.metadata) &&
        Objects.equals(this.publishedVersions, fieldTransformList.publishedVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, version, jsONTransforms, metadata, publishedVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldTransformList {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    jsONTransforms: ").append(toIndentedString(jsONTransforms)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    publishedVersions: ").append(toIndentedString(publishedVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Id");
    openapiFields.add("Version");
    openapiFields.add("JSONTransforms");
    openapiFields.add("Metadata");
    openapiFields.add("PublishedVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FieldTransformList
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldTransformList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldTransformList is not found in the empty JSON string", FieldTransformList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldTransformList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldTransformList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("JSONTransforms") != null && !jsonObj.get("JSONTransforms").isJsonNull()) && !jsonObj.get("JSONTransforms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JSONTransforms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JSONTransforms").toString()));
      }
      if ((jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) && !jsonObj.get("Metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
      }
      if (jsonObj.get("PublishedVersions") != null && !jsonObj.get("PublishedVersions").isJsonNull()) {
        JsonArray jsonArraypublishedVersions = jsonObj.getAsJsonArray("PublishedVersions");
        if (jsonArraypublishedVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PublishedVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PublishedVersions` to be an array in the JSON string but got `%s`", jsonObj.get("PublishedVersions").toString()));
          }

          // validate the optional field `PublishedVersions` (array)
          for (int i = 0; i < jsonArraypublishedVersions.size(); i++) {
            ColumnPublishedTransform.validateJsonElement(jsonArraypublishedVersions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldTransformList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldTransformList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldTransformList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldTransformList.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldTransformList>() {
           @Override
           public void write(JsonWriter out, FieldTransformList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldTransformList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FieldTransformList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FieldTransformList
  * @throws IOException if the JSON string is invalid with respect to FieldTransformList
  */
  public static FieldTransformList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldTransformList.class);
  }

 /**
  * Convert an instance of FieldTransformList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

