/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * CreateEventStreamGroupRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class CreateEventStreamGroupRequest {
  public static final String SERIALIZED_NAME_DD_E_CLIENT = "DDEClient";
  @SerializedName(SERIALIZED_NAME_DD_E_CLIENT)
  private String ddEClient;

  public static final String SERIALIZED_NAME_DD_E_SITE_ID = "DDESiteId";
  @SerializedName(SERIALIZED_NAME_DD_E_SITE_ID)
  private Integer ddESiteId;

  public static final String SERIALIZED_NAME_EVENT_STREAM_DATABASE = "EventStreamDatabase";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_DATABASE)
  private String eventStreamDatabase;

  public static final String SERIALIZED_NAME_IS_FIFO_QUEUE_REQUIRED = "IsFifoQueueRequired";
  @SerializedName(SERIALIZED_NAME_IS_FIFO_QUEUE_REQUIRED)
  private Boolean isFifoQueueRequired;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "Project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_QUEUE_LOCK_IDS = "QueueLockIds";
  @SerializedName(SERIALIZED_NAME_QUEUE_LOCK_IDS)
  private List<String> queueLockIds;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_SKIP_DEFAULT_QUEUE_SETUP = "SkipDefaultQueueSetup";
  @SerializedName(SERIALIZED_NAME_SKIP_DEFAULT_QUEUE_SETUP)
  private Boolean skipDefaultQueueSetup;

  public CreateEventStreamGroupRequest() {
  }

  public CreateEventStreamGroupRequest ddEClient(String ddEClient) {
    this.ddEClient = ddEClient;
    return this;
  }

   /**
   * Client in DDE in which you would like to create the event stream
   * @return ddEClient
  **/
  @javax.annotation.Nullable
  public String getDdEClient() {
    return ddEClient;
  }

  public void setDdEClient(String ddEClient) {
    this.ddEClient = ddEClient;
  }


  public CreateEventStreamGroupRequest ddESiteId(Integer ddESiteId) {
    this.ddESiteId = ddESiteId;
    return this;
  }

   /**
   * An integer uniquely identifying the DDE system.  This site id is provided when it has been added via the SysAdminApp&#39;s AddDDESite command.
   * @return ddESiteId
  **/
  @javax.annotation.Nullable
  public Integer getDdESiteId() {
    return ddESiteId;
  }

  public void setDdESiteId(Integer ddESiteId) {
    this.ddESiteId = ddESiteId;
  }


  public CreateEventStreamGroupRequest eventStreamDatabase(String eventStreamDatabase) {
    this.eventStreamDatabase = eventStreamDatabase;
    return this;
  }

   /**
   * Name of the engine database into which to place the event stream data
   * @return eventStreamDatabase
  **/
  @javax.annotation.Nullable
  public String getEventStreamDatabase() {
    return eventStreamDatabase;
  }

  public void setEventStreamDatabase(String eventStreamDatabase) {
    this.eventStreamDatabase = eventStreamDatabase;
  }


  public CreateEventStreamGroupRequest isFifoQueueRequired(Boolean isFifoQueueRequired) {
    this.isFifoQueueRequired = isFifoQueueRequired;
    return this;
  }

   /**
   * (default false)
   * @return isFifoQueueRequired
  **/
  @javax.annotation.Nullable
  public Boolean getIsFifoQueueRequired() {
    return isFifoQueueRequired;
  }

  public void setIsFifoQueueRequired(Boolean isFifoQueueRequired) {
    this.isFifoQueueRequired = isFifoQueueRequired;
  }


  public CreateEventStreamGroupRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the event stream you would like to create
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateEventStreamGroupRequest project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Engine project into which to place the Event tables
   * @return project
  **/
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public CreateEventStreamGroupRequest queueLockIds(List<String> queueLockIds) {
    this.queueLockIds = queueLockIds;
    return this;
  }

  public CreateEventStreamGroupRequest addQueueLockIdsItem(String queueLockIdsItem) {
    if (this.queueLockIds == null) {
      this.queueLockIds = new ArrayList<>();
    }
    this.queueLockIds.add(queueLockIdsItem);
    return this;
  }

   /**
   * If the event stream is to be attached to an existing set of queues then the lock ids must be specified (in any order). This pre-supposes that any existing consumer event streams have been deleted/disconnected
   * @return queueLockIds
  **/
  @javax.annotation.Nullable
  public List<String> getQueueLockIds() {
    return queueLockIds;
  }

  public void setQueueLockIds(List<String> queueLockIds) {
    this.queueLockIds = queueLockIds;
  }


  public CreateEventStreamGroupRequest server(String server) {
    this.server = server;
    return this;
  }

   /**
   * Engine server on which to install the Event tables
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public CreateEventStreamGroupRequest skipDefaultQueueSetup(Boolean skipDefaultQueueSetup) {
    this.skipDefaultQueueSetup = skipDefaultQueueSetup;
    return this;
  }

   /**
   * If this is true then the AlterianCX_defaultQueue global parameter will not be set (default false)
   * @return skipDefaultQueueSetup
  **/
  @javax.annotation.Nullable
  public Boolean getSkipDefaultQueueSetup() {
    return skipDefaultQueueSetup;
  }

  public void setSkipDefaultQueueSetup(Boolean skipDefaultQueueSetup) {
    this.skipDefaultQueueSetup = skipDefaultQueueSetup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventStreamGroupRequest createEventStreamGroupRequest = (CreateEventStreamGroupRequest) o;
    return Objects.equals(this.ddEClient, createEventStreamGroupRequest.ddEClient) &&
        Objects.equals(this.ddESiteId, createEventStreamGroupRequest.ddESiteId) &&
        Objects.equals(this.eventStreamDatabase, createEventStreamGroupRequest.eventStreamDatabase) &&
        Objects.equals(this.isFifoQueueRequired, createEventStreamGroupRequest.isFifoQueueRequired) &&
        Objects.equals(this.name, createEventStreamGroupRequest.name) &&
        Objects.equals(this.project, createEventStreamGroupRequest.project) &&
        Objects.equals(this.queueLockIds, createEventStreamGroupRequest.queueLockIds) &&
        Objects.equals(this.server, createEventStreamGroupRequest.server) &&
        Objects.equals(this.skipDefaultQueueSetup, createEventStreamGroupRequest.skipDefaultQueueSetup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ddEClient, ddESiteId, eventStreamDatabase, isFifoQueueRequired, name, project, queueLockIds, server, skipDefaultQueueSetup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventStreamGroupRequest {\n");
    sb.append("    ddEClient: ").append(toIndentedString(ddEClient)).append("\n");
    sb.append("    ddESiteId: ").append(toIndentedString(ddESiteId)).append("\n");
    sb.append("    eventStreamDatabase: ").append(toIndentedString(eventStreamDatabase)).append("\n");
    sb.append("    isFifoQueueRequired: ").append(toIndentedString(isFifoQueueRequired)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    queueLockIds: ").append(toIndentedString(queueLockIds)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    skipDefaultQueueSetup: ").append(toIndentedString(skipDefaultQueueSetup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DDEClient");
    openapiFields.add("DDESiteId");
    openapiFields.add("EventStreamDatabase");
    openapiFields.add("IsFifoQueueRequired");
    openapiFields.add("Name");
    openapiFields.add("Project");
    openapiFields.add("QueueLockIds");
    openapiFields.add("Server");
    openapiFields.add("SkipDefaultQueueSetup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateEventStreamGroupRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEventStreamGroupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEventStreamGroupRequest is not found in the empty JSON string", CreateEventStreamGroupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEventStreamGroupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEventStreamGroupRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DDEClient") != null && !jsonObj.get("DDEClient").isJsonNull()) && !jsonObj.get("DDEClient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DDEClient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DDEClient").toString()));
      }
      if ((jsonObj.get("EventStreamDatabase") != null && !jsonObj.get("EventStreamDatabase").isJsonNull()) && !jsonObj.get("EventStreamDatabase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventStreamDatabase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventStreamDatabase").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Project") != null && !jsonObj.get("Project").isJsonNull()) && !jsonObj.get("Project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Project").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("QueueLockIds") != null && !jsonObj.get("QueueLockIds").isJsonNull() && !jsonObj.get("QueueLockIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueueLockIds` to be an array in the JSON string but got `%s`", jsonObj.get("QueueLockIds").toString()));
      }
      if ((jsonObj.get("Server") != null && !jsonObj.get("Server").isJsonNull()) && !jsonObj.get("Server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Server").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEventStreamGroupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEventStreamGroupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEventStreamGroupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEventStreamGroupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEventStreamGroupRequest>() {
           @Override
           public void write(JsonWriter out, CreateEventStreamGroupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEventStreamGroupRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateEventStreamGroupRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateEventStreamGroupRequest
  * @throws IOException if the JSON string is invalid with respect to CreateEventStreamGroupRequest
  */
  public static CreateEventStreamGroupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEventStreamGroupRequest.class);
  }

 /**
  * Convert an instance of CreateEventStreamGroupRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

