/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.AppliesToType;
import com.alterian.ja.model.DataSourceAttributeTypes;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DatasourceAttribute {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_APPLIES_TO = "AppliesTo";
  @SerializedName(SERIALIZED_NAME_APPLIES_TO)
  private AppliesToType appliesTo;

  public static final String SERIALIZED_NAME_DATASOURCE_TYPE_I_D = "DatasourceTypeID";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE_I_D)
  private Integer datasourceTypeID;

  public static final String SERIALIZED_NAME_ATTRIBUTE_TYPE = "AttributeType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_TYPE)
  private DataSourceAttributeTypes attributeType;

  public static final String SERIALIZED_NAME_REQUIRED = "Required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public DatasourceAttribute() {
  }

  public DatasourceAttribute ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public DatasourceAttribute name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DatasourceAttribute appliesTo(AppliesToType appliesTo) {
    this.appliesTo = appliesTo;
    return this;
  }

   /**
   * Get appliesTo
   * @return appliesTo
  **/
  @javax.annotation.Nullable
  public AppliesToType getAppliesTo() {
    return appliesTo;
  }

  public void setAppliesTo(AppliesToType appliesTo) {
    this.appliesTo = appliesTo;
  }


  public DatasourceAttribute datasourceTypeID(Integer datasourceTypeID) {
    this.datasourceTypeID = datasourceTypeID;
    return this;
  }

   /**
   * 
   * @return datasourceTypeID
  **/
  @javax.annotation.Nullable
  public Integer getDatasourceTypeID() {
    return datasourceTypeID;
  }

  public void setDatasourceTypeID(Integer datasourceTypeID) {
    this.datasourceTypeID = datasourceTypeID;
  }


  public DatasourceAttribute attributeType(DataSourceAttributeTypes attributeType) {
    this.attributeType = attributeType;
    return this;
  }

   /**
   * Get attributeType
   * @return attributeType
  **/
  @javax.annotation.Nullable
  public DataSourceAttributeTypes getAttributeType() {
    return attributeType;
  }

  public void setAttributeType(DataSourceAttributeTypes attributeType) {
    this.attributeType = attributeType;
  }


  public DatasourceAttribute required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * 
   * @return required
  **/
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public DatasourceAttribute value(String value) {
    this.value = value;
    return this;
  }

   /**
   * 
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public DatasourceAttribute description(String description) {
    this.description = description;
    return this;
  }

   /**
   * 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasourceAttribute datasourceAttribute = (DatasourceAttribute) o;
    return Objects.equals(this.ID, datasourceAttribute.ID) &&
        Objects.equals(this.name, datasourceAttribute.name) &&
        Objects.equals(this.appliesTo, datasourceAttribute.appliesTo) &&
        Objects.equals(this.datasourceTypeID, datasourceAttribute.datasourceTypeID) &&
        Objects.equals(this.attributeType, datasourceAttribute.attributeType) &&
        Objects.equals(this.required, datasourceAttribute.required) &&
        Objects.equals(this.value, datasourceAttribute.value) &&
        Objects.equals(this.description, datasourceAttribute.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, appliesTo, datasourceTypeID, attributeType, required, value, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasourceAttribute {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    appliesTo: ").append(toIndentedString(appliesTo)).append("\n");
    sb.append("    datasourceTypeID: ").append(toIndentedString(datasourceTypeID)).append("\n");
    sb.append("    attributeType: ").append(toIndentedString(attributeType)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("AppliesTo");
    openapiFields.add("DatasourceTypeID");
    openapiFields.add("AttributeType");
    openapiFields.add("Required");
    openapiFields.add("Value");
    openapiFields.add("Description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DatasourceAttribute
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasourceAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasourceAttribute is not found in the empty JSON string", DatasourceAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasourceAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasourceAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `AppliesTo`
      if (jsonObj.get("AppliesTo") != null && !jsonObj.get("AppliesTo").isJsonNull()) {
        AppliesToType.validateJsonElement(jsonObj.get("AppliesTo"));
      }
      // validate the optional field `AttributeType`
      if (jsonObj.get("AttributeType") != null && !jsonObj.get("AttributeType").isJsonNull()) {
        DataSourceAttributeTypes.validateJsonElement(jsonObj.get("AttributeType"));
      }
      if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasourceAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasourceAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasourceAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasourceAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasourceAttribute>() {
           @Override
           public void write(JsonWriter out, DatasourceAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasourceAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatasourceAttribute given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatasourceAttribute
  * @throws IOException if the JSON string is invalid with respect to DatasourceAttribute
  */
  public static DatasourceAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasourceAttribute.class);
  }

 /**
  * Convert an instance of DatasourceAttribute to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

