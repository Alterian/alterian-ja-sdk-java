/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.APICursor;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * GetUsersWithPermissionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetUsersWithPermissionRequest {
  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_GROUP_I_D = "GroupID";
  @SerializedName(SERIALIZED_NAME_GROUP_I_D)
  private Integer groupID;

  public static final String SERIALIZED_NAME_IS_MEMBER_GROUP_RECURSION_ALLOWED = "IsMemberGroupRecursionAllowed";
  @SerializedName(SERIALIZED_NAME_IS_MEMBER_GROUP_RECURSION_ALLOWED)
  private Boolean isMemberGroupRecursionAllowed;

  public static final String SERIALIZED_NAME_PERMISSION_I_D = "PermissionID";
  @SerializedName(SERIALIZED_NAME_PERMISSION_I_D)
  private Integer permissionID;

  public GetUsersWithPermissionRequest() {
  }

  public GetUsersWithPermissionRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetUsersWithPermissionRequest groupID(Integer groupID) {
    this.groupID = groupID;
    return this;
  }

   /**
   * Optionally restrict the check to users that are members of the specified group (either directly or by inclusion in a member group - see IsMemberGroupRecursionAllowed)
   * @return groupID
  **/
  @javax.annotation.Nullable
  public Integer getGroupID() {
    return groupID;
  }

  public void setGroupID(Integer groupID) {
    this.groupID = groupID;
  }


  public GetUsersWithPermissionRequest isMemberGroupRecursionAllowed(Boolean isMemberGroupRecursionAllowed) {
    this.isMemberGroupRecursionAllowed = isMemberGroupRecursionAllowed;
    return this;
  }

   /**
   * Where restricting the check to users that are members of the specified group set to false to require direct membership or true to allow inclusion in one of its member groups
   * @return isMemberGroupRecursionAllowed
  **/
  @javax.annotation.Nullable
  public Boolean getIsMemberGroupRecursionAllowed() {
    return isMemberGroupRecursionAllowed;
  }

  public void setIsMemberGroupRecursionAllowed(Boolean isMemberGroupRecursionAllowed) {
    this.isMemberGroupRecursionAllowed = isMemberGroupRecursionAllowed;
  }


  public GetUsersWithPermissionRequest permissionID(Integer permissionID) {
    this.permissionID = permissionID;
    return this;
  }

   /**
   * ID of the permission to check
   * @return permissionID
  **/
  @javax.annotation.Nullable
  public Integer getPermissionID() {
    return permissionID;
  }

  public void setPermissionID(Integer permissionID) {
    this.permissionID = permissionID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUsersWithPermissionRequest getUsersWithPermissionRequest = (GetUsersWithPermissionRequest) o;
    return Objects.equals(this.cursor, getUsersWithPermissionRequest.cursor) &&
        Objects.equals(this.groupID, getUsersWithPermissionRequest.groupID) &&
        Objects.equals(this.isMemberGroupRecursionAllowed, getUsersWithPermissionRequest.isMemberGroupRecursionAllowed) &&
        Objects.equals(this.permissionID, getUsersWithPermissionRequest.permissionID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cursor, groupID, isMemberGroupRecursionAllowed, permissionID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUsersWithPermissionRequest {\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    groupID: ").append(toIndentedString(groupID)).append("\n");
    sb.append("    isMemberGroupRecursionAllowed: ").append(toIndentedString(isMemberGroupRecursionAllowed)).append("\n");
    sb.append("    permissionID: ").append(toIndentedString(permissionID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cursor");
    openapiFields.add("GroupID");
    openapiFields.add("IsMemberGroupRecursionAllowed");
    openapiFields.add("PermissionID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetUsersWithPermissionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUsersWithPermissionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUsersWithPermissionRequest is not found in the empty JSON string", GetUsersWithPermissionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUsersWithPermissionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUsersWithPermissionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUsersWithPermissionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUsersWithPermissionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUsersWithPermissionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUsersWithPermissionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUsersWithPermissionRequest>() {
           @Override
           public void write(JsonWriter out, GetUsersWithPermissionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUsersWithPermissionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetUsersWithPermissionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetUsersWithPermissionRequest
  * @throws IOException if the JSON string is invalid with respect to GetUsersWithPermissionRequest
  */
  public static GetUsersWithPermissionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUsersWithPermissionRequest.class);
  }

 /**
  * Convert an instance of GetUsersWithPermissionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

