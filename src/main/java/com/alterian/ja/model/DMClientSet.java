/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.DMClient;
import com.alterian.ja.model.DMClientSettings;
import com.alterian.ja.model.DMDeliveryContext;
import com.alterian.ja.model.DMVMTA;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class DMClientSet {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SA_SEATS = "SASeats";
  @SerializedName(SERIALIZED_NAME_SA_SEATS)
  private Integer saSeats;

  public static final String SERIALIZED_NAME_DEFAULT_SETTINGS = "DefaultSettings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SETTINGS)
  private DMClientSettings defaultSettings;

  public static final String SERIALIZED_NAME_CLIENTS = "Clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<DMClient> clients;

  public static final String SERIALIZED_NAME_VM_T_AS = "VMTAs";
  @SerializedName(SERIALIZED_NAME_VM_T_AS)
  private List<DMVMTA> vmTAs;

  public static final String SERIALIZED_NAME_DELIVERY_CONTEXTS = "DeliveryContexts";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CONTEXTS)
  private List<DMDeliveryContext> deliveryContexts;

  public DMClientSet() {
  }

  public DMClientSet ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * 
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public DMClientSet name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DMClientSet saSeats(Integer saSeats) {
    this.saSeats = saSeats;
    return this;
  }

   /**
   * 
   * @return saSeats
  **/
  @javax.annotation.Nullable
  public Integer getSaSeats() {
    return saSeats;
  }

  public void setSaSeats(Integer saSeats) {
    this.saSeats = saSeats;
  }


  public DMClientSet defaultSettings(DMClientSettings defaultSettings) {
    this.defaultSettings = defaultSettings;
    return this;
  }

   /**
   * Get defaultSettings
   * @return defaultSettings
  **/
  @javax.annotation.Nullable
  public DMClientSettings getDefaultSettings() {
    return defaultSettings;
  }

  public void setDefaultSettings(DMClientSettings defaultSettings) {
    this.defaultSettings = defaultSettings;
  }


  public DMClientSet clients(List<DMClient> clients) {
    this.clients = clients;
    return this;
  }

  public DMClientSet addClientsItem(DMClient clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

   /**
   * 
   * @return clients
  **/
  @javax.annotation.Nullable
  public List<DMClient> getClients() {
    return clients;
  }

  public void setClients(List<DMClient> clients) {
    this.clients = clients;
  }


  public DMClientSet vmTAs(List<DMVMTA> vmTAs) {
    this.vmTAs = vmTAs;
    return this;
  }

  public DMClientSet addVmTAsItem(DMVMTA vmTAsItem) {
    if (this.vmTAs == null) {
      this.vmTAs = new ArrayList<>();
    }
    this.vmTAs.add(vmTAsItem);
    return this;
  }

   /**
   * 
   * @return vmTAs
  **/
  @javax.annotation.Nullable
  public List<DMVMTA> getVmTAs() {
    return vmTAs;
  }

  public void setVmTAs(List<DMVMTA> vmTAs) {
    this.vmTAs = vmTAs;
  }


  public DMClientSet deliveryContexts(List<DMDeliveryContext> deliveryContexts) {
    this.deliveryContexts = deliveryContexts;
    return this;
  }

  public DMClientSet addDeliveryContextsItem(DMDeliveryContext deliveryContextsItem) {
    if (this.deliveryContexts == null) {
      this.deliveryContexts = new ArrayList<>();
    }
    this.deliveryContexts.add(deliveryContextsItem);
    return this;
  }

   /**
   * 
   * @return deliveryContexts
  **/
  @javax.annotation.Nullable
  public List<DMDeliveryContext> getDeliveryContexts() {
    return deliveryContexts;
  }

  public void setDeliveryContexts(List<DMDeliveryContext> deliveryContexts) {
    this.deliveryContexts = deliveryContexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DMClientSet dmClientSet = (DMClientSet) o;
    return Objects.equals(this.ID, dmClientSet.ID) &&
        Objects.equals(this.name, dmClientSet.name) &&
        Objects.equals(this.saSeats, dmClientSet.saSeats) &&
        Objects.equals(this.defaultSettings, dmClientSet.defaultSettings) &&
        Objects.equals(this.clients, dmClientSet.clients) &&
        Objects.equals(this.vmTAs, dmClientSet.vmTAs) &&
        Objects.equals(this.deliveryContexts, dmClientSet.deliveryContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, saSeats, defaultSettings, clients, vmTAs, deliveryContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DMClientSet {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    saSeats: ").append(toIndentedString(saSeats)).append("\n");
    sb.append("    defaultSettings: ").append(toIndentedString(defaultSettings)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    vmTAs: ").append(toIndentedString(vmTAs)).append("\n");
    sb.append("    deliveryContexts: ").append(toIndentedString(deliveryContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("SASeats");
    openapiFields.add("DefaultSettings");
    openapiFields.add("Clients");
    openapiFields.add("VMTAs");
    openapiFields.add("DeliveryContexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DMClientSet
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DMClientSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DMClientSet is not found in the empty JSON string", DMClientSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DMClientSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DMClientSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `DefaultSettings`
      if (jsonObj.get("DefaultSettings") != null && !jsonObj.get("DefaultSettings").isJsonNull()) {
        DMClientSettings.validateJsonElement(jsonObj.get("DefaultSettings"));
      }
      if (jsonObj.get("Clients") != null && !jsonObj.get("Clients").isJsonNull()) {
        JsonArray jsonArrayclients = jsonObj.getAsJsonArray("Clients");
        if (jsonArrayclients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Clients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Clients` to be an array in the JSON string but got `%s`", jsonObj.get("Clients").toString()));
          }

          // validate the optional field `Clients` (array)
          for (int i = 0; i < jsonArrayclients.size(); i++) {
            DMClient.validateJsonElement(jsonArrayclients.get(i));
          };
        }
      }
      if (jsonObj.get("VMTAs") != null && !jsonObj.get("VMTAs").isJsonNull()) {
        JsonArray jsonArrayvmTAs = jsonObj.getAsJsonArray("VMTAs");
        if (jsonArrayvmTAs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("VMTAs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `VMTAs` to be an array in the JSON string but got `%s`", jsonObj.get("VMTAs").toString()));
          }

          // validate the optional field `VMTAs` (array)
          for (int i = 0; i < jsonArrayvmTAs.size(); i++) {
            DMVMTA.validateJsonElement(jsonArrayvmTAs.get(i));
          };
        }
      }
      if (jsonObj.get("DeliveryContexts") != null && !jsonObj.get("DeliveryContexts").isJsonNull()) {
        JsonArray jsonArraydeliveryContexts = jsonObj.getAsJsonArray("DeliveryContexts");
        if (jsonArraydeliveryContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeliveryContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeliveryContexts` to be an array in the JSON string but got `%s`", jsonObj.get("DeliveryContexts").toString()));
          }

          // validate the optional field `DeliveryContexts` (array)
          for (int i = 0; i < jsonArraydeliveryContexts.size(); i++) {
            DMDeliveryContext.validateJsonElement(jsonArraydeliveryContexts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DMClientSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DMClientSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DMClientSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DMClientSet.class));

       return (TypeAdapter<T>) new TypeAdapter<DMClientSet>() {
           @Override
           public void write(JsonWriter out, DMClientSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DMClientSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DMClientSet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DMClientSet
  * @throws IOException if the JSON string is invalid with respect to DMClientSet
  */
  public static DMClientSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DMClientSet.class);
  }

 /**
  * Convert an instance of DMClientSet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

