/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.model;

import java.util.Objects;
import com.alterian.ja.model.ALDataSourceColumn;
import com.alterian.ja.model.ALDatasourceJoin;
import com.alterian.ja.model.ALDatasourceLink;
import com.alterian.ja.model.ALDatasourcePrimaryKey;
import com.alterian.ja.model.DatasourceAttribute;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.ja.JSON;

/**
 * Contains information about a database table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class ALDataSourceTable {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_EX = "NameEx";
  @SerializedName(SERIALIZED_NAME_NAME_EX)
  private String nameEx;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_VISIBLE = "Visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public static final String SERIALIZED_NAME_ACCESS_VIEW = "AccessView";
  @SerializedName(SERIALIZED_NAME_ACCESS_VIEW)
  private Boolean accessView;

  public static final String SERIALIZED_NAME_ACCESS_MODIFY = "AccessModify";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODIFY)
  private Boolean accessModify;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<DatasourceAttribute> attributes;

  public static final String SERIALIZED_NAME_DATABASE_I_D = "DatabaseID";
  @SerializedName(SERIALIZED_NAME_DATABASE_I_D)
  private Integer databaseID;

  public static final String SERIALIZED_NAME_NATIVE_NAME = "NativeName";
  @SerializedName(SERIALIZED_NAME_NATIVE_NAME)
  private String nativeName;

  public static final String SERIALIZED_NAME_COLUMNS = "Columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ALDataSourceColumn> columns;

  public static final String SERIALIZED_NAME_DATASOURCE_TYPE_I_D = "DatasourceTypeID";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE_I_D)
  private Integer datasourceTypeID;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "PrimaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private ALDatasourcePrimaryKey primaryKey;

  public static final String SERIALIZED_NAME_RESOLVER_TABLE_I_D = "ResolverTableID";
  @SerializedName(SERIALIZED_NAME_RESOLVER_TABLE_I_D)
  private Integer resolverTableID;

  public static final String SERIALIZED_NAME_JOINS = "Joins";
  @SerializedName(SERIALIZED_NAME_JOINS)
  private List<ALDatasourceJoin> joins;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ALDatasourceLink> links;

  public static final String SERIALIZED_NAME_FULL_NATIVE_NAME = "FullNativeName";
  @SerializedName(SERIALIZED_NAME_FULL_NATIVE_NAME)
  private String fullNativeName;

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "DatasourceId";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private Integer datasourceId;

  public ALDataSourceTable() {
  }

  public ALDataSourceTable ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Unique ID of the datasource
   * @return ID
  **/
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public ALDataSourceTable name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the datasource [must be unique]
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ALDataSourceTable nameEx(String nameEx) {
    this.nameEx = nameEx;
    return this;
  }

   /**
   * Full name of this table, which includes in the datasource and the native name for the table in the pattern (datasource).[database].[table]
   * @return nameEx
  **/
  @javax.annotation.Nullable
  public String getNameEx() {
    return nameEx;
  }

  public void setNameEx(String nameEx) {
    this.nameEx = nameEx;
  }


  public ALDataSourceTable enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether or not this datasource is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ALDataSourceTable visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Whether or not this datasource is visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }


  public ALDataSourceTable accessView(Boolean accessView) {
    this.accessView = accessView;
    return this;
  }

   /**
   * Can the user view this datasource
   * @return accessView
  **/
  @javax.annotation.Nullable
  public Boolean getAccessView() {
    return accessView;
  }

  public void setAccessView(Boolean accessView) {
    this.accessView = accessView;
  }


  public ALDataSourceTable accessModify(Boolean accessModify) {
    this.accessModify = accessModify;
    return this;
  }

   /**
   * Not currently used
   * @return accessModify
  **/
  @javax.annotation.Nullable
  public Boolean getAccessModify() {
    return accessModify;
  }

  public void setAccessModify(Boolean accessModify) {
    this.accessModify = accessModify;
  }


  public ALDataSourceTable attributes(List<DatasourceAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ALDataSourceTable addAttributesItem(DatasourceAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Attributes for this datasource.  @see(DatasourceAttribute)
   * @return attributes
  **/
  @javax.annotation.Nullable
  public List<DatasourceAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<DatasourceAttribute> attributes) {
    this.attributes = attributes;
  }


  public ALDataSourceTable databaseID(Integer databaseID) {
    this.databaseID = databaseID;
    return this;
  }

   /**
   * The ID of the database that this table belongs to.
   * @return databaseID
  **/
  @javax.annotation.Nullable
  public Integer getDatabaseID() {
    return databaseID;
  }

  public void setDatabaseID(Integer databaseID) {
    this.databaseID = databaseID;
  }


  public ALDataSourceTable nativeName(String nativeName) {
    this.nativeName = nativeName;
    return this;
  }

   /**
   * The fully qualified name as used by the underlying datasource type.
   * @return nativeName
  **/
  @javax.annotation.Nullable
  public String getNativeName() {
    return nativeName;
  }

  public void setNativeName(String nativeName) {
    this.nativeName = nativeName;
  }


  public ALDataSourceTable columns(List<ALDataSourceColumn> columns) {
    this.columns = columns;
    return this;
  }

  public ALDataSourceTable addColumnsItem(ALDataSourceColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * 
   * @return columns
  **/
  @javax.annotation.Nullable
  public List<ALDataSourceColumn> getColumns() {
    return columns;
  }

  public void setColumns(List<ALDataSourceColumn> columns) {
    this.columns = columns;
  }


  public ALDataSourceTable datasourceTypeID(Integer datasourceTypeID) {
    this.datasourceTypeID = datasourceTypeID;
    return this;
  }

   /**
   * What kind of datasource is this a table from?  See @see(GetDataSourceTypes) to fetch a list of the available datasource types.
   * @return datasourceTypeID
  **/
  @javax.annotation.Nullable
  public Integer getDatasourceTypeID() {
    return datasourceTypeID;
  }

  public void setDatasourceTypeID(Integer datasourceTypeID) {
    this.datasourceTypeID = datasourceTypeID;
  }


  public ALDataSourceTable primaryKey(ALDatasourcePrimaryKey primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

   /**
   * Get primaryKey
   * @return primaryKey
  **/
  @javax.annotation.Nullable
  public ALDatasourcePrimaryKey getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(ALDatasourcePrimaryKey primaryKey) {
    this.primaryKey = primaryKey;
  }


  public ALDataSourceTable resolverTableID(Integer resolverTableID) {
    this.resolverTableID = resolverTableID;
    return this;
  }

   /**
   * 
   * @return resolverTableID
  **/
  @javax.annotation.Nullable
  public Integer getResolverTableID() {
    return resolverTableID;
  }

  public void setResolverTableID(Integer resolverTableID) {
    this.resolverTableID = resolverTableID;
  }


  public ALDataSourceTable joins(List<ALDatasourceJoin> joins) {
    this.joins = joins;
    return this;
  }

  public ALDataSourceTable addJoinsItem(ALDatasourceJoin joinsItem) {
    if (this.joins == null) {
      this.joins = new ArrayList<>();
    }
    this.joins.add(joinsItem);
    return this;
  }

   /**
   * List which columns are part of any defined join between this table and linked tables.
   * @return joins
  **/
  @javax.annotation.Nullable
  public List<ALDatasourceJoin> getJoins() {
    return joins;
  }

  public void setJoins(List<ALDatasourceJoin> joins) {
    this.joins = joins;
  }


  public ALDataSourceTable links(List<ALDatasourceLink> links) {
    this.links = links;
    return this;
  }

  public ALDataSourceTable addLinksItem(ALDatasourceLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * What other tables can this table be linked to?
   * @return links
  **/
  @javax.annotation.Nullable
  public List<ALDatasourceLink> getLinks() {
    return links;
  }

  public void setLinks(List<ALDatasourceLink> links) {
    this.links = links;
  }


  public ALDataSourceTable fullNativeName(String fullNativeName) {
    this.fullNativeName = fullNativeName;
    return this;
  }

   /**
   * The entire native name of this item -- usually includes database and table
   * @return fullNativeName
  **/
  @javax.annotation.Nullable
  public String getFullNativeName() {
    return fullNativeName;
  }

  public void setFullNativeName(String fullNativeName) {
    this.fullNativeName = fullNativeName;
  }


  public ALDataSourceTable datasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

   /**
   * ID of the Datasource
   * @return datasourceId
  **/
  @javax.annotation.Nullable
  public Integer getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(Integer datasourceId) {
    this.datasourceId = datasourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ALDataSourceTable alDataSourceTable = (ALDataSourceTable) o;
    return Objects.equals(this.ID, alDataSourceTable.ID) &&
        Objects.equals(this.name, alDataSourceTable.name) &&
        Objects.equals(this.nameEx, alDataSourceTable.nameEx) &&
        Objects.equals(this.enabled, alDataSourceTable.enabled) &&
        Objects.equals(this.visible, alDataSourceTable.visible) &&
        Objects.equals(this.accessView, alDataSourceTable.accessView) &&
        Objects.equals(this.accessModify, alDataSourceTable.accessModify) &&
        Objects.equals(this.attributes, alDataSourceTable.attributes) &&
        Objects.equals(this.databaseID, alDataSourceTable.databaseID) &&
        Objects.equals(this.nativeName, alDataSourceTable.nativeName) &&
        Objects.equals(this.columns, alDataSourceTable.columns) &&
        Objects.equals(this.datasourceTypeID, alDataSourceTable.datasourceTypeID) &&
        Objects.equals(this.primaryKey, alDataSourceTable.primaryKey) &&
        Objects.equals(this.resolverTableID, alDataSourceTable.resolverTableID) &&
        Objects.equals(this.joins, alDataSourceTable.joins) &&
        Objects.equals(this.links, alDataSourceTable.links) &&
        Objects.equals(this.fullNativeName, alDataSourceTable.fullNativeName) &&
        Objects.equals(this.datasourceId, alDataSourceTable.datasourceId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, nameEx, enabled, visible, accessView, accessModify, attributes, databaseID, nativeName, columns, datasourceTypeID, primaryKey, resolverTableID, joins, links, fullNativeName, datasourceId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ALDataSourceTable {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameEx: ").append(toIndentedString(nameEx)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    accessView: ").append(toIndentedString(accessView)).append("\n");
    sb.append("    accessModify: ").append(toIndentedString(accessModify)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    databaseID: ").append(toIndentedString(databaseID)).append("\n");
    sb.append("    nativeName: ").append(toIndentedString(nativeName)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    datasourceTypeID: ").append(toIndentedString(datasourceTypeID)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    resolverTableID: ").append(toIndentedString(resolverTableID)).append("\n");
    sb.append("    joins: ").append(toIndentedString(joins)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    fullNativeName: ").append(toIndentedString(fullNativeName)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("NameEx");
    openapiFields.add("Enabled");
    openapiFields.add("Visible");
    openapiFields.add("AccessView");
    openapiFields.add("AccessModify");
    openapiFields.add("Attributes");
    openapiFields.add("DatabaseID");
    openapiFields.add("NativeName");
    openapiFields.add("Columns");
    openapiFields.add("DatasourceTypeID");
    openapiFields.add("PrimaryKey");
    openapiFields.add("ResolverTableID");
    openapiFields.add("Joins");
    openapiFields.add("Links");
    openapiFields.add("FullNativeName");
    openapiFields.add("DatasourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ALDataSourceTable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ALDataSourceTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ALDataSourceTable is not found in the empty JSON string", ALDataSourceTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ALDataSourceTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ALDataSourceTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NameEx") != null && !jsonObj.get("NameEx").isJsonNull()) && !jsonObj.get("NameEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NameEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NameEx").toString()));
      }
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("Attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be an array in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
          }

          // validate the optional field `Attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            DatasourceAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("NativeName") != null && !jsonObj.get("NativeName").isJsonNull()) && !jsonObj.get("NativeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NativeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NativeName").toString()));
      }
      if (jsonObj.get("Columns") != null && !jsonObj.get("Columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("Columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Columns` to be an array in the JSON string but got `%s`", jsonObj.get("Columns").toString()));
          }

          // validate the optional field `Columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            ALDataSourceColumn.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      // validate the optional field `PrimaryKey`
      if (jsonObj.get("PrimaryKey") != null && !jsonObj.get("PrimaryKey").isJsonNull()) {
        ALDatasourcePrimaryKey.validateJsonElement(jsonObj.get("PrimaryKey"));
      }
      if (jsonObj.get("Joins") != null && !jsonObj.get("Joins").isJsonNull()) {
        JsonArray jsonArrayjoins = jsonObj.getAsJsonArray("Joins");
        if (jsonArrayjoins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Joins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Joins` to be an array in the JSON string but got `%s`", jsonObj.get("Joins").toString()));
          }

          // validate the optional field `Joins` (array)
          for (int i = 0; i < jsonArrayjoins.size(); i++) {
            ALDatasourceJoin.validateJsonElement(jsonArrayjoins.get(i));
          };
        }
      }
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("Links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Links` to be an array in the JSON string but got `%s`", jsonObj.get("Links").toString()));
          }

          // validate the optional field `Links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ALDatasourceLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("FullNativeName") != null && !jsonObj.get("FullNativeName").isJsonNull()) && !jsonObj.get("FullNativeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullNativeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullNativeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ALDataSourceTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ALDataSourceTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ALDataSourceTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ALDataSourceTable.class));

       return (TypeAdapter<T>) new TypeAdapter<ALDataSourceTable>() {
           @Override
           public void write(JsonWriter out, ALDataSourceTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ALDataSourceTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ALDataSourceTable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ALDataSourceTable
  * @throws IOException if the JSON string is invalid with respect to ALDataSourceTable
  */
  public static ALDataSourceTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ALDataSourceTable.class);
  }

 /**
  * Convert an instance of ALDataSourceTable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

