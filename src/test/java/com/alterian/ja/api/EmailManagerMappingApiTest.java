/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiException;
import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateEMMappingRequest;
import com.alterian.ja.model.CreateEMSessionDefaultResponse;
import com.alterian.ja.model.CreateEMSessionRequest;
import com.alterian.ja.model.DeleteEMMappingRequest;
import com.alterian.ja.model.GetClientSetsRequest;
import com.alterian.ja.model.GetEMDownloadMappingsDefaultResponse;
import com.alterian.ja.model.GetEMMappingDefaultResponse;
import com.alterian.ja.model.GetEMMappingRequest;
import com.alterian.ja.model.GetEMMappingsDefaultResponse;
import com.alterian.ja.model.GetEMMappingsRequest;
import com.alterian.ja.model.MoveEMMappingRequest;
import com.alterian.ja.model.RenameEMMappingRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailManagerMappingApi
 */
@Disabled
public class EmailManagerMappingApiTest {

    private final EmailManagerMappingApi api = new EmailManagerMappingApi();

    /**
     * Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     *
     * Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEMMappingTest() throws ApiException {
        CreateEMMappingRequest createEMMappingRequest = null;
        CreateClientDefaultResponse response = api.createEMMapping(createEMMappingRequest);
        // TODO: test validations
    }

    /**
     * Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
     *
     * Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEMSessionTest() throws ApiException {
        CreateEMSessionRequest createEMSessionRequest = null;
        CreateEMSessionDefaultResponse response = api.createEMSession(createEMSessionRequest);
        // TODO: test validations
    }

    /**
     * Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     *
     * Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEMMappingTest() throws ApiException {
        DeleteEMMappingRequest deleteEMMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteEMMapping(deleteEMMappingRequest);
        // TODO: test validations
    }

    /**
     * Return back a list of the @see(EMDownloadMapping)s which the token can view.
     *
     * Return back a list of the @see(EMDownloadMapping)s which the token can view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEMDownloadMappingsTest() throws ApiException {
        GetClientSetsRequest getClientSetsRequest = null;
        GetEMDownloadMappingsDefaultResponse response = api.getEMDownloadMappings(getClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Returns back a single @see(EMUploadMapping) by its ID.
     *
     * Returns back a single @see(EMUploadMapping) by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEMMappingTest() throws ApiException {
        GetEMMappingRequest getEMMappingRequest = null;
        GetEMMappingDefaultResponse response = api.getEMMapping(getEMMappingRequest);
        // TODO: test validations
    }

    /**
     * Return back a list of the @see(EMUploadMapping)s which the token can view.
     *
     * Return back a list of the @see(EMUploadMapping)s which the token can view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEMMappingsTest() throws ApiException {
        GetEMMappingsRequest getEMMappingsRequest = null;
        GetEMMappingsDefaultResponse response = api.getEMMappings(getEMMappingsRequest);
        // TODO: test validations
    }

    /**
     * Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     *
     * Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveEMMappingTest() throws ApiException {
        MoveEMMappingRequest moveEMMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.moveEMMapping(moveEMMappingRequest);
        // TODO: test validations
    }

    /**
     * Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     *
     * Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameEMMappingTest() throws ApiException {
        RenameEMMappingRequest renameEMMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.renameEMMapping(renameEMMappingRequest);
        // TODO: test validations
    }

    /**
     * Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     *
     * Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEMMappingTest() throws ApiException {
        CreateEMMappingRequest createEMMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.updateEMMapping(createEMMappingRequest);
        // TODO: test validations
    }

}
