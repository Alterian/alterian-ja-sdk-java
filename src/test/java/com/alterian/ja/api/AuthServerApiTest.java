/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiException;
import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AUTHChangePasswordRequest;
import com.alterian.ja.model.AUTHCreateLoginDefaultResponse;
import com.alterian.ja.model.AUTHCreateLoginRequest;
import com.alterian.ja.model.AUTHDisableLoginRequest;
import com.alterian.ja.model.AUTHGetClientLoginsDefaultResponse;
import com.alterian.ja.model.AUTHGetClientLoginsRequest;
import com.alterian.ja.model.AUTHGetLoginPasswordRulesDefaultResponse;
import com.alterian.ja.model.AUTHGetLoginPasswordRulesRequest;
import com.alterian.ja.model.AUTHGetLoginsForUserRequest;
import com.alterian.ja.model.AUTHGetLoginsRequest;
import com.alterian.ja.model.AUTHRenameLoginRequest;
import com.alterian.ja.model.AUTHSetLoginUserIdRequest;
import com.alterian.ja.model.AUTHUpdateLoginRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthServerApi
 */
@Disabled
public class AuthServerApiTest {

    private final AuthServerApi api = new AuthServerApi();

    /**
     * Set a new password for tthe specified login
     *
     * Set a new password for tthe specified login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHChangePasswordTest() throws ApiException {
        AUTHChangePasswordRequest auTHChangePasswordRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHChangePassword(auTHChangePasswordRequest);
        // TODO: test validations
    }

    /**
     * Creates a login and associates it with the client
     *
     * Creates a login and associates it with the client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHCreateLoginTest() throws ApiException {
        AUTHCreateLoginRequest auTHCreateLoginRequest = null;
        AUTHCreateLoginDefaultResponse response = api.aUTHCreateLogin(auTHCreateLoginRequest);
        // TODO: test validations
    }

    /**
     * Disable the specified login
     *
     * Disable the specified login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHDisableLoginTest() throws ApiException {
        AUTHDisableLoginRequest auTHDisableLoginRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHDisableLogin(auTHDisableLoginRequest);
        // TODO: test validations
    }

    /**
     * Enable the specified login
     *
     * Enable the specified login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHEnableLoginTest() throws ApiException {
        AUTHDisableLoginRequest auTHDisableLoginRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHEnableLogin(auTHDisableLoginRequest);
        // TODO: test validations
    }

    /**
     * Expire the password for the specified login
     *
     * Expire the password for the specified login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHExpirePasswordTest() throws ApiException {
        AUTHDisableLoginRequest auTHDisableLoginRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHExpirePassword(auTHDisableLoginRequest);
        // TODO: test validations
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     *
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHGetClientLoginsTest() throws ApiException {
        AUTHGetClientLoginsRequest auTHGetClientLoginsRequest = null;
        AUTHGetClientLoginsDefaultResponse response = api.aUTHGetClientLogins(auTHGetClientLoginsRequest);
        // TODO: test validations
    }

    /**
     * Request the password policy rules from the authentication system
     *
     * Request the password policy rules from the authentication system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHGetLoginPasswordRulesTest() throws ApiException {
        AUTHGetLoginPasswordRulesRequest auTHGetLoginPasswordRulesRequest = null;
        AUTHGetLoginPasswordRulesDefaultResponse response = api.aUTHGetLoginPasswordRules(auTHGetLoginPasswordRulesRequest);
        // TODO: test validations
    }

    /**
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     *
     * Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHGetLoginsTest() throws ApiException {
        AUTHGetLoginsRequest auTHGetLoginsRequest = null;
        AUTHGetClientLoginsDefaultResponse response = api.aUTHGetLogins(auTHGetLoginsRequest);
        // TODO: test validations
    }

    /**
     * Returns back the login(s) associated with a particular userid and siteid
     *
     * Returns back the login(s) associated with a particular userid and siteid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHGetLoginsForUserTest() throws ApiException {
        AUTHGetLoginsForUserRequest auTHGetLoginsForUserRequest = null;
        AUTHGetClientLoginsDefaultResponse response = api.aUTHGetLoginsForUser(auTHGetLoginsForUserRequest);
        // TODO: test validations
    }

    /**
     * Rename the specified login
     *
     * Rename the specified login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHRenameLoginTest() throws ApiException {
        AUTHRenameLoginRequest auTHRenameLoginRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHRenameLogin(auTHRenameLoginRequest);
        // TODO: test validations
    }

    /**
     * Associates an auth system login with a CM user ID
     *
     * Associates an auth system login with a CM user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHSetLoginUserIdTest() throws ApiException {
        AUTHSetLoginUserIdRequest auTHSetLoginUserIdRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHSetLoginUserId(auTHSetLoginUserIdRequest);
        // TODO: test validations
    }

    /**
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     *
     * Updates the important components of a login, use expire, etc. to expire or delete a login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aUTHUpdateLoginTest() throws ApiException {
        AUTHUpdateLoginRequest auTHUpdateLoginRequest = null;
        AUTHChangePasswordDefaultResponse response = api.aUTHUpdateLogin(auTHUpdateLoginRequest);
        // TODO: test validations
    }

}
