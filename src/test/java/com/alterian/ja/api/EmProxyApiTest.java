/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiException;
import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.EMAbortDeploymentRequest;
import com.alterian.ja.model.EMAuthenticateRequest;
import com.alterian.ja.model.EMDeleteListRequest;
import com.alterian.ja.model.EMGetClientGroupUsersDefaultResponse;
import com.alterian.ja.model.EMGetClientGroupUsersRequest;
import com.alterian.ja.model.EMGetClientGroupsDefaultResponse;
import com.alterian.ja.model.EMGetClientGroupsRequest;
import com.alterian.ja.model.EMGetClientInfoDefaultResponse;
import com.alterian.ja.model.EMGetClientInfoRequest;
import com.alterian.ja.model.EMGetClientSetsDefaultResponse;
import com.alterian.ja.model.EMGetClientSetsRequest;
import com.alterian.ja.model.EMGetCreativeDefaultResponse;
import com.alterian.ja.model.EMGetCreativeFieldsDefaultResponse;
import com.alterian.ja.model.EMGetCreativeRequest;
import com.alterian.ja.model.EMGetCreativesDefaultResponse;
import com.alterian.ja.model.EMGetCreativesRequest;
import com.alterian.ja.model.EMGetEMServiceURLRequest;
import com.alterian.ja.model.EMGetFoldersLazyDefaultResponse;
import com.alterian.ja.model.EMGetFoldersLazyRequest;
import com.alterian.ja.model.EMGetInboundAddressesDefaultResponse;
import com.alterian.ja.model.EMGetInboundAddressesRequest;
import com.alterian.ja.model.EMGetTemplateContentRequest;
import com.alterian.ja.model.EMGetUsersRequest;
import com.alterian.ja.model.EMLogOffRequest;
import com.alterian.ja.model.EMPauseDeploymentRequest;
import com.alterian.ja.model.EMPrimaryKeysDefaultResponse;
import com.alterian.ja.model.EMPrimaryKeysRequest;
import com.alterian.ja.model.EMSetEMServiceURLRequest;
import com.alterian.ja.model.EMTestEMServiceURLRequest;
import com.alterian.ja.model.GetDataSourceEngineUserNameDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmProxyApi
 */
@Disabled
public class EmProxyApiTest {

    private final EmProxyApi api = new EmProxyApi();

    /**
     * Proxy call to EM UserManager.asmx to abort a deployment
     *
     * Proxy call to EM UserManager.asmx to abort a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMAbortDeploymentTest() throws ApiException {
        EMAbortDeploymentRequest emAbortDeploymentRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMAbortDeployment(emAbortDeploymentRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     *
     * Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMAuthenticateTest() throws ApiException {
        EMAuthenticateRequest emAuthenticateRequest = null;
        GetDataSourceEngineUserNameDefaultResponse response = api.eMAuthenticate(emAuthenticateRequest);
        // TODO: test validations
    }

    /**
     * Deletes a list
     *
     * Deletes a list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMDeleteListTest() throws ApiException {
        EMDeleteListRequest emDeleteListRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMDeleteList(emDeleteListRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     *
     * Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetClientGroupUsersTest() throws ApiException {
        EMGetClientGroupUsersRequest emGetClientGroupUsersRequest = null;
        EMGetClientGroupUsersDefaultResponse response = api.eMGetClientGroupUsers(emGetClientGroupUsersRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     *
     * Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetClientGroupsTest() throws ApiException {
        EMGetClientGroupsRequest emGetClientGroupsRequest = null;
        EMGetClientGroupsDefaultResponse response = api.eMGetClientGroups(emGetClientGroupsRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     *
     * Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetClientInfoTest() throws ApiException {
        EMGetClientInfoRequest emGetClientInfoRequest = null;
        EMGetClientInfoDefaultResponse response = api.eMGetClientInfo(emGetClientInfoRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     *
     * Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetClientSetsTest() throws ApiException {
        EMGetClientSetsRequest emGetClientSetsRequest = null;
        EMGetClientSetsDefaultResponse response = api.eMGetClientSets(emGetClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to get EM creative
     *
     * Proxy call to get EM creative
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetCreativeTest() throws ApiException {
        EMGetCreativeRequest emGetCreativeRequest = null;
        EMGetCreativeDefaultResponse response = api.eMGetCreative(emGetCreativeRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to get EM creative fields
     *
     * Proxy call to get EM creative fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetCreativeFieldsTest() throws ApiException {
        EMGetCreativeRequest emGetCreativeRequest = null;
        EMGetCreativeFieldsDefaultResponse response = api.eMGetCreativeFields(emGetCreativeRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to get EM creatives
     *
     * Proxy call to get EM creatives
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetCreativesTest() throws ApiException {
        EMGetCreativesRequest emGetCreativesRequest = null;
        EMGetCreativesDefaultResponse response = api.eMGetCreatives(emGetCreativesRequest);
        // TODO: test validations
    }

    /**
     * Returns back the EM Service URL for the siteID requested.
     *
     * Returns back the EM Service URL for the siteID requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetEMServiceURLTest() throws ApiException {
        EMGetEMServiceURLRequest emGetEMServiceURLRequest = null;
        GetDataSourceEngineUserNameDefaultResponse response = api.eMGetEMServiceURL(emGetEMServiceURLRequest);
        // TODO: test validations
    }

    /**
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     *
     * Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetEmailValidationExpressionTest() throws ApiException {
        GetDataSourceEngineUserNameDefaultResponse response = api.eMGetEmailValidationExpression();
        // TODO: test validations
    }

    /**
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     *
     * Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetFoldersLazyTest() throws ApiException {
        EMGetFoldersLazyRequest emGetFoldersLazyRequest = null;
        EMGetFoldersLazyDefaultResponse response = api.eMGetFoldersLazy(emGetFoldersLazyRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to get inbound addresses
     *
     * Proxy call to get inbound addresses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetInboundAddressesTest() throws ApiException {
        EMGetInboundAddressesRequest emGetInboundAddressesRequest = null;
        EMGetInboundAddressesDefaultResponse response = api.eMGetInboundAddresses(emGetInboundAddressesRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to get EM template content
     *
     * Proxy call to get EM template content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetTemplateContentTest() throws ApiException {
        EMGetTemplateContentRequest emGetTemplateContentRequest = null;
        GetDataSourceEngineUserNameDefaultResponse response = api.eMGetTemplateContent(emGetTemplateContentRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     *
     * Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMGetUsersTest() throws ApiException {
        EMGetUsersRequest emGetUsersRequest = null;
        EMGetClientGroupUsersDefaultResponse response = api.eMGetUsers(emGetUsersRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     *
     * Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMIsSysAdminTest() throws ApiException {
        EMGetClientInfoRequest emGetClientInfoRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMIsSysAdmin(emGetClientInfoRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     *
     * Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMLogOffTest() throws ApiException {
        EMLogOffRequest emLogOffRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMLogOff(emLogOffRequest);
        // TODO: test validations
    }

    /**
     * Proxy call to EM UserManager.asmx to pause a deployment
     *
     * Proxy call to EM UserManager.asmx to pause a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMPauseDeploymentTest() throws ApiException {
        EMPauseDeploymentRequest emPauseDeploymentRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMPauseDeployment(emPauseDeploymentRequest);
        // TODO: test validations
    }

    /**
     * Returns back the primary keys for a specific EM client
     *
     * Returns back the primary keys for a specific EM client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMPrimaryKeysTest() throws ApiException {
        EMPrimaryKeysRequest emPrimaryKeysRequest = null;
        EMPrimaryKeysDefaultResponse response = api.eMPrimaryKeys(emPrimaryKeysRequest);
        // TODO: test validations
    }

    /**
     * Sets the URL used to connect to the EM instance
     *
     * Sets the URL used to connect to the EM instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMSetEMServiceURLTest() throws ApiException {
        EMSetEMServiceURLRequest emSetEMServiceURLRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMSetEMServiceURL(emSetEMServiceURLRequest);
        // TODO: test validations
    }

    /**
     * Tests the EM Service URL
     *
     * Tests the EM Service URL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eMTestEMServiceURLTest() throws ApiException {
        EMTestEMServiceURLRequest emTestEMServiceURLRequest = null;
        AUTHChangePasswordDefaultResponse response = api.eMTestEMServiceURL(emTestEMServiceURLRequest);
        // TODO: test validations
    }

}
