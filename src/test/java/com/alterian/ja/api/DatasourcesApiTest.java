/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiException;
import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AreDatasourceCampaignsPausedDefaultResponse;
import com.alterian.ja.model.AreDatasourceCampaignsPausedRequest;
import com.alterian.ja.model.AreDatasourceJobsCompleteRequest;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateDataSourceMappingRequest;
import com.alterian.ja.model.CreateDatasourceRequest;
import com.alterian.ja.model.DeleteDatasourceRequest;
import com.alterian.ja.model.DeleteFieldTransformListRequest;
import com.alterian.ja.model.DeleteTransformRequest;
import com.alterian.ja.model.DisableDatasourceRequest;
import com.alterian.ja.model.EnableDatasourceRequest;
import java.io.File;
import com.alterian.ja.model.GetClientSetsRequest;
import com.alterian.ja.model.GetDataSourceAttributesDefaultResponse;
import com.alterian.ja.model.GetDataSourceAttributesRequest;
import com.alterian.ja.model.GetDataSourceEngineUserNameDefaultResponse;
import com.alterian.ja.model.GetDataSourceEngineUserNameRequest;
import com.alterian.ja.model.GetDataSourceItemsDefaultResponse;
import com.alterian.ja.model.GetDataSourceItemsRequest;
import com.alterian.ja.model.GetDataSourceMappingsDefaultResponse;
import com.alterian.ja.model.GetDataSourceMappingsRequest;
import com.alterian.ja.model.GetDataSourceTypesDefaultResponse;
import com.alterian.ja.model.GetDataSourceUsersDefaultResponse;
import com.alterian.ja.model.GetDataSourceUsersRequest;
import com.alterian.ja.model.GetDataSourcesDefaultResponse;
import com.alterian.ja.model.GetDataSourcesRequest;
import com.alterian.ja.model.GetDatasourceColumnDefaultResponse;
import com.alterian.ja.model.GetDatasourceColumnRequest;
import com.alterian.ja.model.GetDatasourceColumnsDefaultResponse;
import com.alterian.ja.model.GetDatasourceColumnsRequest;
import com.alterian.ja.model.GetDatasourceDatabasesDefaultResponse;
import com.alterian.ja.model.GetDatasourceDatabasesRequest;
import com.alterian.ja.model.GetDatasourceDefaultResponse;
import com.alterian.ja.model.GetDatasourceFieldTypesDefaultResponse;
import com.alterian.ja.model.GetDatasourceRequest;
import com.alterian.ja.model.GetDatasourceTablesDefaultResponse;
import com.alterian.ja.model.GetDatasourceTablesRequest;
import com.alterian.ja.model.GetDecodeListDefaultResponse;
import com.alterian.ja.model.GetDecodeListRequest;
import com.alterian.ja.model.GetFieldTransformListDefaultResponse;
import com.alterian.ja.model.GetFieldTransformListRequest;
import com.alterian.ja.model.GetFieldTransformListsDefaultResponse;
import com.alterian.ja.model.GetProcessStatusDefaultResponse;
import com.alterian.ja.model.GetProcessStatusRequest;
import com.alterian.ja.model.GetTransformsRequest;
import com.alterian.ja.model.MarkDatasourceAsPendingDisableRequest;
import com.alterian.ja.model.PauseDatasourceCampaignsRequest;
import com.alterian.ja.model.RefreshDatasourceRequest;
import com.alterian.ja.model.ResumeDatasourceCampaignsRequest;
import com.alterian.ja.model.SaveDecodeListRequest;
import com.alterian.ja.model.SaveFieldTransformListRequest;
import com.alterian.ja.model.UpdateDatasourceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatasourcesApi
 */
@Disabled
public class DatasourcesApiTest {

    private final DatasourcesApi api = new DatasourcesApi();

    /**
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     *
     * Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void areDatasourceCampaignsPausedTest() throws ApiException {
        AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest = null;
        AreDatasourceCampaignsPausedDefaultResponse response = api.areDatasourceCampaignsPaused(areDatasourceCampaignsPausedRequest);
        // TODO: test validations
    }

    /**
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     *
     * Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void areDatasourceJobsCompleteTest() throws ApiException {
        AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest = null;
        AreDatasourceCampaignsPausedDefaultResponse response = api.areDatasourceJobsComplete(areDatasourceJobsCompleteRequest);
        // TODO: test validations
    }

    /**
     * Add in a @see(DatasourceUserMapping).
     *
     * Add in a @see(DatasourceUserMapping).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSourceMappingTest() throws ApiException {
        CreateDataSourceMappingRequest createDataSourceMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.createDataSourceMapping(createDataSourceMappingRequest);
        // TODO: test validations
    }

    /**
     * Creates an engine datasource configured to point at the specified server and project.
     *
     * Creates an engine datasource configured to point at the specified server and project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatasourceTest() throws ApiException {
        CreateDatasourceRequest createDatasourceRequest = null;
        CreateClientDefaultResponse response = api.createDatasource(createDatasourceRequest);
        // TODO: test validations
    }

    /**
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     *
     * Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataSourceMappingTest() throws ApiException {
        CreateDataSourceMappingRequest createDataSourceMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteDataSourceMapping(createDataSourceMappingRequest);
        // TODO: test validations
    }

    /**
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     *
     * Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDatasourceTest() throws ApiException {
        DeleteDatasourceRequest deleteDatasourceRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteDatasource(deleteDatasourceRequest);
        // TODO: test validations
    }

    /**
     * Delete all versions of the specified transformation list
     *
     * Delete all versions of the specified transformation list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldTransformListTest() throws ApiException {
        DeleteFieldTransformListRequest deleteFieldTransformListRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteFieldTransformList(deleteFieldTransformListRequest);
        // TODO: test validations
    }

    /**
     * Delete all versions of the specified transform
     *
     * Delete all versions of the specified transform
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransformTest() throws ApiException {
        DeleteTransformRequest deleteTransformRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteTransform(deleteTransformRequest);
        // TODO: test validations
    }

    /**
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     *
     * Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableDatasourceTest() throws ApiException {
        DisableDatasourceRequest disableDatasourceRequest = null;
        AUTHChangePasswordDefaultResponse response = api.disableDatasource(disableDatasourceRequest);
        // TODO: test validations
    }

    /**
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     *
     * Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableDatasourceTest() throws ApiException {
        EnableDatasourceRequest enableDatasourceRequest = null;
        AUTHChangePasswordDefaultResponse response = api.enableDatasource(enableDatasourceRequest);
        // TODO: test validations
    }

    /**
     * Export a list of field transforms for use in transforming discrete values
     *
     * Export a list of field transforms for use in transforming discrete values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportFieldTransformListTest() throws ApiException {
        Integer id = null;
        Integer version = null;
        File response = api.exportFieldTransformList(id, version);
        // TODO: test validations
    }

    /**
     * Get a list of the attributes which can be applied to the given type of datasource.
     *
     * Get a list of the attributes which can be applied to the given type of datasource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceAttributesTest() throws ApiException {
        GetDataSourceAttributesRequest getDataSourceAttributesRequest = null;
        GetDataSourceAttributesDefaultResponse response = api.getDataSourceAttributes(getDataSourceAttributesRequest);
        // TODO: test validations
    }

    /**
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     *
     * Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceEngineUserNameTest() throws ApiException {
        GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest = null;
        GetDataSourceEngineUserNameDefaultResponse response = api.getDataSourceEngineUserName(getDataSourceEngineUserNameRequest);
        // TODO: test validations
    }

    /**
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     *
     * Allows you to search for data source objects, inclusing datasource, database, table and columns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceItemsTest() throws ApiException {
        GetDataSourceItemsRequest getDataSourceItemsRequest = null;
        GetDataSourceItemsDefaultResponse response = api.getDataSourceItems(getDataSourceItemsRequest);
        // TODO: test validations
    }

    /**
     * Return back the @see(DatasourceUserMapping)s in the system
     *
     * Return back the @see(DatasourceUserMapping)s in the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceMappingsTest() throws ApiException {
        GetDataSourceMappingsRequest getDataSourceMappingsRequest = null;
        GetDataSourceMappingsDefaultResponse response = api.getDataSourceMappings(getDataSourceMappingsRequest);
        // TODO: test validations
    }

    /**
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     *
     * Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceTypesTest() throws ApiException {
        GetClientSetsRequest getClientSetsRequest = null;
        GetDataSourceTypesDefaultResponse response = api.getDataSourceTypes(getClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     *
     * Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourceUsersTest() throws ApiException {
        GetDataSourceUsersRequest getDataSourceUsersRequest = null;
        GetDataSourceUsersDefaultResponse response = api.getDataSourceUsers(getDataSourceUsersRequest);
        // TODO: test validations
    }

    /**
     * Returns back a list of @see(ALDataSource)s from the system
     *
     * Returns back a list of @see(ALDataSource)s from the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSourcesTest() throws ApiException {
        GetDataSourcesRequest getDataSourcesRequest = null;
        GetDataSourcesDefaultResponse response = api.getDataSources(getDataSourcesRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     *
     * Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasourceTest() throws ApiException {
        GetDatasourceRequest getDatasourceRequest = null;
        GetDatasourceDefaultResponse response = api.getDatasource(getDatasourceRequest);
        // TODO: test validations
    }

    /**
     * Fetch the details of one column from the system.
     *
     * Fetch the details of one column from the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasourceColumnTest() throws ApiException {
        GetDatasourceColumnRequest getDatasourceColumnRequest = null;
        GetDatasourceColumnDefaultResponse response = api.getDatasourceColumn(getDatasourceColumnRequest);
        // TODO: test validations
    }

    /**
     * Fetch a list of columns from the system.
     *
     * Fetch a list of columns from the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasourceColumnsTest() throws ApiException {
        GetDatasourceColumnsRequest getDatasourceColumnsRequest = null;
        GetDatasourceColumnsDefaultResponse response = api.getDatasourceColumns(getDatasourceColumnsRequest);
        // TODO: test validations
    }

    /**
     * Fetch a list of databases from the system.
     *
     * Fetch a list of databases from the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasourceDatabasesTest() throws ApiException {
        GetDatasourceDatabasesRequest getDatasourceDatabasesRequest = null;
        GetDatasourceDatabasesDefaultResponse response = api.getDatasourceDatabases(getDatasourceDatabasesRequest);
        // TODO: test validations
    }

    /**
     * Fetch a list of the available types of field that are supported
     *
     * Fetch a list of the available types of field that are supported
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasourceFieldTypesTest() throws ApiException {
        GetClientSetsRequest getClientSetsRequest = null;
        GetDatasourceFieldTypesDefaultResponse response = api.getDatasourceFieldTypes(getClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Fetch a list of tables from the system.
     *
     * Fetch a list of tables from the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasourceTablesTest() throws ApiException {
        GetDatasourceTablesRequest getDatasourceTablesRequest = null;
        GetDatasourceTablesDefaultResponse response = api.getDatasourceTables(getDatasourceTablesRequest);
        // TODO: test validations
    }

    /**
     * Get a specified decode list
     *
     * Get a specified decode list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDecodeListTest() throws ApiException {
        GetDecodeListRequest getDecodeListRequest = null;
        GetDecodeListDefaultResponse response = api.getDecodeList(getDecodeListRequest);
        // TODO: test validations
    }

    /**
     * Get a list of field transforms for use in transforming discrete values
     *
     * Get a list of field transforms for use in transforming discrete values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldTransformListTest() throws ApiException {
        GetFieldTransformListRequest getFieldTransformListRequest = null;
        GetFieldTransformListDefaultResponse response = api.getFieldTransformList(getFieldTransformListRequest);
        // TODO: test validations
    }

    /**
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     *
     * Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldTransformListsTest() throws ApiException {
        GetClientSetsRequest getClientSetsRequest = null;
        GetFieldTransformListsDefaultResponse response = api.getFieldTransformLists(getClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     *
     * Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProcessStatusTest() throws ApiException {
        GetProcessStatusRequest getProcessStatusRequest = null;
        GetProcessStatusDefaultResponse response = api.getProcessStatus(getProcessStatusRequest);
        // TODO: test validations
    }

    /**
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     *
     * Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformsTest() throws ApiException {
        GetTransformsRequest getTransformsRequest = null;
        GetFieldTransformListsDefaultResponse response = api.getTransforms(getTransformsRequest);
        // TODO: test validations
    }

    /**
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     *
     * Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markDatasourceAsPendingDisableTest() throws ApiException {
        MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest = null;
        AUTHChangePasswordDefaultResponse response = api.markDatasourceAsPendingDisable(markDatasourceAsPendingDisableRequest);
        // TODO: test validations
    }

    /**
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     *
     * Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseDatasourceCampaignsTest() throws ApiException {
        PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest = null;
        CreateClientDefaultResponse response = api.pauseDatasourceCampaigns(pauseDatasourceCampaignsRequest);
        // TODO: test validations
    }

    /**
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     *
     * Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshDatasourceTest() throws ApiException {
        RefreshDatasourceRequest refreshDatasourceRequest = null;
        CreateClientDefaultResponse response = api.refreshDatasource(refreshDatasourceRequest);
        // TODO: test validations
    }

    /**
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     *
     * Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeDatasourceCampaignsTest() throws ApiException {
        ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest = null;
        AUTHChangePasswordDefaultResponse response = api.resumeDatasourceCampaigns(resumeDatasourceCampaignsRequest);
        // TODO: test validations
    }

    /**
     * Save a list of decodes
     *
     * Save a list of decodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveDecodeListTest() throws ApiException {
        SaveDecodeListRequest saveDecodeListRequest = null;
        GetDecodeListDefaultResponse response = api.saveDecodeList(saveDecodeListRequest);
        // TODO: test validations
    }

    /**
     * Save a list of field transforms for use in transforming discrete values
     *
     * Save a list of field transforms for use in transforming discrete values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveFieldTransformListTest() throws ApiException {
        SaveFieldTransformListRequest saveFieldTransformListRequest = null;
        GetFieldTransformListDefaultResponse response = api.saveFieldTransformList(saveFieldTransformListRequest);
        // TODO: test validations
    }

    /**
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     *
     * Updates a @see(DatasourceUserMapping) to map it to another engine user name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataSourceMappingTest() throws ApiException {
        CreateDataSourceMappingRequest createDataSourceMappingRequest = null;
        AUTHChangePasswordDefaultResponse response = api.updateDataSourceMapping(createDataSourceMappingRequest);
        // TODO: test validations
    }

    /**
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     *
     * Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDatasourceTest() throws ApiException {
        UpdateDatasourceRequest updateDatasourceRequest = null;
        AUTHChangePasswordDefaultResponse response = api.updateDatasource(updateDatasourceRequest);
        // TODO: test validations
    }

}
