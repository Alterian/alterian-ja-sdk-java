/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiException;
import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.AUTHCreateLoginDefaultResponse;
import com.alterian.ja.model.CreateImpersonationTokenRequest;
import com.alterian.ja.model.CreateStaticTokenRequest;
import com.alterian.ja.model.DeleteStaticTokenRequest;
import com.alterian.ja.model.GetTokensDefaultResponse;
import com.alterian.ja.model.GetTokensRequest;
import com.alterian.ja.model.UpdateStaticTokenRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Disabled
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    /**
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     *
     * Using an SA token, create an impersonation token for the specific client and, optionally, user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImpersonationTokenTest() throws ApiException {
        CreateImpersonationTokenRequest createImpersonationTokenRequest = null;
        AUTHCreateLoginDefaultResponse response = api.createImpersonationToken(createImpersonationTokenRequest);
        // TODO: test validations
    }

    /**
     * Create a static token for API usage
     *
     * Create a static token for API usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStaticTokenTest() throws ApiException {
        CreateStaticTokenRequest createStaticTokenRequest = null;
        AUTHCreateLoginDefaultResponse response = api.createStaticToken(createStaticTokenRequest);
        // TODO: test validations
    }

    /**
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     *
     * Remove a static token.  Any automation or other application which is using this token will cease to function.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStaticTokenTest() throws ApiException {
        DeleteStaticTokenRequest deleteStaticTokenRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteStaticToken(deleteStaticTokenRequest);
        // TODO: test validations
    }

    /**
     * Request a list of tokens.
     *
     * Request a list of tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokensTest() throws ApiException {
        GetTokensRequest getTokensRequest = null;
        GetTokensDefaultResponse response = api.getTokens(getTokensRequest);
        // TODO: test validations
    }

    /**
     * Change the UserID mapping for a static token
     *
     * Change the UserID mapping for a static token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStaticTokenTest() throws ApiException {
        UpdateStaticTokenRequest updateStaticTokenRequest = null;
        AUTHChangePasswordDefaultResponse response = api.updateStaticToken(updateStaticTokenRequest);
        // TODO: test validations
    }

}
