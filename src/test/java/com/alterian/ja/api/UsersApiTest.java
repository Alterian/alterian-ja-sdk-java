/*
 * Journey Analytics API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.ja.api;

import com.alterian.ja.ApiException;
import com.alterian.ja.model.AUTHChangePasswordDefaultResponse;
import com.alterian.ja.model.CopyUserRequest;
import com.alterian.ja.model.CreateClientDefaultResponse;
import com.alterian.ja.model.CreateUserRequest;
import com.alterian.ja.model.DeleteUserReassignAssetsRequest;
import com.alterian.ja.model.DeleteUserRequest;
import com.alterian.ja.model.GetClientSetsRequest;
import com.alterian.ja.model.GetCulturesDefaultResponse;
import com.alterian.ja.model.GetCurrentUserDefaultResponse;
import com.alterian.ja.model.GetCurrentUserRequest;
import com.alterian.ja.model.GetTimeZonesDefaultResponse;
import com.alterian.ja.model.GetUserRequest;
import com.alterian.ja.model.GetUsersDefaultResponse;
import com.alterian.ja.model.GetUsersForClientRequest;
import com.alterian.ja.model.GetUsersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Copy a user
     *
     * Copy a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyUserTest() throws ApiException {
        CopyUserRequest copyUserRequest = null;
        CreateClientDefaultResponse response = api.copyUser(copyUserRequest);
        // TODO: test validations
    }

    /**
     * Add a new user to the specified @see(ALClient)
     *
     * Add a new user to the specified @see(ALClient)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        CreateClientDefaultResponse response = api.createUser(createUserRequest);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        DeleteUserRequest deleteUserRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteUser(deleteUserRequest);
        // TODO: test validations
    }

    /**
     * Deletes a user and reassigns their documents, files and folders to another user
     *
     * Deletes a user and reassigns their documents, files and folders to another user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserReassignAssetsTest() throws ApiException {
        DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest = null;
        AUTHChangePasswordDefaultResponse response = api.deleteUserReassignAssets(deleteUserReassignAssetsRequest);
        // TODO: test validations
    }

    /**
     * Get a list of cultures [for use with the @see(ALUser) ]
     *
     * Get a list of cultures [for use with the @see(ALUser) ]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCulturesTest() throws ApiException {
        GetClientSetsRequest getClientSetsRequest = null;
        GetCulturesDefaultResponse response = api.getCultures(getClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Return back the current user [based upon their token]
     *
     * Return back the current user [based upon their token]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        GetCurrentUserRequest getCurrentUserRequest = null;
        GetCurrentUserDefaultResponse response = api.getCurrentUser(getCurrentUserRequest);
        // TODO: test validations
    }

    /**
     * Get a list of the timezones [for use with the @see(ALUser) ]
     *
     * Get a list of the timezones [for use with the @see(ALUser) ]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeZonesTest() throws ApiException {
        GetClientSetsRequest getClientSetsRequest = null;
        GetTimeZonesDefaultResponse response = api.getTimeZones(getClientSetsRequest);
        // TODO: test validations
    }

    /**
     * Given a UserID, get the rest of the details for that user.
     *
     * Given a UserID, get the rest of the details for that user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        GetUserRequest getUserRequest = null;
        GetCurrentUserDefaultResponse response = api.getUser(getUserRequest);
        // TODO: test validations
    }

    /**
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     *
     * List the users within the current @see(ALClient), optionally filtering the set returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        GetUsersRequest getUsersRequest = null;
        GetUsersDefaultResponse response = api.getUsers(getUsersRequest);
        // TODO: test validations
    }

    /**
     * List the users within the specified client, optionally filtering the set returned.
     *
     * List the users within the specified client, optionally filtering the set returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersForClientTest() throws ApiException {
        GetUsersForClientRequest getUsersForClientRequest = null;
        GetUsersDefaultResponse response = api.getUsersForClient(getUsersForClientRequest);
        // TODO: test validations
    }

    /**
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     *
     * Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        AUTHChangePasswordDefaultResponse response = api.updateUser(createUserRequest);
        // TODO: test validations
    }

}
